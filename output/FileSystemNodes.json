[
  {
    "Id": "44ee7283-732e-4208-9e9b-22768dafe350",
    "Name": "UserLoginService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "a9a67b77-f05b-47bd-8677-66d76ea421f6",
        "Name": "Program.cs",
        "ParentId": "44ee7283-732e-4208-9e9b-22768dafe350",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing UserLoginService.Services;\nusing UserLoginService.Data;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddScoped<IUserRepository, UserRepository>();\nbuilder.Services.AddScoped<IAuthService, AuthService>();\n\nbuilder.Services.AddLogging();\n// Authentication middleware configuration can be added here if needed\n\nvar app = builder.Build();\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();\n",
        "Language": 0
      },
      {
        "Id": "964ba7bb-7090-48aa-b00e-7e865da4c99c",
        "Name": "Controllers",
        "ParentId": "44ee7283-732e-4208-9e9b-22768dafe350",
        "Type": 0,
        "Items": [
          {
            "Id": "23b7dd3a-a8c9-43f1-a8f4-3801ccc01628",
            "Name": "AuthController.cs",
            "ParentId": "964ba7bb-7090-48aa-b00e-7e865da4c99c",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing UserLoginService.Models;\nusing UserLoginService.Services;\n\nnamespace UserLoginService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class AuthController : ControllerBase\n    {\n        private readonly IAuthService _authService;\n\n        public AuthController(IAuthService authService)\n        {\n            _authService = authService;\n        }\n\n        [HttpPost(\"login\")]\n        public IActionResult Login([FromBody] LoginRequest request)\n        {\n            try\n            {\n                var response = _authService.Login(request);\n                return Ok(response);\n            }\n            catch (System.Exception ex)\n            {\n                return BadRequest(new { Error = ex.Message });\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "b2d3f337-3f6e-4442-8d27-f47d03fc2682",
        "Name": "Services",
        "ParentId": "44ee7283-732e-4208-9e9b-22768dafe350",
        "Type": 0,
        "Items": [
          {
            "Id": "47b48cf7-43c4-4f13-9d3d-5026a60dfde7",
            "Name": "IAuthService.cs",
            "ParentId": "b2d3f337-3f6e-4442-8d27-f47d03fc2682",
            "Type": 1,
            "Text": "using UserLoginService.Models;\n\nnamespace UserLoginService.Services\n{\n    public interface IAuthService\n    {\n        LoginResponse Login(LoginRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e07bd352-d785-429c-af62-d3e5bcee5ccf",
            "Name": "AuthService.cs",
            "ParentId": "b2d3f337-3f6e-4442-8d27-f47d03fc2682",
            "Type": 1,
            "Text": "using System;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Security.Claims;\nusing System.Text;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.IdentityModel.Tokens;\nusing UserLoginService.Data;\nusing UserLoginService.Models;\nusing UserLoginService.Utils;\n\nnamespace UserLoginService.Services\n{\n    public class AuthService : IAuthService\n    {\n        private readonly IUserRepository _userRepository;\n        private readonly IConfiguration _configuration;\n\n        public AuthService(IUserRepository userRepository, IConfiguration configuration)\n        {\n            _userRepository = userRepository;\n            _configuration = configuration;\n        }\n\n        public LoginResponse Login(LoginRequest request)\n        {\n            var user = _userRepository.GetUserByUsername(request.Username);\n            if (user == null || !user.IsActive)\n            {\n                throw new Exception(\"Invalid username or account is inactive.\");\n            }\n\n            if (!PasswordHelper.VerifyPassword(request.Password, user.HashedPassword))\n            {\n                throw new Exception(\"Invalid password.\");\n            }\n\n            // Generate JWT token\n            var tokenHandler = new JwtSecurityTokenHandler();\n            var secretKey = _configuration[\"Jwt:Secret\"];\n            if (string.IsNullOrEmpty(secretKey))\n            {\n                throw new Exception(\"JWT secret key is not configured.\");\n            }\n            var key = Encoding.ASCII.GetBytes(secretKey);\n            var tokenDescriptor = new SecurityTokenDescriptor\n            {\n                Subject = new ClaimsIdentity(new Claim[]\n                {\n                    new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),\n                    new Claim(ClaimTypes.Name, user.Username)\n                }),\n                Expires = DateTime.UtcNow.AddHours(1),\n                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)\n            };\n\n            var token = tokenHandler.CreateToken(tokenDescriptor);\n            var jwtToken = tokenHandler.WriteToken(token);\n\n            return new LoginResponse\n            {\n                Token = jwtToken,\n                Expiration = tokenDescriptor.Expires.Value\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "b1b222a4-b1a3-439f-a650-78a2a49e188d",
        "Name": "Data",
        "ParentId": "44ee7283-732e-4208-9e9b-22768dafe350",
        "Type": 0,
        "Items": [
          {
            "Id": "d67be11c-3594-4d2f-bde1-cb6206635351",
            "Name": "IUserRepository.cs",
            "ParentId": "b1b222a4-b1a3-439f-a650-78a2a49e188d",
            "Type": 1,
            "Text": "using UserLoginService.Models;\n\nnamespace UserLoginService.Data\n{\n    public interface IUserRepository\n    {\n        User GetUserByUsername(string username);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "7bd85513-d555-454a-996c-84734d1e2589",
            "Name": "UserRepository.cs",
            "ParentId": "b1b222a4-b1a3-439f-a650-78a2a49e188d",
            "Type": 1,
            "Text": "using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing Microsoft.Extensions.Configuration;\nusing UserLoginService.Models;\n\nnamespace UserLoginService.Data\n{\n    public class UserRepository : IUserRepository\n    {\n        private readonly string _connectionString;\n\n        public UserRepository(IConfiguration configuration)\n        {\n            _connectionString = configuration.GetConnectionString(\"DefaultConnection\");\n            if (string.IsNullOrEmpty(_connectionString))\n            {\n                throw new Exception(\"Database connection string is not configured.\");\n            }\n        }\n\n        public User GetUserByUsername(string username)\n        {\n            using (SqlConnection connection = new SqlConnection(_connectionString))\n            {\n                string query = \"SELECT Id, Username, HashedPassword, IsActive FROM Users WHERE Username = @Username\";\n                using (SqlCommand command = new SqlCommand(query, connection))\n                {\n                    command.Parameters.Add(\"@Username\", SqlDbType.NVarChar).Value = username;\n                    connection.Open();\n                    using (SqlDataReader reader = command.ExecuteReader())\n                    {\n                        if (reader.Read())\n                        {\n                            return new User\n                            {\n                                Id = reader.GetGuid(reader.GetOrdinal(\"Id\")),\n                                Username = reader.GetString(reader.GetOrdinal(\"Username\")),\n                                HashedPassword = reader.GetString(reader.GetOrdinal(\"HashedPassword\")),\n                                IsActive = reader.GetBoolean(reader.GetOrdinal(\"IsActive\"))\n                            };\n                        }\n                    }\n                }\n            }\n            return null;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "8490c091-5c8d-40a7-a4ad-91b9f83453d6",
        "Name": "Models",
        "ParentId": "44ee7283-732e-4208-9e9b-22768dafe350",
        "Type": 0,
        "Items": [
          {
            "Id": "10a0735a-42c0-456e-8a22-a6614c7e400d",
            "Name": "User.cs",
            "ParentId": "8490c091-5c8d-40a7-a4ad-91b9f83453d6",
            "Type": 1,
            "Text": "using System;\n\nnamespace UserLoginService.Models\n{\n    public class User\n    {\n        public Guid Id { get; set; }\n        public string Username { get; set; }\n        public string HashedPassword { get; set; }\n        public bool IsActive { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "1065f3db-530d-424e-910b-2545cfed7299",
            "Name": "LoginRequest.cs",
            "ParentId": "8490c091-5c8d-40a7-a4ad-91b9f83453d6",
            "Type": 1,
            "Text": "namespace UserLoginService.Models\n{\n    public class LoginRequest\n    {\n        public string Username { get; set; }\n        public string Password { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "3e69b1ca-2a67-4a9e-a75c-458020719578",
            "Name": "LoginResponse.cs",
            "ParentId": "8490c091-5c8d-40a7-a4ad-91b9f83453d6",
            "Type": 1,
            "Text": "using System;\n\nnamespace UserLoginService.Models\n{\n    public class LoginResponse\n    {\n        public string Token { get; set; }\n        public DateTime Expiration { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "e6b9771a-8622-4cb3-868f-d4e8681c105b",
        "Name": "Utils",
        "ParentId": "44ee7283-732e-4208-9e9b-22768dafe350",
        "Type": 0,
        "Items": [
          {
            "Id": "6bda7b0b-85c6-49f2-b468-1c44289d876c",
            "Name": "PasswordHelper.cs",
            "ParentId": "e6b9771a-8622-4cb3-868f-d4e8681c105b",
            "Type": 1,
            "Text": "using System;\nusing System.Security.Cryptography;\n\nnamespace UserLoginService.Utils\n{\n    public static class PasswordHelper\n    {\n        private const int SaltSize = 16; // 128 bit\n        private const int KeySize = 32; // 256 bit\n        private const int Iterations = 10000;\n\n        public static string HashPassword(string password)\n        {\n            using (var algorithm = new Rfc2898DeriveBytes(password, SaltSize, Iterations, HashAlgorithmName.SHA256))\n            {\n                var salt = algorithm.Salt;\n                var key = algorithm.GetBytes(KeySize);\n                return $\"{Convert.ToBase64String(salt)}:{Convert.ToBase64String(key)}\";\n            }\n        }\n\n        public static bool VerifyPassword(string password, string hashedPassword)\n        {\n            var parts = hashedPassword.Split(':');\n            if (parts.Length != 2)\n            {\n                return false;\n            }\n\n            var salt = Convert.FromBase64String(parts[0]);\n            var key = Convert.FromBase64String(parts[1]);\n\n            using (var algorithm = new Rfc2898DeriveBytes(password, salt, Iterations, HashAlgorithmName.SHA256))\n            {\n                var keyToCheck = algorithm.GetBytes(KeySize);\n                return CryptographicOperations.FixedTimeEquals(key, keyToCheck);\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "e2b518aa-f7b1-4c69-aafb-fec2ffece993",
    "Name": "TokenManagementSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "d02b533e-398e-4b1d-a3c1-9af286566a83",
        "Name": "Program.cs",
        "ParentId": "e2b518aa-f7b1-4c69-aafb-fec2ffece993",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing TokenManagementSystem.Services;\nusing TokenManagementSystem.Data;\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<ITokenService, TokenService>();\nbuilder.Services.AddSingleton<ITokenRepository, TokenRepository>();\n\nvar app = builder.Build();\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "b77eeb92-bc20-41c1-af82-620d4eb9b389",
        "Name": "Controllers",
        "ParentId": "e2b518aa-f7b1-4c69-aafb-fec2ffece993",
        "Type": 0,
        "Items": [
          {
            "Id": "1ce9669d-0c37-4a76-820a-d053d64d40c1",
            "Name": "TokenController.cs",
            "ParentId": "b77eeb92-bc20-41c1-af82-620d4eb9b389",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing TokenManagementSystem.Models;\nusing TokenManagementSystem.Services;\n\nnamespace TokenManagementSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TokenController : ControllerBase\n    {\n        private readonly ITokenService _tokenService;\n\n        public TokenController(ITokenService tokenService)\n        {\n            _tokenService = tokenService;\n        }\n\n        [HttpPost(\"create\")]\n        public IActionResult CreateToken([FromBody] TokenRequest request)\n        {\n            try\n            {\n                var token = _tokenService.CreateToken(request);\n                return Ok(new TokenResponse { Success = true, Token = token });\n            }\n            catch (System.Exception ex)\n            {\n                return BadRequest(new { Success = false, Error = ex.Message });\n            }\n        }\n\n        [HttpPost(\"validate\")]\n        public IActionResult ValidateToken([FromBody] TokenValidationRequest request)\n        {\n            var isValid = _tokenService.ValidateToken(request.Token);\n            return Ok(new { Success = isValid });\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "8db2c768-fe33-4619-8a6c-7db85699b909",
        "Name": "Services",
        "ParentId": "e2b518aa-f7b1-4c69-aafb-fec2ffece993",
        "Type": 0,
        "Items": [
          {
            "Id": "d3d72022-5033-4fb9-8054-a52be630e121",
            "Name": "ITokenService.cs",
            "ParentId": "8db2c768-fe33-4619-8a6c-7db85699b909",
            "Type": 1,
            "Text": "namespace TokenManagementSystem.Services\n{\n    public interface ITokenService\n    {\n        string CreateToken(Models.TokenRequest request);\n        bool ValidateToken(string token);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "ff1c2e5c-03b2-40f5-aa79-1fc6a1492021",
            "Name": "TokenService.cs",
            "ParentId": "8db2c768-fe33-4619-8a6c-7db85699b909",
            "Type": 1,
            "Text": "using System;\nusing TokenManagementSystem.Models;\nusing TokenManagementSystem.Data;\nusing TokenManagementSystem.Utils;\n\nnamespace TokenManagementSystem.Services\n{\n    public class TokenService : ITokenService\n    {\n        private readonly ITokenRepository _repository;\n\n        public TokenService(ITokenRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public string CreateToken(TokenRequest request)\n        {\n            if (string.IsNullOrWhiteSpace(request?.UserId))\n            {\n                throw new ArgumentException(\"UserId is required.\");\n            }\n            var payload = $\"{request.UserId}:{DateTime.UtcNow.Ticks}\";\n            var token = SecurityHelper.Encrypt(payload);\n            var tokenModel = new Token\n            {\n                TokenValue = token,\n                UserId = request.UserId,\n                CreatedAt = DateTime.UtcNow,\n                ExpiresAt = DateTime.UtcNow.AddHours(1)\n            };\n            _repository.StoreToken(tokenModel);\n            return token;\n        }\n\n        public bool ValidateToken(string token)\n        {\n            var tokenModel = _repository.GetToken(token);\n            if (tokenModel == null || DateTime.UtcNow > tokenModel.ExpiresAt)\n            {\n                return false;\n            }\n            return true;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "da2b9c3b-1cfe-450e-8c0c-8142eefec7be",
        "Name": "Models",
        "ParentId": "e2b518aa-f7b1-4c69-aafb-fec2ffece993",
        "Type": 0,
        "Items": [
          {
            "Id": "8edbc148-4423-4cd2-a992-78716f4617e1",
            "Name": "Token.cs",
            "ParentId": "da2b9c3b-1cfe-450e-8c0c-8142eefec7be",
            "Type": 1,
            "Text": "using System;\n\nnamespace TokenManagementSystem.Models\n{\n    public class Token\n    {\n        public string TokenValue { get; set; }\n        public string UserId { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public DateTime ExpiresAt { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "7b620c64-7d6d-4709-879c-f559dda6cdd4",
            "Name": "TokenRequest.cs",
            "ParentId": "da2b9c3b-1cfe-450e-8c0c-8142eefec7be",
            "Type": 1,
            "Text": "namespace TokenManagementSystem.Models\n{\n    public class TokenRequest\n    {\n        public string UserId { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "1af12ad1-37d7-44bf-975b-60f7f2888560",
            "Name": "TokenResponse.cs",
            "ParentId": "da2b9c3b-1cfe-450e-8c0c-8142eefec7be",
            "Type": 1,
            "Text": "namespace TokenManagementSystem.Models\n{\n    public class TokenResponse\n    {\n        public bool Success { get; set; }\n        public string Token { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "5f390a95-b54b-42ef-93a7-e30aa4a12ebf",
            "Name": "TokenValidationRequest.cs",
            "ParentId": "da2b9c3b-1cfe-450e-8c0c-8142eefec7be",
            "Type": 1,
            "Text": "namespace TokenManagementSystem.Models\n{\n    public class TokenValidationRequest\n    {\n        public string Token { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "a7ed159a-c782-4cae-87b8-8537ac55597c",
        "Name": "Data",
        "ParentId": "e2b518aa-f7b1-4c69-aafb-fec2ffece993",
        "Type": 0,
        "Items": [
          {
            "Id": "bdc58ea4-798d-4ad4-9ac2-a920c7184dea",
            "Name": "ITokenRepository.cs",
            "ParentId": "a7ed159a-c782-4cae-87b8-8537ac55597c",
            "Type": 1,
            "Text": "using TokenManagementSystem.Models;\n\nnamespace TokenManagementSystem.Data\n{\n    public interface ITokenRepository\n    {\n        void StoreToken(Token token);\n        Token GetToken(string tokenValue);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "d54bcfbd-6f54-4c9b-9d4b-8002b03ba264",
            "Name": "TokenRepository.cs",
            "ParentId": "a7ed159a-c782-4cae-87b8-8537ac55597c",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing TokenManagementSystem.Models;\n\nnamespace TokenManagementSystem.Data\n{\n    public class TokenRepository : ITokenRepository\n    {\n        private readonly ConcurrentDictionary<string, Token> _tokens = new ConcurrentDictionary<string, Token>();\n\n        public void StoreToken(Token token)\n        {\n            _tokens[token.TokenValue] = token;\n        }\n\n        public Token GetToken(string tokenValue)\n        {\n            _tokens.TryGetValue(tokenValue, out Token token);\n            return token;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "29fa894a-3ff5-4b04-b9d2-df856aa8393f",
        "Name": "Utils",
        "ParentId": "e2b518aa-f7b1-4c69-aafb-fec2ffece993",
        "Type": 0,
        "Items": [
          {
            "Id": "47671794-086f-47c6-97cf-1956ba6220a6",
            "Name": "SecurityHelper.cs",
            "ParentId": "29fa894a-3ff5-4b04-b9d2-df856aa8393f",
            "Type": 1,
            "Text": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace TokenManagementSystem.Utils\n{\n    public static class SecurityHelper\n    {\n        private static readonly string SecretKey = \"YourStrongSecretKeyHere\";\n\n        public static string Encrypt(string plainText)\n        {\n            using var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(SecretKey));\n            var hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(plainText));\n            return BitConverter.ToString(hash).Replace(\"-\", \"\").ToLowerInvariant();\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "31ecad81-7526-4ba5-bb51-3f1af045a793",
    "Name": "TwoFactorAuthenticationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "9536cc0a-1d03-47a4-a0c2-a0485811f205",
        "Name": "Program.cs",
        "ParentId": "31ecad81-7526-4ba5-bb51-3f1af045a793",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace TwoFactorAuthenticationService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "3b54412c-3a28-43a6-8148-683699a03d31",
        "Name": "Startup.cs",
        "ParentId": "31ecad81-7526-4ba5-bb51-3f1af045a793",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing TwoFactorAuthenticationService.Services;\nusing TwoFactorAuthenticationService.Infrastructure;\n\nnamespace TwoFactorAuthenticationService\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<ITwoFactorAuthService, TwoFactorAuthService>();\n            services.AddSingleton<SmsSender>();\n            services.AddSingleton<EmailSender>();\n            services.AddSingleton<AppNotificationSender>();\n            services.AddSingleton<IMessageSenderFactory, MessageSenderFactory>();\n            services.AddHttpClient();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "91408d90-12a8-4364-bfea-51191a9b157d",
        "Name": "Controllers",
        "ParentId": "31ecad81-7526-4ba5-bb51-3f1af045a793",
        "Type": 0,
        "Items": [
          {
            "Id": "afd46856-7b8c-432b-a407-90a92142bb54",
            "Name": "TwoFactorAuthController.cs",
            "ParentId": "91408d90-12a8-4364-bfea-51191a9b157d",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing TwoFactorAuthenticationService.Models;\nusing TwoFactorAuthenticationService.Services;\n\nnamespace TwoFactorAuthenticationService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TwoFactorAuthController : ControllerBase\n    {\n        private readonly ITwoFactorAuthService _authService;\n\n        public TwoFactorAuthController(ITwoFactorAuthService authService)\n        {\n            _authService = authService;\n        }\n\n        [HttpPost(\"request\")]\n        public async Task<IActionResult> RequestCode([FromBody] TwoFactorAuthRequest request)\n        {\n            var response = await _authService.RequestCodeAsync(request);\n            if (response.Success)\n                return Ok(response);\n            return BadRequest(response);\n        }\n\n        [HttpPost(\"verify\")]\n        public async Task<IActionResult> VerifyCode([FromBody] VerificationRequest request)\n        {\n            var response = await _authService.VerifyCodeAsync(request);\n            if (response.Success)\n                return Ok(response);\n            return BadRequest(response);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "aea3a03e-5703-4f29-ae4f-750c8b3fb542",
        "Name": "Services",
        "ParentId": "31ecad81-7526-4ba5-bb51-3f1af045a793",
        "Type": 0,
        "Items": [
          {
            "Id": "c749d5de-5eba-4e20-a36f-47185acfc1a1",
            "Name": "ITwoFactorAuthService.cs",
            "ParentId": "aea3a03e-5703-4f29-ae4f-750c8b3fb542",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing TwoFactorAuthenticationService.Models;\n\nnamespace TwoFactorAuthenticationService.Services\n{\n    public interface ITwoFactorAuthService\n    {\n        Task<TwoFactorAuthResponse> RequestCodeAsync(TwoFactorAuthRequest request);\n        Task<VerificationResponse> VerifyCodeAsync(VerificationRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "4b7119b4-4c55-4e34-ab00-639bff5c6848",
            "Name": "TwoFactorAuthService.cs",
            "ParentId": "aea3a03e-5703-4f29-ae4f-750c8b3fb542",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Concurrent;\nusing System.Security.Cryptography;\nusing System.Threading.Tasks;\nusing TwoFactorAuthenticationService.Models;\nusing TwoFactorAuthenticationService.Infrastructure;\n\nnamespace TwoFactorAuthenticationService.Services\n{\n    public class TwoFactorAuthService : ITwoFactorAuthService\n    {\n        private readonly IMessageSenderFactory _senderFactory;\n        // In-memory storage; production implementation should use persistent storage\n        private static readonly ConcurrentDictionary<string, CodeRecord> _codeStore = new ConcurrentDictionary<string, CodeRecord>();\n\n        public TwoFactorAuthService(IMessageSenderFactory senderFactory)\n        {\n            _senderFactory = senderFactory;\n        }\n\n        public async Task<TwoFactorAuthResponse> RequestCodeAsync(TwoFactorAuthRequest request)\n        {\n            if (string.IsNullOrWhiteSpace(request.UserId) || string.IsNullOrWhiteSpace(request.Channel) || string.IsNullOrWhiteSpace(request.Destination))\n            {\n                return new TwoFactorAuthResponse { Success = false, Message = \"Invalid request parameters.\" };\n            }\n\n            // Generate a secure random 6-digit verification code\n            var code = GenerateVerificationCode();\n            var expiry = DateTime.UtcNow.AddMinutes(5);\n            var record = new CodeRecord { Code = code, Expiry = expiry };\n            _codeStore.AddOrUpdate(request.UserId, record, (key, old) => record);\n\n            var sender = _senderFactory.GetSender(request.Channel);\n            if (sender == null)\n            {\n                return new TwoFactorAuthResponse { Success = false, Message = \"Unsupported verification channel.\" };\n            }\n\n            var message = $\"Your verification code is {code}. It expires in 5 minutes.\";\n            await sender.SendAsync(request.Destination, message);\n            return new TwoFactorAuthResponse { Success = true, Message = \"Verification code sent successfully.\" };\n        }\n\n        public async Task<VerificationResponse> VerifyCodeAsync(VerificationRequest request)\n        {\n            if (string.IsNullOrWhiteSpace(request.UserId) || string.IsNullOrWhiteSpace(request.Code))\n            {\n                return new VerificationResponse { Success = false, Message = \"Invalid verification request.\" };\n            }\n\n            if (_codeStore.TryGetValue(request.UserId, out CodeRecord record))\n            {\n                if (DateTime.UtcNow > record.Expiry)\n                {\n                    _codeStore.TryRemove(request.UserId, out _);\n                    return new VerificationResponse { Success = false, Message = \"Verification code expired.\" };\n                }\n                if (record.Code == request.Code)\n                {\n                    _codeStore.TryRemove(request.UserId, out _);\n                    return new VerificationResponse { Success = true, Message = \"Verification successful.\" };\n                }\n                return new VerificationResponse { Success = false, Message = \"Incorrect verification code.\" };\n            }\n            return new VerificationResponse { Success = false, Message = \"No verification code requested.\" };\n        }\n\n        private string GenerateVerificationCode()\n        {\n            using (var rng = new RNGCryptoServiceProvider())\n            {\n                byte[] randomNumber = new byte[4];\n                rng.GetBytes(randomNumber);\n                uint value = BitConverter.ToUInt32(randomNumber, 0) % 1000000;\n                return value.ToString(\"D6\");\n            }\n        }\n\n        // Internal record to store verification code and its expiration\n        private class CodeRecord\n        {\n            public string Code { get; set; }\n            public DateTime Expiry { get; set; }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "d80605d6-6483-49cc-825e-e9e92637779c",
        "Name": "Models",
        "ParentId": "31ecad81-7526-4ba5-bb51-3f1af045a793",
        "Type": 0,
        "Items": [
          {
            "Id": "d8c8350b-31f8-44cd-aa5f-64db29292776",
            "Name": "TwoFactorAuthRequest.cs",
            "ParentId": "d80605d6-6483-49cc-825e-e9e92637779c",
            "Type": 1,
            "Text": "namespace TwoFactorAuthenticationService.Models\n{\n    public class TwoFactorAuthRequest\n    {\n        public string UserId { get; set; }\n        // Channel can be \"SMS\", \"Email\", or \"App\"\n        public string Channel { get; set; }\n        // Destination phone number, email address, or device token\n        public string Destination { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "6e71fc5c-fe92-48f5-87b2-ce2e02c82dcf",
            "Name": "VerificationRequest.cs",
            "ParentId": "d80605d6-6483-49cc-825e-e9e92637779c",
            "Type": 1,
            "Text": "namespace TwoFactorAuthenticationService.Models\n{\n    public class VerificationRequest\n    {\n        public string UserId { get; set; }\n        public string Code { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "5465e919-fd0e-4101-b302-acb547795eb2",
            "Name": "TwoFactorAuthResponse.cs",
            "ParentId": "d80605d6-6483-49cc-825e-e9e92637779c",
            "Type": 1,
            "Text": "namespace TwoFactorAuthenticationService.Models\n{\n    public class TwoFactorAuthResponse\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "a7514cca-6aa2-401b-9aed-151f3e8e8959",
            "Name": "VerificationResponse.cs",
            "ParentId": "d80605d6-6483-49cc-825e-e9e92637779c",
            "Type": 1,
            "Text": "namespace TwoFactorAuthenticationService.Models\n{\n    public class VerificationResponse\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "a8e4fbc8-57da-47db-812f-cb26cc44c3af",
        "Name": "Infrastructure",
        "ParentId": "31ecad81-7526-4ba5-bb51-3f1af045a793",
        "Type": 0,
        "Items": [
          {
            "Id": "d30d1bd2-bdb0-4e57-a5b7-213f158c5ef3",
            "Name": "IMessageSender.cs",
            "ParentId": "a8e4fbc8-57da-47db-812f-cb26cc44c3af",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\n\nnamespace TwoFactorAuthenticationService.Infrastructure\n{\n    public interface IMessageSender\n    {\n        Task SendAsync(string destination, string message);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "6b3fd37b-2fca-46f6-aab6-2ca371edc62a",
            "Name": "SmsSender.cs",
            "ParentId": "a8e4fbc8-57da-47db-812f-cb26cc44c3af",
            "Type": 1,
            "Text": "using System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace TwoFactorAuthenticationService.Infrastructure\n{\n    public class SmsSender : IMessageSender\n    {\n        // In production, use secure configuration for API URL and credentials\n        private readonly string _smsApiUrl = \"https://api.smsprovider.com/send\";\n\n        public async Task SendAsync(string destination, string message)\n        {\n            using (var httpClient = new HttpClient())\n            {\n                var payload = new { phone = destination, text = message };\n                var json = JsonSerializer.Serialize(payload);\n                using (var content = new StringContent(json, Encoding.UTF8, \"application/json\"))\n                {\n                    var response = await httpClient.PostAsync(_smsApiUrl, content);\n                    response.EnsureSuccessStatusCode();\n                }\n            }\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "d2ae470a-f3d5-4807-a735-97d08905d9ba",
            "Name": "EmailSender.cs",
            "ParentId": "a8e4fbc8-57da-47db-812f-cb26cc44c3af",
            "Type": 1,
            "Text": "using System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace TwoFactorAuthenticationService.Infrastructure\n{\n    public class EmailSender : IMessageSender\n    {\n        // In production, use secure configuration for API URL and credentials\n        private readonly string _emailApiUrl = \"https://api.emailprovider.com/send\";\n\n        public async Task SendAsync(string destination, string message)\n        {\n            using (var httpClient = new HttpClient())\n            {\n                var payload = new { email = destination, subject = \"Your Verification Code\", body = message };\n                var json = JsonSerializer.Serialize(payload);\n                using (var content = new StringContent(json, Encoding.UTF8, \"application/json\"))\n                {\n                    var response = await httpClient.PostAsync(_emailApiUrl, content);\n                    response.EnsureSuccessStatusCode();\n                }\n            }\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "f5276216-314d-47ef-9d46-555b9490ecb0",
            "Name": "AppNotificationSender.cs",
            "ParentId": "a8e4fbc8-57da-47db-812f-cb26cc44c3af",
            "Type": 1,
            "Text": "using System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace TwoFactorAuthenticationService.Infrastructure\n{\n    public class AppNotificationSender : IMessageSender\n    {\n        // In production, use secure configuration for API URL and credentials\n        private readonly string _appNotificationApiUrl = \"https://api.appnotification.com/send\";\n\n        public async Task SendAsync(string destination, string message)\n        {\n            using (var httpClient = new HttpClient())\n            {\n                var payload = new { deviceToken = destination, title = \"Verification Code\", message = message };\n                var json = JsonSerializer.Serialize(payload);\n                using (var content = new StringContent(json, Encoding.UTF8, \"application/json\"))\n                {\n                    var response = await httpClient.PostAsync(_appNotificationApiUrl, content);\n                    response.EnsureSuccessStatusCode();\n                }\n            }\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "237ee9f9-ef2b-46e9-bdeb-84ddb0a9773b",
            "Name": "IMessageSenderFactory.cs",
            "ParentId": "a8e4fbc8-57da-47db-812f-cb26cc44c3af",
            "Type": 1,
            "Text": "namespace TwoFactorAuthenticationService.Infrastructure\n{\n    public interface IMessageSenderFactory\n    {\n        IMessageSender GetSender(string channel);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "0db65c88-2bcf-427f-abc9-d2079e7ec59b",
            "Name": "MessageSenderFactory.cs",
            "ParentId": "a8e4fbc8-57da-47db-812f-cb26cc44c3af",
            "Type": 1,
            "Text": "namespace TwoFactorAuthenticationService.Infrastructure\n{\n    public class MessageSenderFactory : IMessageSenderFactory\n    {\n        private readonly SmsSender _smsSender;\n        private readonly EmailSender _emailSender;\n        private readonly AppNotificationSender _appNotificationSender;\n\n        public MessageSenderFactory(SmsSender smsSender, EmailSender emailSender, AppNotificationSender appNotificationSender)\n        {\n            _smsSender = smsSender;\n            _emailSender = emailSender;\n            _appNotificationSender = appNotificationSender;\n        }\n\n        public IMessageSender GetSender(string channel)\n        {\n            if (string.IsNullOrWhiteSpace(channel))\n                return null;\n            switch (channel.Trim().ToLower())\n            {\n                case \"sms\":\n                    return _smsSender;\n                case \"email\":\n                    return _emailSender;\n                case \"app\":\n                    return _appNotificationSender;\n                default:\n                    return null;\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "cafbb8e5-64ba-4849-91f1-70d950f76d87",
    "Name": "UserRegistrationPortal",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "0ffa2282-4a69-48ec-bec4-113695a2d1aa",
        "Name": "Program.cs",
        "ParentId": "cafbb8e5-64ba-4849-91f1-70d950f76d87",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace UserRegistrationPortal\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "92c0a877-c58a-4412-b9fc-60fcde1bc54d",
        "Name": "Startup.cs",
        "ParentId": "cafbb8e5-64ba-4849-91f1-70d950f76d87",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing UserRegistrationPortal.Services;\nusing UserRegistrationPortal.Data;\nusing UserRegistrationPortal.Utils;\n\nnamespace UserRegistrationPortal\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IUserRepository, UserRepository>();\n            services.AddTransient<IRegistrationService, RegistrationService>();\n            services.AddSingleton<IPasswordHasher, PasswordHasher>();\n            services.AddSingleton<IEmailSender, EmailSender>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "87877cab-2b8b-4ddc-824c-7566d8d009fc",
        "Name": "Controllers",
        "ParentId": "cafbb8e5-64ba-4849-91f1-70d950f76d87",
        "Type": 0,
        "Items": [
          {
            "Id": "ecb1fde7-9197-4982-8bda-74bead087e7e",
            "Name": "RegistrationController.cs",
            "ParentId": "87877cab-2b8b-4ddc-824c-7566d8d009fc",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing UserRegistrationPortal.Services;\nusing UserRegistrationPortal.Models;\n\nnamespace UserRegistrationPortal.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class RegistrationController : ControllerBase\n    {\n        private readonly IRegistrationService _registrationService;\n\n        public RegistrationController(IRegistrationService registrationService)\n        {\n            _registrationService = registrationService;\n        }\n\n        [HttpPost(\"register\")]\n        public async Task<IActionResult> Register([FromBody] RegistrationRequest request)\n        {\n            var result = await _registrationService.RegisterUserAsync(request);\n            if (result.IsSuccess)\n            {\n                return Ok(result);\n            }\n            return BadRequest(result);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "6caeda96-a6e5-4754-9755-eb6e487dded7",
        "Name": "Services",
        "ParentId": "cafbb8e5-64ba-4849-91f1-70d950f76d87",
        "Type": 0,
        "Items": [
          {
            "Id": "ead16339-9196-412b-8a61-d539f35ada96",
            "Name": "IRegistrationService.cs",
            "ParentId": "6caeda96-a6e5-4754-9755-eb6e487dded7",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing UserRegistrationPortal.Models;\n\nnamespace UserRegistrationPortal.Services\n{\n    public interface IRegistrationService\n    {\n        Task<RegistrationResponse> RegisterUserAsync(RegistrationRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "567579d5-b67b-4d45-8d9d-5775970b2883",
            "Name": "RegistrationService.cs",
            "ParentId": "6caeda96-a6e5-4754-9755-eb6e487dded7",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing UserRegistrationPortal.Models;\nusing UserRegistrationPortal.Data;\nusing UserRegistrationPortal.Utils;\n\nnamespace UserRegistrationPortal.Services\n{\n    public class RegistrationService : IRegistrationService\n    {\n        private readonly IUserRepository _userRepository;\n        private readonly IPasswordHasher _passwordHasher;\n        private readonly IEmailSender _emailSender;\n\n        public RegistrationService(IUserRepository userRepository, IPasswordHasher passwordHasher, IEmailSender emailSender)\n        {\n            _userRepository = userRepository;\n            _passwordHasher = passwordHasher;\n            _emailSender = emailSender;\n        }\n\n        public async Task<RegistrationResponse> RegisterUserAsync(RegistrationRequest request)\n        {\n            var existingUser = await _userRepository.GetUserByEmailAsync(request.Email);\n            if (existingUser != null)\n            {\n                return new RegistrationResponse { IsSuccess = false, Message = \"Email is already registered.\" };\n            }\n\n            string hashedPassword = _passwordHasher.HashPassword(request.Password);\n\n            var newUser = new User\n            {\n                FirstName = request.FirstName,\n                LastName = request.LastName,\n                Email = request.Email,\n                PasswordHash = hashedPassword,\n                DateCreated = DateTime.UtcNow,\n                IsVerified = false\n            };\n\n            await _userRepository.CreateUserAsync(newUser);\n\n            string verificationLink = GenerateVerificationLink(newUser.Email);\n            await _emailSender.SendEmailAsync(newUser.Email, \"Verify Your Account\", $\"Please verify your account by clicking on the link: {verificationLink}\");\n\n            return new RegistrationResponse { IsSuccess = true, Message = \"Registration successful. Please check your email to verify your account.\" };\n        }\n\n        private string GenerateVerificationLink(string email)\n        {\n            var token = Convert.ToBase64String(Guid.NewGuid().ToByteArray());\n            return $\"https://digitalbank.com/verify?email={email}&token={token}\";\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "d97eca18-1f16-4626-aea6-90eec6d3cf0c",
        "Name": "Models",
        "ParentId": "cafbb8e5-64ba-4849-91f1-70d950f76d87",
        "Type": 0,
        "Items": [
          {
            "Id": "0a5b5715-b6cf-4b45-8e04-51180562e422",
            "Name": "User.cs",
            "ParentId": "d97eca18-1f16-4626-aea6-90eec6d3cf0c",
            "Type": 1,
            "Text": "using System;\n\nnamespace UserRegistrationPortal.Models\n{\n    public class User\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public string Email { get; set; }\n        public string PasswordHash { get; set; }\n        public DateTime DateCreated { get; set; }\n        public bool IsVerified { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "7c2559ca-8a0b-487a-bf47-a052aeb89264",
            "Name": "RegistrationRequest.cs",
            "ParentId": "d97eca18-1f16-4626-aea6-90eec6d3cf0c",
            "Type": 1,
            "Text": "namespace UserRegistrationPortal.Models\n{\n    public class RegistrationRequest\n    {\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public string Email { get; set; }\n        public string Password { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "22daed48-4356-4559-ac90-0023edf917fb",
            "Name": "RegistrationResponse.cs",
            "ParentId": "d97eca18-1f16-4626-aea6-90eec6d3cf0c",
            "Type": 1,
            "Text": "namespace UserRegistrationPortal.Models\n{\n    public class RegistrationResponse\n    {\n        public bool IsSuccess { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "4e96b2f6-7611-46fe-943b-c6484e4d140f",
        "Name": "Data",
        "ParentId": "cafbb8e5-64ba-4849-91f1-70d950f76d87",
        "Type": 0,
        "Items": [
          {
            "Id": "bf1b8379-c2f3-480a-92dd-9e3b75a30781",
            "Name": "IUserRepository.cs",
            "ParentId": "4e96b2f6-7611-46fe-943b-c6484e4d140f",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing UserRegistrationPortal.Models;\n\nnamespace UserRegistrationPortal.Data\n{\n    public interface IUserRepository\n    {\n        Task<User> GetUserByEmailAsync(string email);\n        Task CreateUserAsync(User user);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "f710f0f7-24c4-4171-9cf6-4650b63f74f0",
            "Name": "UserRepository.cs",
            "ParentId": "4e96b2f6-7611-46fe-943b-c6484e4d140f",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing System.Threading.Tasks;\nusing UserRegistrationPortal.Models;\n\nnamespace UserRegistrationPortal.Data\n{\n    public class UserRepository : IUserRepository\n    {\n        private readonly ConcurrentDictionary<string, User> _users = new ConcurrentDictionary<string, User>();\n\n        public Task<User> GetUserByEmailAsync(string email)\n        {\n            _users.TryGetValue(email.ToLower(), out User user);\n            return Task.FromResult(user);\n        }\n\n        public Task CreateUserAsync(User user)\n        {\n            _users[user.Email.ToLower()] = user;\n            return Task.CompletedTask;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "8c4199ed-135d-4919-bcea-bc993cc1515f",
        "Name": "Utils",
        "ParentId": "cafbb8e5-64ba-4849-91f1-70d950f76d87",
        "Type": 0,
        "Items": [
          {
            "Id": "aa1d3878-760f-4605-8c2b-cf50ede0850b",
            "Name": "PasswordHasher.cs",
            "ParentId": "8c4199ed-135d-4919-bcea-bc993cc1515f",
            "Type": 1,
            "Text": "using System.Security.Cryptography;\nusing System.Text;\n\nnamespace UserRegistrationPortal.Utils\n{\n    public interface IPasswordHasher\n    {\n        string HashPassword(string password);\n        bool VerifyPassword(string hashedPassword, string providedPassword);\n    }\n\n    public class PasswordHasher : IPasswordHasher\n    {\n        public string HashPassword(string password)\n        {\n            using (var sha256 = SHA256.Create())\n            {\n                var bytes = Encoding.UTF8.GetBytes(password);\n                var hash = sha256.ComputeHash(bytes);\n                var builder = new StringBuilder();\n                foreach (var b in hash)\n                {\n                    builder.Append(b.ToString(\"x2\"));\n                }\n                return builder.ToString();\n            }\n        }\n\n        public bool VerifyPassword(string hashedPassword, string providedPassword)\n        {\n            var providedHash = HashPassword(providedPassword);\n            return hashedPassword == providedHash;\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e008558d-3dd0-417f-a92a-a15a5b141215",
            "Name": "EmailSender.cs",
            "ParentId": "8c4199ed-135d-4919-bcea-bc993cc1515f",
            "Type": 1,
            "Text": "using System.Net;\nusing System.Net.Mail;\nusing System.Threading.Tasks;\n\nnamespace UserRegistrationPortal.Utils\n{\n    public interface IEmailSender\n    {\n        Task SendEmailAsync(string toEmail, string subject, string body);\n    }\n\n    public class EmailSender : IEmailSender\n    {\n        private readonly SmtpClient _smtpClient;\n\n        public EmailSender()\n        {\n            _smtpClient = new SmtpClient(\"smtp.digitalbank.com\")\n            {\n                Port = 587,\n                Credentials = new NetworkCredential(\"no-reply@digitalbank.com\", \"securepassword\"),\n                EnableSsl = true\n            };\n        }\n\n        public async Task SendEmailAsync(string toEmail, string subject, string body)\n        {\n            var mail = new MailMessage(\"no-reply@digitalbank.com\", toEmail, subject, body);\n            await _smtpClient.SendMailAsync(mail);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "8e84d52f-dae1-42da-99e5-70c43b8ff940",
    "Name": "PasswordResetTool",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "3361580b-c5e2-462a-831f-a637cc4d349f",
        "Name": "Program.cs",
        "ParentId": "8e84d52f-dae1-42da-99e5-70c43b8ff940",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing PasswordResetTool.Services;\nusing PasswordResetTool.Data;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IPasswordResetService, PasswordResetService>();\nbuilder.Services.AddSingleton<IPasswordResetRepository, PasswordResetRepository>();\n\nvar app = builder.Build();\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "5affdc24-e499-4ceb-a611-c61a9ee4a7ea",
        "Name": "Controllers",
        "ParentId": "8e84d52f-dae1-42da-99e5-70c43b8ff940",
        "Type": 0,
        "Items": [
          {
            "Id": "5a2ebb5c-c6ce-464f-8699-b74f29e720d5",
            "Name": "PasswordResetController.cs",
            "ParentId": "5affdc24-e499-4ceb-a611-c61a9ee4a7ea",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing PasswordResetTool.Models;\nusing PasswordResetTool.Services;\n\nnamespace PasswordResetTool.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class PasswordResetController : ControllerBase\n    {\n        private readonly IPasswordResetService _passwordResetService;\n\n        public PasswordResetController(IPasswordResetService passwordResetService)\n        {\n            _passwordResetService = passwordResetService;\n        }\n\n        [HttpPost(\"initiate\")]\n        public async Task<IActionResult> InitiateReset([FromBody] PasswordResetRequest request)\n        {\n            if (string.IsNullOrEmpty(request.Email))\n            {\n                return BadRequest(\"Email is required.\");\n            }\n\n            var result = await _passwordResetService.InitiatePasswordReset(request);\n            if (result)\n            {\n                return Ok(new { Message = \"Password reset initiated. Check your email for reset instructions.\" });\n            }\n            \n            return StatusCode(500, \"Failed to initiate password reset.\");\n        }\n\n        [HttpPost(\"reset\")]\n        public async Task<IActionResult> ResetPassword([FromBody] PasswordUpdateRequest request)\n        {\n            if (string.IsNullOrEmpty(request.Token) || string.IsNullOrEmpty(request.NewPassword) || string.IsNullOrEmpty(request.ConfirmPassword))\n            {\n                return BadRequest(\"Token and new password fields are required.\");\n            }\n\n            if (request.NewPassword != request.ConfirmPassword)\n            {\n                return BadRequest(\"Passwords do not match.\");\n            }\n\n            var result = await _passwordResetService.ResetPassword(request);\n            if (result)\n            {\n                return Ok(new { Message = \"Password has been reset successfully.\" });\n            }\n            \n            return BadRequest(\"Invalid or expired token.\");\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "d653e2c4-e105-4da0-bef7-53e2b4063da2",
        "Name": "Services",
        "ParentId": "8e84d52f-dae1-42da-99e5-70c43b8ff940",
        "Type": 0,
        "Items": [
          {
            "Id": "8258f6ec-3f6b-4ad4-a1c6-14c230a8a28a",
            "Name": "IPasswordResetService.cs",
            "ParentId": "d653e2c4-e105-4da0-bef7-53e2b4063da2",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing PasswordResetTool.Models;\n\nnamespace PasswordResetTool.Services\n{\n    public interface IPasswordResetService\n    {\n        Task<bool> InitiatePasswordReset(PasswordResetRequest request);\n        Task<bool> ResetPassword(PasswordUpdateRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "5df92bad-dcb5-4df7-a063-4c8f89802fbd",
            "Name": "PasswordResetService.cs",
            "ParentId": "d653e2c4-e105-4da0-bef7-53e2b4063da2",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing PasswordResetTool.Models;\nusing PasswordResetTool.Data;\nusing PasswordResetTool.Utils;\n\nnamespace PasswordResetTool.Services\n{\n    public class PasswordResetService : IPasswordResetService\n    {\n        private readonly IPasswordResetRepository _repository;\n\n        public PasswordResetService(IPasswordResetRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public Task<bool> InitiatePasswordReset(PasswordResetRequest request)\n        {\n            // Generate a secure token and set expiration to 1 hour from now\n            string token = TokenGenerator.GenerateToken();\n            DateTime now = DateTime.UtcNow;\n\n            var resetToken = new PasswordResetToken\n            {\n                Token = token,\n                Email = request.Email,\n                CreatedAt = now,\n                ExpiresAt = now.AddHours(1)\n            };\n\n            _repository.SaveToken(resetToken);\n            \n            // In a production environment, integrate with an email service to send the token to the user\n            return Task.FromResult(true);\n        }\n\n        public Task<bool> ResetPassword(PasswordUpdateRequest request)\n        {\n            var tokenEntry = _repository.GetToken(request.Token);\n            if (tokenEntry == null || tokenEntry.ExpiresAt < DateTime.UtcNow)\n            {\n                return Task.FromResult(false);\n            }\n\n            // Here, update the user's password in the account management system securely\n            // After a successful update, remove the token to ensure one-time use\n            _repository.RemoveToken(request.Token);\n            \n            return Task.FromResult(true);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "444f18e8-2376-415d-a3cc-355044228b58",
        "Name": "Models",
        "ParentId": "8e84d52f-dae1-42da-99e5-70c43b8ff940",
        "Type": 0,
        "Items": [
          {
            "Id": "6fd745ee-647a-42a1-a706-2d2dbe102df1",
            "Name": "PasswordResetRequest.cs",
            "ParentId": "444f18e8-2376-415d-a3cc-355044228b58",
            "Type": 1,
            "Text": "namespace PasswordResetTool.Models\n{\n    public class PasswordResetRequest\n    {\n        public string Email { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "3877310e-f746-427b-a7dd-d40e9e9501f8",
            "Name": "PasswordUpdateRequest.cs",
            "ParentId": "444f18e8-2376-415d-a3cc-355044228b58",
            "Type": 1,
            "Text": "namespace PasswordResetTool.Models\n{\n    public class PasswordUpdateRequest\n    {\n        public string Token { get; set; }\n        public string NewPassword { get; set; }\n        public string ConfirmPassword { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "546659c7-c676-4837-9603-3e23c081841e",
            "Name": "PasswordResetToken.cs",
            "ParentId": "444f18e8-2376-415d-a3cc-355044228b58",
            "Type": 1,
            "Text": "using System;\n\nnamespace PasswordResetTool.Models\n{\n    public class PasswordResetToken\n    {\n        public string Token { get; set; }\n        public string Email { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public DateTime ExpiresAt { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "7e53999d-1608-47e0-9f5e-7a09c26ff977",
            "Name": "PasswordResetResponse.cs",
            "ParentId": "444f18e8-2376-415d-a3cc-355044228b58",
            "Type": 1,
            "Text": "namespace PasswordResetTool.Models\n{\n    public class PasswordResetResponse\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "3e034a33-8558-4ea3-ad6a-2dc6e701985c",
        "Name": "Data",
        "ParentId": "8e84d52f-dae1-42da-99e5-70c43b8ff940",
        "Type": 0,
        "Items": [
          {
            "Id": "d5e76836-ff07-4cac-94b3-8f55f5a89292",
            "Name": "IPasswordResetRepository.cs",
            "ParentId": "3e034a33-8558-4ea3-ad6a-2dc6e701985c",
            "Type": 1,
            "Text": "using PasswordResetTool.Models;\n\nnamespace PasswordResetTool.Data\n{\n    public interface IPasswordResetRepository\n    {\n        void SaveToken(PasswordResetToken token);\n        PasswordResetToken GetToken(string token);\n        void RemoveToken(string token);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "1d10183c-2454-4e67-a9de-218bdda7f640",
            "Name": "PasswordResetRepository.cs",
            "ParentId": "3e034a33-8558-4ea3-ad6a-2dc6e701985c",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing PasswordResetTool.Models;\n\nnamespace PasswordResetTool.Data\n{\n    public class PasswordResetRepository : IPasswordResetRepository\n    {\n        private readonly ConcurrentDictionary<string, PasswordResetToken> _store = new ConcurrentDictionary<string, PasswordResetToken>();\n\n        public void SaveToken(PasswordResetToken token)\n        {\n            _store[token.Token] = token;\n        }\n\n        public PasswordResetToken GetToken(string token)\n        {\n            _store.TryGetValue(token, out PasswordResetToken resetToken);\n            return resetToken;\n        }\n\n        public void RemoveToken(string token)\n        {\n            _store.TryRemove(token, out _);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "9883d391-d943-4f15-bc1e-4fe8a0bc58ba",
        "Name": "Utils",
        "ParentId": "8e84d52f-dae1-42da-99e5-70c43b8ff940",
        "Type": 0,
        "Items": [
          {
            "Id": "559c9e9c-c4e8-4699-a713-a41dff1f673d",
            "Name": "TokenGenerator.cs",
            "ParentId": "9883d391-d943-4f15-bc1e-4fe8a0bc58ba",
            "Type": 1,
            "Text": "using System;\nusing System.Security.Cryptography;\n\nnamespace PasswordResetTool.Utils\n{\n    public static class TokenGenerator\n    {\n        public static string GenerateToken()\n        {\n            using (var rng = RandomNumberGenerator.Create())\n            {\n                byte[] tokenData = new byte[32];\n                rng.GetBytes(tokenData);\n                return Convert.ToBase64String(tokenData);\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "80813dfd-8de1-46ee-9f36-c2d3408ece63",
    "Name": "AccountOpeningService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "4a065ad3-5988-4a8d-a41b-2efd680a588a",
        "Name": "Program.cs",
        "ParentId": "80813dfd-8de1-46ee-9f36-c2d3408ece63",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing AccountOpeningService.Services;\nusing AccountOpeningService.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IAccountService, AccountService>();\nbuilder.Services.AddSingleton<IAccountRepository, AccountRepository>();\nbuilder.Services.AddSingleton<IKycService, KycService>();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();\n",
        "Language": 0
      },
      {
        "Id": "4a127ffa-70ba-473b-be13-47abb49fd5b4",
        "Name": "Controllers",
        "ParentId": "80813dfd-8de1-46ee-9f36-c2d3408ece63",
        "Type": 0,
        "Items": [
          {
            "Id": "200cf385-b285-4fa4-b73d-ba940efbebd9",
            "Name": "AccountController.cs",
            "ParentId": "4a127ffa-70ba-473b-be13-47abb49fd5b4",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing AccountOpeningService.Models;\nusing AccountOpeningService.Services;\n\nnamespace AccountOpeningService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class AccountController : ControllerBase\n    {\n        private readonly IAccountService _accountService;\n        \n        public AccountController(IAccountService accountService)\n        {\n            _accountService = accountService;\n        }\n        \n        [HttpPost(\"open\")]\n        public IActionResult OpenAccount([FromBody] AccountRequest request)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(ModelState);\n            }\n            \n            try\n            {\n                var account = _accountService.OpenAccount(request);\n                return Ok(new AccountResponse\n                {\n                    Success = true,\n                    AccountNumber = account.AccountNumber,\n                    Message = \"Account successfully created.\"\n                });\n            }\n            catch (System.Exception ex)\n            {\n                return BadRequest(new ErrorResponse { Success = false, ErrorMessage = ex.Message });\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "2bd303d9-74d7-4b67-a6d8-7c223dd689c0",
        "Name": "Services",
        "ParentId": "80813dfd-8de1-46ee-9f36-c2d3408ece63",
        "Type": 0,
        "Items": [
          {
            "Id": "691a90a6-94ed-4845-a5ea-7d2a1d06df24",
            "Name": "IAccountService.cs",
            "ParentId": "2bd303d9-74d7-4b67-a6d8-7c223dd689c0",
            "Type": 1,
            "Text": "using AccountOpeningService.Models;\n\nnamespace AccountOpeningService.Services\n{\n    public interface IAccountService\n    {\n        Account OpenAccount(AccountRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "43302593-49ee-461d-a9b2-741db731baff",
            "Name": "AccountService.cs",
            "ParentId": "2bd303d9-74d7-4b67-a6d8-7c223dd689c0",
            "Type": 1,
            "Text": "using System;\nusing System.Text.RegularExpressions;\nusing AccountOpeningService.Models;\nusing AccountOpeningService.Infrastructure;\n\nnamespace AccountOpeningService.Services\n{\n    public class AccountService : IAccountService\n    {\n        private readonly IAccountRepository _repository;\n        private readonly IKycService _kycService;\n        \n        public AccountService(IAccountRepository repository, IKycService kycService)\n        {\n            _repository = repository;\n            _kycService = kycService;\n        }\n        \n        public Account OpenAccount(AccountRequest request)\n        {\n            // Validate email format\n            if (string.IsNullOrWhiteSpace(request.Email) || !IsValidEmail(request.Email))\n            {\n                throw new ArgumentException(\"Invalid email address.\");\n            }\n            \n            // Validate customer's name\n            if (string.IsNullOrWhiteSpace(request.CustomerName))\n            {\n                throw new ArgumentException(\"Customer name is required.\");\n            }\n            \n            // Perform KYC validation\n            if (!_kycService.ValidateKyc(request.GovId))\n            {\n                throw new Exception(\"KYC validation failed for provided government ID.\");\n            }\n            \n            // Generate a unique account number\n            var accountNumber = GenerateAccountNumber();\n            \n            var account = new Account\n            {\n                AccountNumber = accountNumber,\n                CustomerName = request.CustomerName,\n                Email = request.Email,\n                GovId = request.GovId,\n                DateOpened = DateTime.UtcNow\n            };\n            \n            _repository.AddAccount(account);\n            return account;\n        }\n        \n        private bool IsValidEmail(string email)\n        {\n            var pattern = \"^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$\";\n            return Regex.IsMatch(email, pattern, RegexOptions.IgnoreCase);\n        }\n        \n        private string GenerateAccountNumber()\n        {\n            // Generate account number using current UTC timestamp and a random component\n            return DateTime.UtcNow.ToString(\"yyyyMMddHHmmssfff\") + new Random().Next(1000, 9999).ToString();\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "d8af16b5-2b83-4f6d-97d1-9274ab33d4c2",
        "Name": "Models",
        "ParentId": "80813dfd-8de1-46ee-9f36-c2d3408ece63",
        "Type": 0,
        "Items": [
          {
            "Id": "c3b809b2-d262-4168-9d9d-f0fd42286bb8",
            "Name": "Account.cs",
            "ParentId": "d8af16b5-2b83-4f6d-97d1-9274ab33d4c2",
            "Type": 1,
            "Text": "using System;\n\nnamespace AccountOpeningService.Models\n{\n    public class Account\n    {\n        public string AccountNumber { get; set; }\n        public string CustomerName { get; set; }\n        public string Email { get; set; }\n        public string GovId { get; set; }\n        public DateTime DateOpened { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "4e613163-c766-4a36-af4a-4284e0c34eff",
            "Name": "AccountRequest.cs",
            "ParentId": "d8af16b5-2b83-4f6d-97d1-9274ab33d4c2",
            "Type": 1,
            "Text": "namespace AccountOpeningService.Models\n{\n    public class AccountRequest\n    {\n        public string CustomerName { get; set; }\n        public string Email { get; set; }\n        public string GovId { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "afb7a9c9-05e3-4b19-b269-ef3538736e83",
            "Name": "AccountResponse.cs",
            "ParentId": "d8af16b5-2b83-4f6d-97d1-9274ab33d4c2",
            "Type": 1,
            "Text": "namespace AccountOpeningService.Models\n{\n    public class AccountResponse\n    {\n        public bool Success { get; set; }\n        public string AccountNumber { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "00d1483a-d71c-4438-a0c8-6d985ee9dc5c",
            "Name": "ErrorResponse.cs",
            "ParentId": "d8af16b5-2b83-4f6d-97d1-9274ab33d4c2",
            "Type": 1,
            "Text": "namespace AccountOpeningService.Models\n{\n    public class ErrorResponse\n    {\n        public bool Success { get; set; }\n        public string ErrorMessage { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "b8851a11-3625-4411-aed8-c41f1f5edb68",
        "Name": "Infrastructure",
        "ParentId": "80813dfd-8de1-46ee-9f36-c2d3408ece63",
        "Type": 0,
        "Items": [
          {
            "Id": "a82bb875-94bd-436f-a651-3cb185773ac6",
            "Name": "IAccountRepository.cs",
            "ParentId": "b8851a11-3625-4411-aed8-c41f1f5edb68",
            "Type": 1,
            "Text": "using AccountOpeningService.Models;\n\nnamespace AccountOpeningService.Infrastructure\n{\n    public interface IAccountRepository\n    {\n        void AddAccount(Account account);\n        Account GetAccount(string accountNumber);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "07958575-0497-49e6-ac8b-be9d0bf6d8c6",
            "Name": "AccountRepository.cs",
            "ParentId": "b8851a11-3625-4411-aed8-c41f1f5edb68",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing AccountOpeningService.Models;\n\nnamespace AccountOpeningService.Infrastructure\n{\n    public class AccountRepository : IAccountRepository\n    {\n        private readonly ConcurrentDictionary<string, Account> _accounts = new ConcurrentDictionary<string, Account>();\n        \n        public void AddAccount(Account account)\n        {\n            _accounts[account.AccountNumber] = account;\n        }\n        \n        public Account GetAccount(string accountNumber)\n        {\n            _accounts.TryGetValue(accountNumber, out Account account);\n            return account;\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "bd910f5e-5577-4d3d-bd4f-7ae7c4335bf9",
            "Name": "IKycService.cs",
            "ParentId": "b8851a11-3625-4411-aed8-c41f1f5edb68",
            "Type": 1,
            "Text": "namespace AccountOpeningService.Infrastructure\n{\n    public interface IKycService\n    {\n        bool ValidateKyc(string govId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "ab122680-0ef1-462e-8e7c-3e78d46a71df",
            "Name": "KycService.cs",
            "ParentId": "b8851a11-3625-4411-aed8-c41f1f5edb68",
            "Type": 1,
            "Text": "using System.Text.RegularExpressions;\n\nnamespace AccountOpeningService.Infrastructure\n{\n    public class KycService : IKycService\n    {\n        public bool ValidateKyc(string govId)\n        {\n            if (string.IsNullOrWhiteSpace(govId))\n            {\n                return false;\n            }\n            \n            // Check that government ID consists of digits only and its length is between 8 and 12 characters.\n            var pattern = \"^\\d{8,12}$\";\n            return Regex.IsMatch(govId, pattern);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "9fceeb30-a0b2-4986-b418-dcd463b22cb4",
    "Name": "CustomerProfileManager",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "beb26ceb-243b-424b-b96d-dbb5b71239f1",
        "Name": "Program.cs",
        "ParentId": "9fceeb30-a0b2-4986-b418-dcd463b22cb4",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace CustomerProfileManager\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "fa674913-f7e2-4de4-9225-01e2269824ff",
        "Name": "Startup.cs",
        "ParentId": "9fceeb30-a0b2-4986-b418-dcd463b22cb4",
        "Type": 1,
        "Text": "using CustomerProfileManager.Data;\nusing CustomerProfileManager.Services;\nusing CustomerProfileManager.Infrastructure;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace CustomerProfileManager\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IProfileService, ProfileService>();\n            services.AddSingleton<IProfileRepository, ProfileRepository>();\n            services.AddSingleton<IEncryptionService, EncryptionService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            \n            app.UseRouting();\n            \n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "e9e2ce30-6949-483d-b9e9-99c58bb8d674",
        "Name": "Controllers",
        "ParentId": "9fceeb30-a0b2-4986-b418-dcd463b22cb4",
        "Type": 0,
        "Items": [
          {
            "Id": "7e1270be-47e7-4f8f-b109-932432361ef0",
            "Name": "ProfileController.cs",
            "ParentId": "e9e2ce30-6949-483d-b9e9-99c58bb8d674",
            "Type": 1,
            "Text": "using CustomerProfileManager.Models;\nusing CustomerProfileManager.Services;\nusing Microsoft.AspNetCore.Mvc;\nusing System;\n\nnamespace CustomerProfileManager.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ProfileController : ControllerBase\n    {\n        private readonly IProfileService _profileService;\n\n        public ProfileController(IProfileService profileService)\n        {\n            _profileService = profileService;\n        }\n\n        [HttpPost(\"create\")]\n        public ActionResult<CustomerProfile> CreateProfile([FromBody] CustomerProfile profile)\n        {\n            try\n            {\n                var createdProfile = _profileService.CreateProfile(profile);\n                return Ok(createdProfile);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { error = ex.Message });\n            }\n        }\n\n        [HttpGet(\"{id}\")]\n        public ActionResult<CustomerProfile> GetProfile(Guid id)\n        {\n            var profile = _profileService.GetProfileById(id);\n            if (profile == null)\n            {\n                return NotFound();\n            }\n            return Ok(profile);\n        }\n\n        [HttpPut(\"update/{id}\")]\n        public ActionResult<CustomerProfile> UpdateProfile(Guid id, [FromBody] CustomerProfile profile)\n        {\n            try\n            {\n                var updatedProfile = _profileService.UpdateProfile(id, profile);\n                return Ok(updatedProfile);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { error = ex.Message });\n            }\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "64ce51c4-c2dc-4e5f-94ca-de427d6a2896",
        "Name": "Services",
        "ParentId": "9fceeb30-a0b2-4986-b418-dcd463b22cb4",
        "Type": 0,
        "Items": [
          {
            "Id": "d02e003d-81aa-4bfd-88bb-1bda319c38d6",
            "Name": "IProfileService.cs",
            "ParentId": "64ce51c4-c2dc-4e5f-94ca-de427d6a2896",
            "Type": 1,
            "Text": "using CustomerProfileManager.Models;\nusing System;\n\nnamespace CustomerProfileManager.Services\n{\n    public interface IProfileService\n    {\n        CustomerProfile CreateProfile(CustomerProfile profile);\n        CustomerProfile GetProfileById(Guid id);\n        CustomerProfile UpdateProfile(Guid id, CustomerProfile profile);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "04de356b-21db-4e8f-9b41-25fdf2190715",
            "Name": "ProfileService.cs",
            "ParentId": "64ce51c4-c2dc-4e5f-94ca-de427d6a2896",
            "Type": 1,
            "Text": "using CustomerProfileManager.Models;\nusing CustomerProfileManager.Data;\nusing CustomerProfileManager.Infrastructure;\nusing System;\n\nnamespace CustomerProfileManager.Services\n{\n    public class ProfileService : IProfileService\n    {\n        private readonly IProfileRepository _repository;\n        private readonly IEncryptionService _encryptionService;\n\n        public ProfileService(IProfileRepository repository, IEncryptionService encryptionService)\n        {\n            _repository = repository;\n            _encryptionService = encryptionService;\n        }\n\n        public CustomerProfile CreateProfile(CustomerProfile profile)\n        {\n            // Encrypt sensitive information before storage\n            profile.Ssn = _encryptionService.Encrypt(profile.Ssn);\n            profile.Id = Guid.NewGuid();\n            profile.CreatedAt = DateTime.UtcNow;\n            _repository.AddProfile(profile);\n            return profile;\n        }\n\n        public CustomerProfile GetProfileById(Guid id)\n        {\n            var profile = _repository.GetProfile(id);\n            return profile;\n        }\n\n        public CustomerProfile UpdateProfile(Guid id, CustomerProfile profile)\n        {\n            var existingProfile = _repository.GetProfile(id);\n            if (existingProfile == null)\n            {\n                throw new Exception(\"Profile not found\");\n            }\n            // If the SSN is modified, encrypt the new value\n            if (!string.Equals(existingProfile.Ssn, profile.Ssn))\n            {\n                profile.Ssn = _encryptionService.Encrypt(profile.Ssn);\n            }\n            profile.Id = id;\n            profile.UpdatedAt = DateTime.UtcNow;\n            _repository.UpdateProfile(profile);\n            return profile;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "c4a0a556-36f4-4000-8b07-b229c3e5a7a1",
        "Name": "Models",
        "ParentId": "9fceeb30-a0b2-4986-b418-dcd463b22cb4",
        "Type": 0,
        "Items": [
          {
            "Id": "a490cd0c-46cf-46cb-aaaf-701f407a724a",
            "Name": "CustomerProfile.cs",
            "ParentId": "c4a0a556-36f4-4000-8b07-b229c3e5a7a1",
            "Type": 1,
            "Text": "using System;\n\nnamespace CustomerProfileManager.Models\n{\n    public class CustomerProfile\n    {\n        public Guid Id { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public DateTime DateOfBirth { get; set; }\n        public string Email { get; set; }\n        public string PhoneNumber { get; set; }\n        public string Address { get; set; }\n        public string Ssn { get; set; } // Encrypted Social Security Number\n        public DateTime CreatedAt { get; set; }\n        public DateTime? UpdatedAt { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "f5816429-096d-45c2-9a8e-3c2127d06be6",
        "Name": "Data",
        "ParentId": "9fceeb30-a0b2-4986-b418-dcd463b22cb4",
        "Type": 0,
        "Items": [
          {
            "Id": "430eb2f6-b1a7-4375-abf4-139df0e4c693",
            "Name": "IProfileRepository.cs",
            "ParentId": "f5816429-096d-45c2-9a8e-3c2127d06be6",
            "Type": 1,
            "Text": "using CustomerProfileManager.Models;\nusing System;\n\nnamespace CustomerProfileManager.Data\n{\n    public interface IProfileRepository\n    {\n        void AddProfile(CustomerProfile profile);\n        CustomerProfile GetProfile(Guid id);\n        void UpdateProfile(CustomerProfile profile);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "b13d0f7f-1820-4975-9799-4479dcc5dfc0",
            "Name": "ProfileRepository.cs",
            "ParentId": "f5816429-096d-45c2-9a8e-3c2127d06be6",
            "Type": 1,
            "Text": "using CustomerProfileManager.Models;\nusing System;\nusing System.Collections.Concurrent;\n\nnamespace CustomerProfileManager.Data\n{\n    public class ProfileRepository : IProfileRepository\n    {\n        private readonly ConcurrentDictionary<Guid, CustomerProfile> _profiles = new ConcurrentDictionary<Guid, CustomerProfile>();\n\n        public void AddProfile(CustomerProfile profile)\n        {\n            if (!_profiles.TryAdd(profile.Id, profile))\n            {\n                throw new Exception(\"Unable to add profile\");\n            }\n        }\n\n        public CustomerProfile GetProfile(Guid id)\n        {\n            _profiles.TryGetValue(id, out CustomerProfile profile);\n            return profile;\n        }\n\n        public void UpdateProfile(CustomerProfile profile)\n        {\n            _profiles.AddOrUpdate(profile.Id, profile, (key, existing) => profile);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "909352e1-3344-4466-a15d-c5447e6c969c",
        "Name": "Infrastructure",
        "ParentId": "9fceeb30-a0b2-4986-b418-dcd463b22cb4",
        "Type": 0,
        "Items": [
          {
            "Id": "9aea5f03-2eaf-4cf5-bc21-c48d0a08c772",
            "Name": "IEncryptionService.cs",
            "ParentId": "909352e1-3344-4466-a15d-c5447e6c969c",
            "Type": 1,
            "Text": "namespace CustomerProfileManager.Infrastructure\n{\n    public interface IEncryptionService\n    {\n        string Encrypt(string plainText);\n        string Decrypt(string cipherText);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "a4e6549c-2c4b-4c0f-96eb-22f011df5a06",
            "Name": "EncryptionService.cs",
            "ParentId": "909352e1-3344-4466-a15d-c5447e6c969c",
            "Type": 1,
            "Text": "using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace CustomerProfileManager.Infrastructure\n{\n    public class EncryptionService : IEncryptionService\n    {\n        private readonly byte[] _key;\n        private readonly byte[] _iv;\n\n        public EncryptionService()\n        {\n            // In production, retrieve these values from secure configuration\n            _key = Encoding.UTF8.GetBytes(\"a16byteslongkey!\"); // 16 bytes for AES-128\n            _iv = Encoding.UTF8.GetBytes(\"a16byteslongiv!!\"); // 16 bytes IV\n        }\n\n        public string Encrypt(string plainText)\n        {\n            if (string.IsNullOrEmpty(plainText))\n                return plainText;\n\n            using (Aes aesAlg = Aes.Create())\n            {\n                aesAlg.Key = _key;\n                aesAlg.IV = _iv;\n\n                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n                using (MemoryStream msEncrypt = new MemoryStream())\n                {\n                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n                    {\n                        swEncrypt.Write(plainText);\n                    }\n                    return Convert.ToBase64String(msEncrypt.ToArray());\n                }\n            }\n        }\n\n        public string Decrypt(string cipherText)\n        {\n            if (string.IsNullOrEmpty(cipherText))\n                return cipherText;\n\n            using (Aes aesAlg = Aes.Create())\n            {\n                aesAlg.Key = _key;\n                aesAlg.IV = _iv;\n\n                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n                using (MemoryStream msDecrypt = new MemoryStream(Convert.FromBase64String(cipherText)))\n                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                using (StreamReader srDecrypt = new StreamReader(csDecrypt))\n                {\n                    return srDecrypt.ReadToEnd();\n                }\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "b5a8321f-c44d-411b-8b03-09d4384b73ed",
    "Name": "KYCVerificationSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "5bdc5ef8-318f-422c-ab39-c21277462aa1",
        "Name": "Program.cs",
        "ParentId": "b5a8321f-c44d-411b-8b03-09d4384b73ed",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing KYCVerificationSystem.Services;\nusing KYCVerificationSystem.Data;\n\nnamespace KYCVerificationSystem\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = WebApplication.CreateBuilder(args);\n            builder.Services.AddControllers();\n            builder.Services.AddSingleton<IKycService, KycService>();\n            builder.Services.AddSingleton<IKycRepository, KycRepository>();\n            builder.Services.AddLogging();\n            \n            var app = builder.Build();\n            \n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n            \n            app.Run();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "50d8564b-c44d-4edb-bbe5-3acaa54d29b0",
        "Name": "Controllers",
        "ParentId": "b5a8321f-c44d-411b-8b03-09d4384b73ed",
        "Type": 0,
        "Items": [
          {
            "Id": "b4f67608-91c4-449f-a857-ed2b15246789",
            "Name": "KycController.cs",
            "ParentId": "50d8564b-c44d-4edb-bbe5-3acaa54d29b0",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing KYCVerificationSystem.Models;\nusing KYCVerificationSystem.Services;\n\nnamespace KYCVerificationSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class KycController : ControllerBase\n    {\n        private readonly IKycService _kycService;\n\n        public KycController(IKycService kycService)\n        {\n            _kycService = kycService;\n        }\n\n        [HttpPost(\"verify\")]\n        public IActionResult VerifyKyc([FromBody] KycRequest request)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(ModelState);\n            \n            var response = _kycService.VerifyCustomer(request);\n            \n            if (response.IsVerified)\n                return Ok(response);\n            \n            return BadRequest(response);\n        }\n\n        [HttpGet(\"{customerId}\")]\n        public IActionResult GetKycStatus(string customerId)\n        {\n            var result = _kycService.GetVerificationStatus(customerId);\n            if (result == null)\n                return NotFound();\n            return Ok(result);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "5be15b79-be8f-4fa0-bf51-6c312bf6ba99",
        "Name": "Services",
        "ParentId": "b5a8321f-c44d-411b-8b03-09d4384b73ed",
        "Type": 0,
        "Items": [
          {
            "Id": "eca018e2-0e69-4e0a-90e7-ef10a360cd33",
            "Name": "IKycService.cs",
            "ParentId": "5be15b79-be8f-4fa0-bf51-6c312bf6ba99",
            "Type": 1,
            "Text": "using KYCVerificationSystem.Models;\n\nnamespace KYCVerificationSystem.Services\n{\n    public interface IKycService\n    {\n        KycResponse VerifyCustomer(KycRequest request);\n        KycResponse GetVerificationStatus(string customerId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "1a8d29c9-e7e5-4b77-84ce-697237116685",
            "Name": "KycService.cs",
            "ParentId": "5be15b79-be8f-4fa0-bf51-6c312bf6ba99",
            "Type": 1,
            "Text": "using System;\nusing System.Text.RegularExpressions;\nusing KYCVerificationSystem.Models;\nusing KYCVerificationSystem.Data;\n\nnamespace KYCVerificationSystem.Services\n{\n    public class KycService : IKycService\n    {\n        private readonly IKycRepository _repository;\n\n        public KycService(IKycRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public KycResponse VerifyCustomer(KycRequest request)\n        {\n            if (string.IsNullOrWhiteSpace(request.CustomerId) || \n                string.IsNullOrWhiteSpace(request.DocumentNumber) ||\n                string.IsNullOrWhiteSpace(request.DocumentType) ||\n                string.IsNullOrWhiteSpace(request.DocumentUrl))\n            {\n                return new KycResponse \n                { \n                    CustomerId = request.CustomerId,\n                    IsVerified = false,\n                    Message = \"Missing required information.\"\n                };\n            }\n\n            // Validate document type\n            var allowedTypes = new string[] { \"Passport\", \"DriverLicense\", \"IDCard\" };\n            if (Array.IndexOf(allowedTypes, request.DocumentType) < 0)\n            {\n                return new KycResponse \n                { \n                    CustomerId = request.CustomerId,\n                    IsVerified = false,\n                    Message = \"Unsupported document type.\"\n                };\n            }\n\n            // Validate document number using regex patterns (customize patterns as needed)\n            string pattern = request.DocumentType == \"Passport\" ? \"^[A-PR-WYa-pr-wy][1-9]\\d\\s?\\d{4}[1-9]$\" : \"^[A-Z0-9]{5,}$\";\n            if (!Regex.IsMatch(request.DocumentNumber, pattern))\n            {\n                return new KycResponse \n                { \n                    CustomerId = request.CustomerId,\n                    IsVerified = false,\n                    Message = \"Invalid document number format.\"\n                };\n            }\n\n            // Perform a secure check for the document URL\n            if (!request.DocumentUrl.StartsWith(\"https\", StringComparison.OrdinalIgnoreCase))\n            {\n                return new KycResponse \n                { \n                    CustomerId = request.CustomerId,\n                    IsVerified = false,\n                    Message = \"Document URL must be secure (HTTPS).\"\n                };\n            }\n\n            // If all validations pass, mark the customer as verified\n            var response = new KycResponse\n            {\n                CustomerId = request.CustomerId,\n                IsVerified = true,\n                VerifiedAt = DateTime.UtcNow,\n                Message = \"Customer verification successful.\"\n            };\n            \n            // Persist the verification result\n            _repository.SaveVerification(response);\n            return response;\n        }\n\n        public KycResponse GetVerificationStatus(string customerId)\n        {\n            return _repository.GetVerification(customerId);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "893ca0d9-b97c-447f-ab89-851259beb6cb",
        "Name": "Models",
        "ParentId": "b5a8321f-c44d-411b-8b03-09d4384b73ed",
        "Type": 0,
        "Items": [
          {
            "Id": "daf3bdff-2a88-4bb4-8ede-e06edd36af1d",
            "Name": "KycRequest.cs",
            "ParentId": "893ca0d9-b97c-447f-ab89-851259beb6cb",
            "Type": 1,
            "Text": "using System.ComponentModel.DataAnnotations;\n\nnamespace KYCVerificationSystem.Models\n{\n    public class KycRequest\n    {\n        [Required]\n        public string CustomerId { get; set; }\n\n        [Required]\n        public string DocumentType { get; set; }\n\n        [Required]\n        public string DocumentNumber { get; set; }\n\n        [Required]\n        public string DocumentUrl { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "956ab81d-5540-4228-98a6-aa910c1f407d",
            "Name": "KycResponse.cs",
            "ParentId": "893ca0d9-b97c-447f-ab89-851259beb6cb",
            "Type": 1,
            "Text": "using System;\n\nnamespace KYCVerificationSystem.Models\n{\n    public class KycResponse\n    {\n        public string CustomerId { get; set; }\n        public bool IsVerified { get; set; }\n        public DateTime? VerifiedAt { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "e542dd07-1a05-4919-a40f-f08c0f905b8b",
        "Name": "Data",
        "ParentId": "b5a8321f-c44d-411b-8b03-09d4384b73ed",
        "Type": 0,
        "Items": [
          {
            "Id": "9feb9c8f-3605-4928-b02d-598f1439c0a9",
            "Name": "IKycRepository.cs",
            "ParentId": "e542dd07-1a05-4919-a40f-f08c0f905b8b",
            "Type": 1,
            "Text": "using KYCVerificationSystem.Models;\n\nnamespace KYCVerificationSystem.Data\n{\n    public interface IKycRepository\n    {\n        void SaveVerification(KycResponse response);\n        KycResponse GetVerification(string customerId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "1179ae8e-c391-472f-b7d4-3729a55963e3",
            "Name": "KycRepository.cs",
            "ParentId": "e542dd07-1a05-4919-a40f-f08c0f905b8b",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing KYCVerificationSystem.Models;\n\nnamespace KYCVerificationSystem.Data\n{\n    public class KycRepository : IKycRepository\n    {\n        private readonly ConcurrentDictionary<string, KycResponse> _verifications = new ConcurrentDictionary<string, KycResponse>();\n\n        public void SaveVerification(KycResponse response)\n        {\n            _verifications.AddOrUpdate(response.CustomerId, response, (key, oldValue) => response);\n        }\n\n        public KycResponse GetVerification(string customerId)\n        {\n            _verifications.TryGetValue(customerId, out KycResponse response);\n            return response;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "851b2860-bfbf-4a8e-a228-32c719a6b7e0",
    "Name": "AMLComplianceChecker",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "344e83a0-f3ed-49af-9b32-a5da86697f95",
        "Name": "Program.cs",
        "ParentId": "851b2860-bfbf-4a8e-a228-32c719a6b7e0",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing AMLComplianceChecker.Services;\nusing AMLComplianceChecker.Data;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IAMLComplianceService, AMLComplianceService>();\nbuilder.Services.AddSingleton<IAMLRepository, AMLRepository>();\nbuilder.Services.AddLogging();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\n\napp.UseRouting();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();\n",
        "Language": 0
      },
      {
        "Id": "ddb26473-a61a-428f-b1c4-e49362d03605",
        "Name": "Controllers",
        "ParentId": "851b2860-bfbf-4a8e-a228-32c719a6b7e0",
        "Type": 0,
        "Items": [
          {
            "Id": "7c8b9ce9-6da1-4f83-b3b3-e94f3e9c697c",
            "Name": "AMLController.cs",
            "ParentId": "ddb26473-a61a-428f-b1c4-e49362d03605",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing AMLComplianceChecker.Models;\nusing AMLComplianceChecker.Services;\n\nnamespace AMLComplianceChecker.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class AMLController : ControllerBase\n    {\n        private readonly IAMLComplianceService _amlService;\n        private readonly ILogger<AMLController> _logger;\n\n        public AMLController(IAMLComplianceService amlService, ILogger<AMLController> logger)\n        {\n            _amlService = amlService;\n            _logger = logger;\n        }\n\n        [HttpPost(\"check\")]\n        public IActionResult CheckTransaction([FromBody] Transaction transaction)\n        {\n            if (transaction == null)\n            {\n                return BadRequest(\"Transaction data is required.\");\n            }\n\n            try\n            {\n                var alert = _amlService.CheckTransaction(transaction);\n                if (alert != null)\n                {\n                    return Ok(alert);\n                }\n                return Ok(new { Message = \"Transaction passed AML checks.\" });\n            }\n            catch (System.Exception ex)\n            {\n                _logger.LogError(ex, \"Error while checking AML compliance.\");\n                return StatusCode(500, \"Internal server error.\");\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "e9ea7aea-c977-435d-bd90-f87ec7f8b8f5",
        "Name": "Services",
        "ParentId": "851b2860-bfbf-4a8e-a228-32c719a6b7e0",
        "Type": 0,
        "Items": [
          {
            "Id": "8a9ad65b-1e48-4100-9fe5-5fe7b0827b45",
            "Name": "IAMLComplianceService.cs",
            "ParentId": "e9ea7aea-c977-435d-bd90-f87ec7f8b8f5",
            "Type": 1,
            "Text": "using AMLComplianceChecker.Models;\n\nnamespace AMLComplianceChecker.Services\n{\n    public interface IAMLComplianceService\n    {\n        AMLAlert CheckTransaction(Transaction transaction);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "ee007c68-4300-45b0-924c-1a735b1b4559",
            "Name": "AMLComplianceService.cs",
            "ParentId": "e9ea7aea-c977-435d-bd90-f87ec7f8b8f5",
            "Type": 1,
            "Text": "using System;\nusing AMLComplianceChecker.Data;\nusing AMLComplianceChecker.Models;\nusing Microsoft.Extensions.Logging;\n\nnamespace AMLComplianceChecker.Services\n{\n    public class AMLComplianceService : IAMLComplianceService\n    {\n        private readonly IAMLRepository _repository;\n        private readonly ILogger<AMLComplianceService> _logger;\n        // Threshold for triggering an alert; in a production system, this could be configurable\n        private const decimal HighValueThreshold = 10000m;\n\n        public AMLComplianceService(IAMLRepository repository, ILogger<AMLComplianceService> logger)\n        {\n            _repository = repository;\n            _logger = logger;\n        }\n\n        public AMLAlert CheckTransaction(Transaction transaction)\n        {\n            // Example business logic: flag transactions exceeding a high value threshold\n            if (transaction.Amount >= HighValueThreshold)\n            {\n                var alert = new AMLAlert\n                {\n                    AlertId = Guid.NewGuid(),\n                    TransactionId = transaction.TransactionId,\n                    Reason = $\"Transaction amount of {transaction.Amount} exceeds the threshold of {HighValueThreshold}.\",\n                    Timestamp = DateTime.UtcNow\n                };\n\n                _repository.SaveAlert(alert);\n                _logger.LogInformation($\"AML alert generated for Transaction ID: {transaction.TransactionId}.\");\n                return alert;\n            }\n            \n            // Additional checks can be added here for patterns, frequency, etc.\n            \n            _logger.LogInformation($\"Transaction ID: {transaction.TransactionId} passed AML checks.\");\n            return null;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "5560163f-007c-48bd-b805-6b4902333726",
        "Name": "Models",
        "ParentId": "851b2860-bfbf-4a8e-a228-32c719a6b7e0",
        "Type": 0,
        "Items": [
          {
            "Id": "258efb9f-acd8-4f11-9502-84d28dda8df6",
            "Name": "Transaction.cs",
            "ParentId": "5560163f-007c-48bd-b805-6b4902333726",
            "Type": 1,
            "Text": "using System;\n\nnamespace AMLComplianceChecker.Models\n{\n    public class Transaction\n    {\n        public Guid TransactionId { get; set; } = Guid.NewGuid();\n        public string UserId { get; set; }\n        public decimal Amount { get; set; }\n        public string Currency { get; set; }\n        public DateTime Timestamp { get; set; } = DateTime.UtcNow;\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "261848aa-7a4a-4b76-88f4-dcbdf45b77ac",
            "Name": "AMLAlert.cs",
            "ParentId": "5560163f-007c-48bd-b805-6b4902333726",
            "Type": 1,
            "Text": "using System;\n\nnamespace AMLComplianceChecker.Models\n{\n    public class AMLAlert\n    {\n        public Guid AlertId { get; set; }\n        public Guid TransactionId { get; set; }\n        public string Reason { get; set; }\n        public DateTime Timestamp { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "0f1494eb-2fce-408b-9e9b-9ac6ecb0702e",
        "Name": "Data",
        "ParentId": "851b2860-bfbf-4a8e-a228-32c719a6b7e0",
        "Type": 0,
        "Items": [
          {
            "Id": "e29c48f9-7c44-4a79-a30f-8aaf7290c812",
            "Name": "IAMLRepository.cs",
            "ParentId": "0f1494eb-2fce-408b-9e9b-9ac6ecb0702e",
            "Type": 1,
            "Text": "using AMLComplianceChecker.Models;\nusing System.Collections.Generic;\n\nnamespace AMLComplianceChecker.Data\n{\n    public interface IAMLRepository\n    {\n        void SaveAlert(AMLAlert alert);\n        IList<AMLAlert> GetAlerts();\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "710491dd-e308-4d33-8d10-61e484fcee29",
            "Name": "AMLRepository.cs",
            "ParentId": "0f1494eb-2fce-408b-9e9b-9ac6ecb0702e",
            "Type": 1,
            "Text": "using AMLComplianceChecker.Models;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\n\nnamespace AMLComplianceChecker.Data\n{\n    public class AMLRepository : IAMLRepository\n    {\n        // In a production environment, this would interface with a database\n        private readonly ConcurrentBag<AMLAlert> _alerts = new ConcurrentBag<AMLAlert>();\n\n        public void SaveAlert(AMLAlert alert)\n        {\n            _alerts.Add(alert);\n        }\n\n        public IList<AMLAlert> GetAlerts()\n        {\n            return new List<AMLAlert>(_alerts);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "5e6e4dfe-ef87-4387-a0e0-77a7a9b50702",
    "Name": "AccountAggregationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "c1fa026c-db46-47f9-a568-933e56c42fac",
        "Name": "Program.cs",
        "ParentId": "5e6e4dfe-ef87-4387-a0e0-77a7a9b50702",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace AccountAggregationService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "0aed1860-ef0c-4682-965d-97adf7335a5c",
        "Name": "Startup.cs",
        "ParentId": "5e6e4dfe-ef87-4387-a0e0-77a7a9b50702",
        "Type": 1,
        "Text": "using AccountAggregationService.Infrastructure;\nusing AccountAggregationService.Services;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace AccountAggregationService\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient();\n            services.AddSingleton<IAggregationService, AggregationService>();\n            services.AddSingleton<IAccountIntegrationClient, AccountIntegrationClient>();\n        }\n\n        public void Configure(IApplicationBuilder app, IHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "285ed2fd-51b0-491b-afa3-c6d6154f65ab",
        "Name": "Controllers",
        "ParentId": "5e6e4dfe-ef87-4387-a0e0-77a7a9b50702",
        "Type": 0,
        "Items": [
          {
            "Id": "03dcccb7-1281-43dd-a063-3cc832bb8540",
            "Name": "AggregationController.cs",
            "ParentId": "285ed2fd-51b0-491b-afa3-c6d6154f65ab",
            "Type": 1,
            "Text": "using AccountAggregationService.Models;\nusing AccountAggregationService.Services;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\n\nnamespace AccountAggregationService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class AggregationController : ControllerBase\n    {\n        private readonly IAggregationService _aggregationService;\n\n        public AggregationController(IAggregationService aggregationService)\n        {\n            _aggregationService = aggregationService;\n        }\n\n        [HttpGet(\"{customerId}\")]\n        public async Task<IActionResult> GetAggregatedAccounts(string customerId)\n        {\n            var aggregatedAccount = await _aggregationService.AggregateAccountsAsync(customerId);\n            if (aggregatedAccount == null)\n            {\n                return NotFound();\n            }\n            return Ok(aggregatedAccount);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "e9ffb46b-bfbc-4bef-8708-356638bdce00",
        "Name": "Services",
        "ParentId": "5e6e4dfe-ef87-4387-a0e0-77a7a9b50702",
        "Type": 0,
        "Items": [
          {
            "Id": "55977de3-67b5-4f78-9967-891a72a8020e",
            "Name": "IAggregationService.cs",
            "ParentId": "e9ffb46b-bfbc-4bef-8708-356638bdce00",
            "Type": 1,
            "Text": "using AccountAggregationService.Models;\nusing System.Threading.Tasks;\n\nnamespace AccountAggregationService.Services\n{\n    public interface IAggregationService\n    {\n        Task<AggregatedAccount> AggregateAccountsAsync(string customerId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e261b328-0b7e-489c-b630-ffaf09dd47db",
            "Name": "AggregationService.cs",
            "ParentId": "e9ffb46b-bfbc-4bef-8708-356638bdce00",
            "Type": 1,
            "Text": "using AccountAggregationService.Infrastructure;\nusing AccountAggregationService.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace AccountAggregationService.Services\n{\n    public class AggregationService : IAggregationService\n    {\n        private readonly IAccountIntegrationClient _integrationClient;\n\n        public AggregationService(IAccountIntegrationClient integrationClient)\n        {\n            _integrationClient = integrationClient;\n        }\n\n        public async Task<AggregatedAccount> AggregateAccountsAsync(string customerId)\n        {\n            if (string.IsNullOrWhiteSpace(customerId))\n            {\n                throw new ArgumentException(\"CustomerId cannot be null or empty.\", nameof(customerId));\n            }\n\n            // Retrieve account data from multiple external sources concurrently\n            var source1Task = _integrationClient.GetAccountsAsync(\"Source1\", customerId);\n            var source2Task = _integrationClient.GetAccountsAsync(\"Source2\", customerId);\n\n            await Task.WhenAll(source1Task, source2Task);\n\n            var aggregatedAccounts = new List<Account>();\n            aggregatedAccounts.AddRange(source1Task.Result);\n            aggregatedAccounts.AddRange(source2Task.Result);\n\n            // Additional business logic such as deduplication or enrichment can be performed here\n            return new AggregatedAccount\n            {\n                CustomerId = customerId,\n                Accounts = aggregatedAccounts\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "a2e833b2-f434-40d4-a44a-6ab300187f88",
        "Name": "Infrastructure",
        "ParentId": "5e6e4dfe-ef87-4387-a0e0-77a7a9b50702",
        "Type": 0,
        "Items": [
          {
            "Id": "33f57c1c-a407-4893-ae7c-4e45c40def47",
            "Name": "IAccountIntegrationClient.cs",
            "ParentId": "a2e833b2-f434-40d4-a44a-6ab300187f88",
            "Type": 1,
            "Text": "using AccountAggregationService.Models;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace AccountAggregationService.Infrastructure\n{\n    public interface IAccountIntegrationClient\n    {\n        Task<List<Account>> GetAccountsAsync(string source, string customerId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "767022fa-d9c8-4c21-9cce-14ca03b08102",
            "Name": "AccountIntegrationClient.cs",
            "ParentId": "a2e833b2-f434-40d4-a44a-6ab300187f88",
            "Type": 1,
            "Text": "using AccountAggregationService.Models;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace AccountAggregationService.Infrastructure\n{\n    public class AccountIntegrationClient : IAccountIntegrationClient\n    {\n        private readonly IHttpClientFactory _httpClientFactory;\n        private readonly ILogger<AccountIntegrationClient> _logger;\n\n        public AccountIntegrationClient(IHttpClientFactory httpClientFactory, ILogger<AccountIntegrationClient> logger)\n        {\n            _httpClientFactory = httpClientFactory;\n            _logger = logger;\n        }\n\n        public async Task<List<Account>> GetAccountsAsync(string source, string customerId)\n        {\n            string endpoint = GetEndpoint(source, customerId);\n            var client = _httpClientFactory.CreateClient();\n            try\n            {\n                var response = await client.GetAsync(endpoint);\n                response.EnsureSuccessStatusCode();\n                var content = await response.Content.ReadAsStringAsync();\n                var accounts = JsonSerializer.Deserialize<List<Account>>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n                return accounts ?? new List<Account>();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error retrieving accounts from {Source} for customerId {CustomerId}\", source, customerId);\n                return new List<Account>();\n            }\n        }\n\n        private string GetEndpoint(string source, string customerId)\n        {\n            // Endpoints would typically be read from configuration in a production environment\n            return source switch\n            {\n                \"Source1\" => $\"https://api.bankdatasource1.com/accounts?customerId={customerId}\",\n                \"Source2\" => $\"https://api.bankdatasource2.com/accounts?customerId={customerId}\",\n                _ => throw new ArgumentException(\"Invalid source specified.\", nameof(source))\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "2ffdea38-07f9-417e-9c19-746cb51286e5",
        "Name": "Models",
        "ParentId": "5e6e4dfe-ef87-4387-a0e0-77a7a9b50702",
        "Type": 0,
        "Items": [
          {
            "Id": "94596df9-a7eb-427e-bd6d-6ac4a10b06fa",
            "Name": "Account.cs",
            "ParentId": "2ffdea38-07f9-417e-9c19-746cb51286e5",
            "Type": 1,
            "Text": "namespace AccountAggregationService.Models\n{\n    public class Account\n    {\n        public string AccountNumber { get; set; }\n        public string AccountType { get; set; }\n        public decimal Balance { get; set; }\n        public string Currency { get; set; }\n        public string Source { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "ccb24a71-9d47-4e4a-afbe-00101c8d0a41",
            "Name": "AggregatedAccount.cs",
            "ParentId": "2ffdea38-07f9-417e-9c19-746cb51286e5",
            "Type": 1,
            "Text": "using System.Collections.Generic;\n\nnamespace AccountAggregationService.Models\n{\n    public class AggregatedAccount\n    {\n        public string CustomerId { get; set; }\n        public List<Account> Accounts { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "1c0b8afa-e462-429c-8d1c-ee22ed7a1d45",
    "Name": "TransactionProcessingEngine",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "ae7ae9ad-6e4c-4d86-87bf-7e760357763b",
        "Name": "Program.cs",
        "ParentId": "1c0b8afa-e462-429c-8d1c-ee22ed7a1d45",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace TransactionProcessingEngine\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "177eafe9-406e-4920-a150-a1695e7d8543",
        "Name": "Startup.cs",
        "ParentId": "1c0b8afa-e462-429c-8d1c-ee22ed7a1d45",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing TransactionProcessingEngine.Services;\nusing TransactionProcessingEngine.Data;\nusing TransactionProcessingEngine.Infrastructure;\n\nnamespace TransactionProcessingEngine\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<ITransactionService, TransactionService>();\n            services.AddSingleton<ITransactionRepository, TransactionRepository>();\n            services.AddSingleton<ITransactionLogger, TransactionLogger>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a38ef19a-6129-4e1a-8dcb-c79ac985c1d2",
        "Name": "Controllers",
        "ParentId": "1c0b8afa-e462-429c-8d1c-ee22ed7a1d45",
        "Type": 0,
        "Items": [
          {
            "Id": "7ca8a0e0-aca1-4031-b6f8-6a41d1515db7",
            "Name": "TransactionController.cs",
            "ParentId": "a38ef19a-6129-4e1a-8dcb-c79ac985c1d2",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing TransactionProcessingEngine.Models;\nusing TransactionProcessingEngine.Services;\n\nnamespace TransactionProcessingEngine.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TransactionController : ControllerBase\n    {\n        private readonly ITransactionService _transactionService;\n\n        public TransactionController(ITransactionService transactionService)\n        {\n            _transactionService = transactionService;\n        }\n\n        [HttpPost(\"process\")]\n        public IActionResult ProcessTransaction([FromBody] TransactionRequest request)\n        {\n            try\n            {\n                var transaction = _transactionService.ProcessTransaction(request);\n                return Ok(new TransactionResponse { Transaction = transaction, Success = true });\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { Success = false, Error = ex.Message });\n            }\n        }\n\n        [HttpGet(\"{transactionId}\")]\n        public IActionResult GetTransaction(string transactionId)\n        {\n            var transaction = _transactionService.GetTransaction(transactionId);\n            if (transaction == null)\n            {\n                return NotFound();\n            }\n            return Ok(transaction);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "7c60b35f-cd6c-4cba-b2a6-a5cde55381ea",
        "Name": "Services",
        "ParentId": "1c0b8afa-e462-429c-8d1c-ee22ed7a1d45",
        "Type": 0,
        "Items": [
          {
            "Id": "0eb3fd18-c844-4d42-be3e-bbecb7099d55",
            "Name": "ITransactionService.cs",
            "ParentId": "7c60b35f-cd6c-4cba-b2a6-a5cde55381ea",
            "Type": 1,
            "Text": "using TransactionProcessingEngine.Models;\n\nnamespace TransactionProcessingEngine.Services\n{\n    public interface ITransactionService\n    {\n        Transaction ProcessTransaction(TransactionRequest request);\n        Transaction GetTransaction(string transactionId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "d1d63d58-c729-45d8-9423-1d793460dee8",
            "Name": "TransactionService.cs",
            "ParentId": "7c60b35f-cd6c-4cba-b2a6-a5cde55381ea",
            "Type": 1,
            "Text": "using System;\nusing TransactionProcessingEngine.Models;\nusing TransactionProcessingEngine.Data;\nusing TransactionProcessingEngine.Infrastructure;\n\nnamespace TransactionProcessingEngine.Services\n{\n    public class TransactionService : ITransactionService\n    {\n        private readonly ITransactionRepository _repository;\n        private readonly ITransactionLogger _logger;\n\n        public TransactionService(ITransactionRepository repository, ITransactionLogger logger)\n        {\n            _repository = repository;\n            _logger = logger;\n        }\n\n        public Transaction ProcessTransaction(TransactionRequest request)\n        {\n            if (request == null)\n            {\n                throw new ArgumentNullException(nameof(request));\n            }\n            if (request.Amount <= 0)\n            {\n                throw new ArgumentException(\"Transaction amount must be greater than zero.\");\n            }\n\n            var transaction = new Transaction\n            {\n                TransactionId = Guid.NewGuid().ToString(),\n                AccountId = request.AccountId,\n                Amount = request.Amount,\n                TransactionType = request.TransactionType,\n                Timestamp = DateTime.UtcNow,\n                Status = \"Processed\"\n            };\n\n            _repository.AddTransaction(transaction);\n            _logger.LogInfo($\"Transaction {transaction.TransactionId} processed for account {transaction.AccountId}.\");\n            return transaction;\n        }\n\n        public Transaction GetTransaction(string transactionId)\n        {\n            if (string.IsNullOrWhiteSpace(transactionId))\n            {\n                throw new ArgumentException(\"TransactionId is required.\", nameof(transactionId));\n            }\n            return _repository.GetTransaction(transactionId);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "c818b0b0-ebe3-4751-8799-5bc0e8c3caf2",
        "Name": "Models",
        "ParentId": "1c0b8afa-e462-429c-8d1c-ee22ed7a1d45",
        "Type": 0,
        "Items": [
          {
            "Id": "69340ce0-945d-46e3-a8a8-300b0ba4c43f",
            "Name": "Transaction.cs",
            "ParentId": "c818b0b0-ebe3-4751-8799-5bc0e8c3caf2",
            "Type": 1,
            "Text": "using System;\n\nnamespace TransactionProcessingEngine.Models\n{\n    public class Transaction\n    {\n        public string TransactionId { get; set; }\n        public string AccountId { get; set; }\n        public decimal Amount { get; set; }\n        public string TransactionType { get; set; }\n        public DateTime Timestamp { get; set; }\n        public string Status { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "57a5a1ba-fc68-432d-989a-f29900fc9fa6",
            "Name": "TransactionRequest.cs",
            "ParentId": "c818b0b0-ebe3-4751-8799-5bc0e8c3caf2",
            "Type": 1,
            "Text": "namespace TransactionProcessingEngine.Models\n{\n    public class TransactionRequest\n    {\n        public string AccountId { get; set; }\n        public decimal Amount { get; set; }\n        public string TransactionType { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "9a8cbc02-e396-40d7-97d8-3e746cebeaeb",
            "Name": "TransactionResponse.cs",
            "ParentId": "c818b0b0-ebe3-4751-8799-5bc0e8c3caf2",
            "Type": 1,
            "Text": "namespace TransactionProcessingEngine.Models\n{\n    public class TransactionResponse\n    {\n        public bool Success { get; set; }\n        public Transaction Transaction { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "2a5ae2e3-b53b-4d9f-874d-97708b5ee313",
        "Name": "Data",
        "ParentId": "1c0b8afa-e462-429c-8d1c-ee22ed7a1d45",
        "Type": 0,
        "Items": [
          {
            "Id": "cafddbe8-7b37-4e49-ae38-366149271372",
            "Name": "ITransactionRepository.cs",
            "ParentId": "2a5ae2e3-b53b-4d9f-874d-97708b5ee313",
            "Type": 1,
            "Text": "using TransactionProcessingEngine.Models;\n\nnamespace TransactionProcessingEngine.Data\n{\n    public interface ITransactionRepository\n    {\n        void AddTransaction(Transaction transaction);\n        Transaction GetTransaction(string transactionId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "83d31151-3652-4396-a4b2-62c368de2d51",
            "Name": "TransactionRepository.cs",
            "ParentId": "2a5ae2e3-b53b-4d9f-874d-97708b5ee313",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing TransactionProcessingEngine.Models;\n\nnamespace TransactionProcessingEngine.Data\n{\n    public class TransactionRepository : ITransactionRepository\n    {\n        private readonly ConcurrentDictionary<string, Transaction> _transactionStore = new ConcurrentDictionary<string, Transaction>();\n\n        public void AddTransaction(Transaction transaction)\n        {\n            _transactionStore[transaction.TransactionId] = transaction;\n        }\n\n        public Transaction GetTransaction(string transactionId)\n        {\n            _transactionStore.TryGetValue(transactionId, out Transaction transaction);\n            return transaction;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "483b2605-c945-4a8a-a70c-29a4d803cbec",
        "Name": "Infrastructure",
        "ParentId": "1c0b8afa-e462-429c-8d1c-ee22ed7a1d45",
        "Type": 0,
        "Items": [
          {
            "Id": "927bfa88-0e12-4973-a0ec-cc393283d132",
            "Name": "ITransactionLogger.cs",
            "ParentId": "483b2605-c945-4a8a-a70c-29a4d803cbec",
            "Type": 1,
            "Text": "using System;\n\nnamespace TransactionProcessingEngine.Infrastructure\n{\n    public interface ITransactionLogger\n    {\n        void LogInfo(string message);\n        void LogError(string message, Exception ex);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "82a1120b-9ed5-4af5-a208-17d5ce54a749",
            "Name": "TransactionLogger.cs",
            "ParentId": "483b2605-c945-4a8a-a70c-29a4d803cbec",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace TransactionProcessingEngine.Infrastructure\n{\n    public class TransactionLogger : ITransactionLogger\n    {\n        private readonly ILogger<TransactionLogger> _logger;\n\n        public TransactionLogger(ILogger<TransactionLogger> logger)\n        {\n            _logger = logger;\n        }\n\n        public void LogInfo(string message)\n        {\n            _logger.LogInformation(message);\n        }\n\n        public void LogError(string message, Exception ex)\n        {\n            _logger.LogError(ex, message);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "11ab8b1a-b83f-4f8b-a65b-5663fd9c7d90",
    "Name": "TransactionHistoryViewer",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "0f5210a9-16b5-4ab5-a6a0-7740f2835b92",
        "Name": "Program.cs",
        "ParentId": "11ab8b1a-b83f-4f8b-a65b-5663fd9c7d90",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.EntityFrameworkCore;\nusing TransactionHistoryViewer.Data;\nusing TransactionHistoryViewer.Services;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\n\n// In production, configure the DbContext with a real database provider and connection string\nbuilder.Services.AddDbContext<BankDbContext>(options =>\n    options.UseSqlServer(builder.Configuration.GetConnectionString(\"BankDatabase\")));\n\nbuilder.Services.AddScoped<ITransactionHistoryService, TransactionHistoryService>();\nbuilder.Services.AddScoped<ITransactionRepository, TransactionRepository>();\n\nbuilder.Services.AddLogging();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseAuthorization();\napp.MapControllers();\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "6d5f2318-ceba-4ec1-97ff-abb36c913572",
        "Name": "Controllers",
        "ParentId": "11ab8b1a-b83f-4f8b-a65b-5663fd9c7d90",
        "Type": 0,
        "Items": [
          {
            "Id": "ea90cea7-5bff-45e0-a2b0-cf710fcd4d19",
            "Name": "TransactionHistoryController.cs",
            "ParentId": "6d5f2318-ceba-4ec1-97ff-abb36c913572",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing TransactionHistoryViewer.Services;\n\nnamespace TransactionHistoryViewer.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TransactionHistoryController : ControllerBase\n    {\n        private readonly ITransactionHistoryService _transactionHistoryService;\n\n        public TransactionHistoryController(ITransactionHistoryService transactionHistoryService)\n        {\n            _transactionHistoryService = transactionHistoryService;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetTransactions(\n            [FromQuery] string userId,\n            [FromQuery] DateTime? startDate,\n            [FromQuery] DateTime? endDate,\n            [FromQuery] int pageNumber = 1,\n            [FromQuery] int pageSize = 20)\n        {\n            if (string.IsNullOrWhiteSpace(userId))\n                return BadRequest(\"UserId is required.\");\n\n            var transactions = await _transactionHistoryService.GetTransactionsAsync(userId, startDate, endDate, pageNumber, pageSize);\n            return Ok(transactions);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "36f47263-542e-4989-8144-c7c6167f8bc0",
        "Name": "Services",
        "ParentId": "11ab8b1a-b83f-4f8b-a65b-5663fd9c7d90",
        "Type": 0,
        "Items": [
          {
            "Id": "c6dfc42a-0592-48d5-80ec-b39eb8094dc8",
            "Name": "ITransactionHistoryService.cs",
            "ParentId": "36f47263-542e-4989-8144-c7c6167f8bc0",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing TransactionHistoryViewer.Models;\n\nnamespace TransactionHistoryViewer.Services\n{\n    public interface ITransactionHistoryService\n    {\n        Task<PaginatedList<Transaction>> GetTransactionsAsync(string userId, DateTime? startDate, DateTime? endDate, int pageNumber, int pageSize);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "20258ae5-6064-43ed-9873-f562d2c5ae01",
            "Name": "TransactionHistoryService.cs",
            "ParentId": "36f47263-542e-4989-8144-c7c6167f8bc0",
            "Type": 1,
            "Text": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing TransactionHistoryViewer.Models;\nusing TransactionHistoryViewer.Data;\n\nnamespace TransactionHistoryViewer.Services\n{\n    public class TransactionHistoryService : ITransactionHistoryService\n    {\n        private readonly ITransactionRepository _transactionRepository;\n\n        public TransactionHistoryService(ITransactionRepository transactionRepository)\n        {\n            _transactionRepository = transactionRepository;\n        }\n\n        public async Task<PaginatedList<Transaction>> GetTransactionsAsync(string userId, DateTime? startDate, DateTime? endDate, int pageNumber, int pageSize)\n        {\n            var query = _transactionRepository.QueryTransactions().Where(t => t.UserId == userId);\n\n            if (startDate.HasValue)\n                query = query.Where(t => t.TransactionDate >= startDate.Value);\n\n            if (endDate.HasValue)\n                query = query.Where(t => t.TransactionDate <= endDate.Value);\n\n            query = query.OrderByDescending(t => t.TransactionDate);\n\n            var totalCount = await query.CountAsync();\n            var items = await query.Skip((pageNumber - 1) * pageSize)\n                                    .Take(pageSize)\n                                    .ToListAsync();\n\n            return new PaginatedList<Transaction>(items, totalCount, pageNumber, pageSize);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "8d181b73-3179-4fd3-abcf-ac530f8781f1",
        "Name": "Models",
        "ParentId": "11ab8b1a-b83f-4f8b-a65b-5663fd9c7d90",
        "Type": 0,
        "Items": [
          {
            "Id": "1e64454e-af25-464e-8da9-dd6838653614",
            "Name": "Transaction.cs",
            "ParentId": "8d181b73-3179-4fd3-abcf-ac530f8781f1",
            "Type": 1,
            "Text": "using System;\n\nnamespace TransactionHistoryViewer.Models\n{\n    public class Transaction\n    {\n        public int Id { get; set; }\n        public string UserId { get; set; }\n        public decimal Amount { get; set; }\n        public DateTime TransactionDate { get; set; }\n        public string Description { get; set; }\n        public string Status { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e920a328-d7de-48a7-bd36-943929d2cad3",
            "Name": "PaginatedList.cs",
            "ParentId": "8d181b73-3179-4fd3-abcf-ac530f8781f1",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\n\nnamespace TransactionHistoryViewer.Models\n{\n    public class PaginatedList<T>\n    {\n        public int PageIndex { get; }\n        public int TotalPages { get; }\n        public int TotalCount { get; }\n        public List<T> Items { get; }\n\n        public PaginatedList(List<T> items, int count, int pageIndex, int pageSize)\n        {\n            Items = items;\n            TotalCount = count;\n            PageIndex = pageIndex;\n            TotalPages = (int)Math.Ceiling(count / (double)pageSize);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "c58f37d0-425a-47c3-94a8-64214a7edb34",
        "Name": "Data",
        "ParentId": "11ab8b1a-b83f-4f8b-a65b-5663fd9c7d90",
        "Type": 0,
        "Items": [
          {
            "Id": "398649f6-05e0-402e-9a8f-3191c684c57c",
            "Name": "BankDbContext.cs",
            "ParentId": "c58f37d0-425a-47c3-94a8-64214a7edb34",
            "Type": 1,
            "Text": "using Microsoft.EntityFrameworkCore;\nusing TransactionHistoryViewer.Models;\n\nnamespace TransactionHistoryViewer.Data\n{\n    public class BankDbContext : DbContext\n    {\n        public BankDbContext(DbContextOptions<BankDbContext> options) : base(options)\n        {\n        }\n\n        public DbSet<Transaction> Transactions { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e96a850c-1581-47f2-bb4b-ce18a91a8d3b",
            "Name": "ITransactionRepository.cs",
            "ParentId": "c58f37d0-425a-47c3-94a8-64214a7edb34",
            "Type": 1,
            "Text": "using System.Linq;\nusing TransactionHistoryViewer.Models;\n\nnamespace TransactionHistoryViewer.Data\n{\n    public interface ITransactionRepository\n    {\n        IQueryable<Transaction> QueryTransactions();\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "4093ef29-0605-46aa-a7a4-2e83597d9a03",
            "Name": "TransactionRepository.cs",
            "ParentId": "c58f37d0-425a-47c3-94a8-64214a7edb34",
            "Type": 1,
            "Text": "using System.Linq;\nusing Microsoft.EntityFrameworkCore;\nusing TransactionHistoryViewer.Models;\n\nnamespace TransactionHistoryViewer.Data\n{\n    public class TransactionRepository : ITransactionRepository\n    {\n        private readonly BankDbContext _context;\n\n        public TransactionRepository(BankDbContext context)\n        {\n            _context = context;\n        }\n\n        public IQueryable<Transaction> QueryTransactions()\n        {\n            return _context.Transactions.AsNoTracking();\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "eef2ceef-4e71-47b5-9d8f-b2fe80357b0b",
    "Name": "PaymentGatewayConnector",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "17fdbddc-8850-4505-9a9c-81c2d7103511",
        "Name": "Program.cs",
        "ParentId": "eef2ceef-4e71-47b5-9d8f-b2fe80357b0b",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing PaymentGatewayConnector.Services;\nusing PaymentGatewayConnector.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddHttpClient();\nbuilder.Services.AddScoped<IPaymentProviderAdapter, PaymentProviderAdapter>();\nbuilder.Services.AddScoped<IGatewayConnectorService, GatewayConnectorService>();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\n\napp.UseRouting();\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "5c862bf3-4e90-40cf-8820-b4cf69ad6601",
        "Name": "Controllers",
        "ParentId": "eef2ceef-4e71-47b5-9d8f-b2fe80357b0b",
        "Type": 0,
        "Items": [
          {
            "Id": "9df26558-6f11-4ecc-9ed9-8b3095f329d1",
            "Name": "PaymentGatewayController.cs",
            "ParentId": "5c862bf3-4e90-40cf-8820-b4cf69ad6601",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing PaymentGatewayConnector.Models;\nusing PaymentGatewayConnector.Services;\n\nnamespace PaymentGatewayConnector.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class PaymentGatewayController : ControllerBase\n    {\n        private readonly IGatewayConnectorService _gatewayService;\n\n        public PaymentGatewayController(IGatewayConnectorService gatewayService)\n        {\n            _gatewayService = gatewayService;\n        }\n\n        [HttpPost(\"process\")]\n        public async Task<IActionResult> ProcessPayment([FromBody] PaymentRequest request)\n        {\n            PaymentResponse response = await _gatewayService.ProcessPaymentAsync(request);\n            if (response.Success)\n            {\n                return Ok(response);\n            }\n            return BadRequest(response);\n        }\n\n        [HttpPost(\"refund\")]\n        public async Task<IActionResult> RefundPayment([FromBody] PaymentRequest request)\n        {\n            PaymentResponse response = await _gatewayService.RefundPaymentAsync(request);\n            if (response.Success)\n            {\n                return Ok(response);\n            }\n            return BadRequest(response);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "73aa3534-6a4d-4a30-96dc-c2ff651718a2",
        "Name": "Services",
        "ParentId": "eef2ceef-4e71-47b5-9d8f-b2fe80357b0b",
        "Type": 0,
        "Items": [
          {
            "Id": "18f9e009-a448-42c3-9ee6-160f909cffdd",
            "Name": "IGatewayConnectorService.cs",
            "ParentId": "73aa3534-6a4d-4a30-96dc-c2ff651718a2",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing PaymentGatewayConnector.Models;\n\nnamespace PaymentGatewayConnector.Services\n{\n    public interface IGatewayConnectorService\n    {\n        Task<PaymentResponse> ProcessPaymentAsync(PaymentRequest request);\n        Task<PaymentResponse> RefundPaymentAsync(PaymentRequest request);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "48a66363-f7dc-4bb4-9260-578ae1d7f4ad",
            "Name": "GatewayConnectorService.cs",
            "ParentId": "73aa3534-6a4d-4a30-96dc-c2ff651718a2",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing PaymentGatewayConnector.Models;\nusing PaymentGatewayConnector.Infrastructure;\n\nnamespace PaymentGatewayConnector.Services\n{\n    public class GatewayConnectorService : IGatewayConnectorService\n    {\n        private readonly IPaymentProviderAdapter _providerAdapter;\n\n        public GatewayConnectorService(IPaymentProviderAdapter providerAdapter)\n        {\n            _providerAdapter = providerAdapter;\n        }\n\n        public async Task<PaymentResponse> ProcessPaymentAsync(PaymentRequest request)\n        {\n            return await _providerAdapter.SendPaymentRequestAsync(request);\n        }\n\n        public async Task<PaymentResponse> RefundPaymentAsync(PaymentRequest request)\n        {\n            return await _providerAdapter.SendRefundRequestAsync(request);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "7b81c139-7e99-4ea4-8f2d-716f24cdf4ed",
        "Name": "Infrastructure",
        "ParentId": "eef2ceef-4e71-47b5-9d8f-b2fe80357b0b",
        "Type": 0,
        "Items": [
          {
            "Id": "ec5712a4-b387-48a2-9362-91b2481c6442",
            "Name": "IPaymentProviderAdapter.cs",
            "ParentId": "7b81c139-7e99-4ea4-8f2d-716f24cdf4ed",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing PaymentGatewayConnector.Models;\n\nnamespace PaymentGatewayConnector.Infrastructure\n{\n    public interface IPaymentProviderAdapter\n    {\n        Task<PaymentResponse> SendPaymentRequestAsync(PaymentRequest request);\n        Task<PaymentResponse> SendRefundRequestAsync(PaymentRequest request);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "f2ace655-2730-4a6d-a0b8-356cf2808af5",
            "Name": "PaymentProviderAdapter.cs",
            "ParentId": "7b81c139-7e99-4ea4-8f2d-716f24cdf4ed",
            "Type": 1,
            "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing PaymentGatewayConnector.Models;\n\nnamespace PaymentGatewayConnector.Infrastructure\n{\n    public class PaymentProviderAdapter : IPaymentProviderAdapter\n    {\n        private readonly HttpClient _httpClient;\n\n        public PaymentProviderAdapter(IHttpClientFactory httpClientFactory)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n        }\n\n        public async Task<PaymentResponse> SendPaymentRequestAsync(PaymentRequest request)\n        {\n            string endpoint = \"https://api.externalpaymentgateway.com/process\";\n            string jsonContent = JsonSerializer.Serialize(request);\n            using var content = new StringContent(jsonContent, Encoding.UTF8, \"application/json\");\n            using var httpResponse = await _httpClient.PostAsync(endpoint, content);\n            httpResponse.EnsureSuccessStatusCode();\n            string responseContent = await httpResponse.Content.ReadAsStringAsync();\n            PaymentResponse paymentResponse = JsonSerializer.Deserialize<PaymentResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n            if (paymentResponse == null)\n            {\n                throw new Exception(\"Invalid response from payment gateway.\");\n            }\n            return paymentResponse;\n        }\n\n        public async Task<PaymentResponse> SendRefundRequestAsync(PaymentRequest request)\n        {\n            string endpoint = \"https://api.externalpaymentgateway.com/refund\";\n            string jsonContent = JsonSerializer.Serialize(request);\n            using var content = new StringContent(jsonContent, Encoding.UTF8, \"application/json\");\n            using var httpResponse = await _httpClient.PostAsync(endpoint, content);\n            httpResponse.EnsureSuccessStatusCode();\n            string responseContent = await httpResponse.Content.ReadAsStringAsync();\n            PaymentResponse refundResponse = JsonSerializer.Deserialize<PaymentResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n            if (refundResponse == null)\n            {\n                throw new Exception(\"Invalid response from refund endpoint.\");\n            }\n            return refundResponse;\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "f9f3e9f0-9f39-42a4-b133-b7c604dd3c95",
        "Name": "Models",
        "ParentId": "eef2ceef-4e71-47b5-9d8f-b2fe80357b0b",
        "Type": 0,
        "Items": [
          {
            "Id": "afe6e18a-2066-418e-b78f-7d78e6e5e26f",
            "Name": "PaymentRequest.cs",
            "ParentId": "f9f3e9f0-9f39-42a4-b133-b7c604dd3c95",
            "Type": 1,
            "Text": "namespace PaymentGatewayConnector.Models\n{\n    public class PaymentRequest\n    {\n        public string PaymentId { get; set; }\n        public string OrderId { get; set; }\n        public string CardNumber { get; set; }\n        public string CardHolderName { get; set; }\n        public string ExpirationDate { get; set; }\n        public string CVV { get; set; }\n        public decimal Amount { get; set; }\n        public string Currency { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "3931845a-f59f-47f2-b0a9-bd3514defa64",
            "Name": "PaymentResponse.cs",
            "ParentId": "f9f3e9f0-9f39-42a4-b133-b7c604dd3c95",
            "Type": 1,
            "Text": "namespace PaymentGatewayConnector.Models\n{\n    public class PaymentResponse\n    {\n        public bool Success { get; set; }\n        public string TransactionId { get; set; }\n        public string Message { get; set; }\n    }\n}",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "77826000-f665-4ac5-af84-b55b8eece5fc",
    "Name": "RefundProcessingService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "694ef484-efdf-4d80-a456-b4bf7bfd9104",
        "Name": "Program.cs",
        "ParentId": "77826000-f665-4ac5-af84-b55b8eece5fc",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace RefundProcessingService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "c123b8bb-86ce-415f-a443-7f72ac3d9081",
        "Name": "Startup.cs",
        "ParentId": "77826000-f665-4ac5-af84-b55b8eece5fc",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing RefundProcessingService.Services;\nusing RefundProcessingService.Infrastructure;\nusing RefundProcessingService.Data;\n\nnamespace RefundProcessingService\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient();\n            services.AddSingleton<IRefundService, RefundService>();\n            services.AddSingleton<IRefundRepository, RefundRepository>();\n            services.AddSingleton<IRefundAdapter, RefundAdapter>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "288be715-9709-4ebd-b80d-9e3d18e17ae5",
        "Name": "Controllers",
        "ParentId": "77826000-f665-4ac5-af84-b55b8eece5fc",
        "Type": 0,
        "Items": [
          {
            "Id": "4d8e42d1-fecf-4b39-b48b-455d3fc5562c",
            "Name": "RefundController.cs",
            "ParentId": "288be715-9709-4ebd-b80d-9e3d18e17ae5",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing RefundProcessingService.Models;\nusing RefundProcessingService.Services;\n\nnamespace RefundProcessingService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class RefundController : ControllerBase\n    {\n        private readonly IRefundService _refundService;\n\n        public RefundController(IRefundService refundService)\n        {\n            _refundService = refundService;\n        }\n\n        [HttpPost(\"initiate\")]\n        public async Task<IActionResult> InitiateRefund([FromBody] RefundRequest request)\n        {\n            try\n            {\n                RefundResponse response = await _refundService.ProcessRefundAsync(request);\n                return Ok(response);\n            }\n            catch (System.Exception ex)\n            {\n                return BadRequest(new RefundResponse { Success = false, Message = ex.Message });\n            }\n        }\n\n        [HttpGet(\"{refundId}\")]\n        public async Task<IActionResult> GetRefundStatus(string refundId)\n        {\n            RefundRecord record = await _refundService.GetRefundStatusAsync(refundId);\n            if (record == null)\n            {\n                return NotFound();\n            }\n            return Ok(record);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "739add96-15f1-495a-a8a3-0b7f32e481ac",
        "Name": "Services",
        "ParentId": "77826000-f665-4ac5-af84-b55b8eece5fc",
        "Type": 0,
        "Items": [
          {
            "Id": "5b1be300-4cc3-44fe-8d91-2df54d25d85c",
            "Name": "IRefundService.cs",
            "ParentId": "739add96-15f1-495a-a8a3-0b7f32e481ac",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing RefundProcessingService.Models;\n\nnamespace RefundProcessingService.Services\n{\n    public interface IRefundService\n    {\n        Task<RefundResponse> ProcessRefundAsync(RefundRequest request);\n        Task<RefundRecord> GetRefundStatusAsync(string refundId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "4469cdd0-3e6d-4037-96de-a7055521df34",
            "Name": "RefundService.cs",
            "ParentId": "739add96-15f1-495a-a8a3-0b7f32e481ac",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing RefundProcessingService.Models;\nusing RefundProcessingService.Infrastructure;\nusing RefundProcessingService.Data;\nusing RefundProcessingService.Utils;\n\nnamespace RefundProcessingService.Services\n{\n    public class RefundService : IRefundService\n    {\n        private readonly IRefundRepository _repository;\n        private readonly IRefundAdapter _adapter;\n\n        public RefundService(IRefundRepository repository, IRefundAdapter adapter)\n        {\n            _repository = repository;\n            _adapter = adapter;\n        }\n\n        public async Task<RefundResponse> ProcessRefundAsync(RefundRequest request)\n        {\n            if (request == null)\n                throw new ArgumentNullException(nameof(request));\n            if (request.RefundAmount <= 0)\n                throw new ArgumentException(\"Refund amount must be greater than zero.\");\n            if (string.IsNullOrEmpty(request.TransactionId))\n                throw new ArgumentException(\"TransactionId is required.\");\n\n            // Generate a unique refund identifier\n            string refundId = RefundHelper.GenerateRefundId();\n\n            // Process refund through external payment gateway\n            bool adapterResult = await _adapter.ProcessRefundAsync(request);\n\n            // Create refund record based on the adapter result\n            RefundRecord record = new RefundRecord\n            {\n                RefundId = refundId,\n                TransactionId = request.TransactionId,\n                RefundAmount = request.RefundAmount,\n                Reason = request.Reason,\n                CustomerId = request.CustomerId,\n                Status = adapterResult ? \"Processed\" : \"Failed\",\n                ProcessedAt = DateTime.UtcNow\n            };\n\n            await _repository.AddRefundRecordAsync(record);\n\n            return new RefundResponse\n            {\n                RefundId = refundId,\n                Success = adapterResult,\n                Message = adapterResult ? \"Refund processed successfully.\" : \"Refund processing failed.\"\n            };\n        }\n\n        public async Task<RefundRecord> GetRefundStatusAsync(string refundId)\n        {\n            return await _repository.GetRefundRecordAsync(refundId);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "39dafa59-8719-4fe8-85ea-b66d3a03806f",
        "Name": "Models",
        "ParentId": "77826000-f665-4ac5-af84-b55b8eece5fc",
        "Type": 0,
        "Items": [
          {
            "Id": "1af445c2-9926-4ebd-b7c4-9dedd128e36a",
            "Name": "RefundRequest.cs",
            "ParentId": "39dafa59-8719-4fe8-85ea-b66d3a03806f",
            "Type": 1,
            "Text": "namespace RefundProcessingService.Models\n{\n    public class RefundRequest\n    {\n        public string TransactionId { get; set; }\n        public decimal RefundAmount { get; set; }\n        public string Reason { get; set; }\n        public string CustomerId { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "a1f2d295-b999-4eb8-a505-e0c34451b99b",
            "Name": "RefundResponse.cs",
            "ParentId": "39dafa59-8719-4fe8-85ea-b66d3a03806f",
            "Type": 1,
            "Text": "namespace RefundProcessingService.Models\n{\n    public class RefundResponse\n    {\n        public string RefundId { get; set; }\n        public bool Success { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "45dd21fa-d068-4ba6-9ec6-add729c091a7",
            "Name": "RefundRecord.cs",
            "ParentId": "39dafa59-8719-4fe8-85ea-b66d3a03806f",
            "Type": 1,
            "Text": "using System;\n\nnamespace RefundProcessingService.Models\n{\n    public class RefundRecord\n    {\n        public string RefundId { get; set; }\n        public string TransactionId { get; set; }\n        public decimal RefundAmount { get; set; }\n        public string Reason { get; set; }\n        public string CustomerId { get; set; }\n        public string Status { get; set; }\n        public DateTime ProcessedAt { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "bf4a3d25-a3ac-4514-9d03-a13c7f682929",
        "Name": "Infrastructure",
        "ParentId": "77826000-f665-4ac5-af84-b55b8eece5fc",
        "Type": 0,
        "Items": [
          {
            "Id": "92e1d2fc-d681-46d8-8be6-036a060c2349",
            "Name": "IRefundAdapter.cs",
            "ParentId": "bf4a3d25-a3ac-4514-9d03-a13c7f682929",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing RefundProcessingService.Models;\n\nnamespace RefundProcessingService.Infrastructure\n{\n    public interface IRefundAdapter\n    {\n        Task<bool> ProcessRefundAsync(RefundRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "15e25d8b-31f2-45e6-a59c-9d6db2695839",
            "Name": "RefundAdapter.cs",
            "ParentId": "bf4a3d25-a3ac-4514-9d03-a13c7f682929",
            "Type": 1,
            "Text": "using System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\nusing RefundProcessingService.Models;\n\nnamespace RefundProcessingService.Infrastructure\n{\n    public class RefundAdapter : IRefundAdapter\n    {\n        private readonly HttpClient _httpClient;\n\n        public RefundAdapter(IHttpClientFactory httpClientFactory)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n        }\n\n        public async Task<bool> ProcessRefundAsync(RefundRequest request)\n        {\n            // Communicate with the external payment gateway API for refund processing\n            string apiUrl = \"https://api.paymentgateway.com/refunds\";\n            HttpResponseMessage response = await _httpClient.PostAsJsonAsync(apiUrl, request);\n            return response.IsSuccessStatusCode;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "b2506eca-a42e-4088-bc0c-ab6115bef4f8",
        "Name": "Data",
        "ParentId": "77826000-f665-4ac5-af84-b55b8eece5fc",
        "Type": 0,
        "Items": [
          {
            "Id": "62aaddfb-5cd3-4b73-a35c-ff8ef1638925",
            "Name": "IRefundRepository.cs",
            "ParentId": "b2506eca-a42e-4088-bc0c-ab6115bef4f8",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing RefundProcessingService.Models;\n\nnamespace RefundProcessingService.Data\n{\n    public interface IRefundRepository\n    {\n        Task AddRefundRecordAsync(RefundRecord record);\n        Task<RefundRecord> GetRefundRecordAsync(string refundId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "761ee34b-8c4c-49ce-8c67-f114980d29b2",
            "Name": "RefundRepository.cs",
            "ParentId": "b2506eca-a42e-4088-bc0c-ab6115bef4f8",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing System.Threading.Tasks;\nusing RefundProcessingService.Models;\n\nnamespace RefundProcessingService.Data\n{\n    public class RefundRepository : IRefundRepository\n    {\n        private readonly ConcurrentDictionary<string, RefundRecord> _records = new ConcurrentDictionary<string, RefundRecord>();\n\n        public Task AddRefundRecordAsync(RefundRecord record)\n        {\n            _records[record.RefundId] = record;\n            return Task.CompletedTask;\n        }\n\n        public Task<RefundRecord> GetRefundRecordAsync(string refundId)\n        {\n            _records.TryGetValue(refundId, out RefundRecord record);\n            return Task.FromResult(record);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "432a22e4-61c2-4b2b-8aa1-b23858b1ced3",
        "Name": "Utils",
        "ParentId": "77826000-f665-4ac5-af84-b55b8eece5fc",
        "Type": 0,
        "Items": [
          {
            "Id": "eb77ec15-46c7-4892-b8a6-c1ecb1ba87d7",
            "Name": "RefundHelper.cs",
            "ParentId": "432a22e4-61c2-4b2b-8aa1-b23858b1ced3",
            "Type": 1,
            "Text": "using System;\n\nnamespace RefundProcessingService.Utils\n{\n    public static class RefundHelper\n    {\n        public static string GenerateRefundId()\n        {\n            return Guid.NewGuid().ToString(\"N\").ToUpper();\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "5edd1557-d19c-405a-b6e1-c8d924867601",
    "Name": "SettlementEngine",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "4c9dffae-0738-4ebe-9c70-d374f1e12b2a",
        "Name": "Program.cs",
        "ParentId": "5edd1557-d19c-405a-b6e1-c8d924867601",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore;\nusing Microsoft.AspNetCore.Hosting;\n\nnamespace SettlementEngine\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateWebHostBuilder(args).Build().Run();\n        }\n\n        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\n            WebHost.CreateDefaultBuilder(args)\n                .UseStartup<Startup>();\n    }\n}",
        "Language": 0
      },
      {
        "Id": "916a143a-bb9a-4901-aba1-a4a4f1474831",
        "Name": "Startup.cs",
        "ParentId": "5edd1557-d19c-405a-b6e1-c8d924867601",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing SettlementEngine.Services;\nusing SettlementEngine.Data;\n\nnamespace SettlementEngine\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<ISettlementService, SettlementService>();\n            services.AddSingleton<ISettlementRepository, SettlementRepository>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            \n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "3a0430c1-f1ed-49f2-8d28-055b47e7ff39",
        "Name": "Controllers",
        "ParentId": "5edd1557-d19c-405a-b6e1-c8d924867601",
        "Type": 0,
        "Items": [
          {
            "Id": "6f699b5b-1249-4e64-826b-6581a99f0834",
            "Name": "SettlementController.cs",
            "ParentId": "3a0430c1-f1ed-49f2-8d28-055b47e7ff39",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing SettlementEngine.Models;\nusing SettlementEngine.Services;\n\nnamespace SettlementEngine.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class SettlementController : ControllerBase\n    {\n        private readonly ISettlementService _settlementService;\n        private readonly ILogger<SettlementController> _logger;\n\n        public SettlementController(ISettlementService settlementService, ILogger<SettlementController> logger)\n        {\n            _settlementService = settlementService;\n            _logger = logger;\n        }\n\n        [HttpPost(\"run\")]\n        public ActionResult<SettlementResult> RunSettlement([FromBody] SettlementRequest request)\n        {\n            if (request == null)\n            {\n                return BadRequest(\"Invalid settlement request.\");\n            }\n\n            try\n            {\n                var result = _settlementService.ProcessSettlement(request);\n                return Ok(result);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error processing settlement.\");\n                return StatusCode(500, \"An error occurred while processing settlement.\");\n            }\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "b1551eec-7d3e-4fd3-8caa-0c4166a8e3fa",
        "Name": "Services",
        "ParentId": "5edd1557-d19c-405a-b6e1-c8d924867601",
        "Type": 0,
        "Items": [
          {
            "Id": "ea99b36c-6bb7-4538-a671-f939f064d85b",
            "Name": "ISettlementService.cs",
            "ParentId": "b1551eec-7d3e-4fd3-8caa-0c4166a8e3fa",
            "Type": 1,
            "Text": "using SettlementEngine.Models;\n\nnamespace SettlementEngine.Services\n{\n    public interface ISettlementService\n    {\n        SettlementResult ProcessSettlement(SettlementRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "1194c300-2735-48a8-9ac9-1214ae9d3dd1",
            "Name": "SettlementService.cs",
            "ParentId": "b1551eec-7d3e-4fd3-8caa-0c4166a8e3fa",
            "Type": 1,
            "Text": "using System;\nusing System.Linq;\nusing Microsoft.Extensions.Logging;\nusing SettlementEngine.Data;\nusing SettlementEngine.Infrastructure;\nusing SettlementEngine.Models;\n\nnamespace SettlementEngine.Services\n{\n    public class SettlementService : ISettlementService\n    {\n        private readonly ISettlementRepository _repository;\n        private readonly ILogger<SettlementService> _logger;\n\n        public SettlementService(ISettlementRepository repository, ILogger<SettlementService> logger)\n        {\n            _repository = repository;\n            _logger = logger;\n        }\n\n        public SettlementResult ProcessSettlement(SettlementRequest request)\n        {\n            var transactions = _repository.GetPendingTransactions(request.SettlementDate);\n            if (transactions == null || !transactions.Any())\n            {\n                return new SettlementResult\n                {\n                    SettlementId = Guid.NewGuid().ToString(),\n                    SettledDate = request.SettlementDate,\n                    TotalAmount = 0,\n                    Status = \"No Transactions\"\n                };\n            }\n\n            // Process settlement using business logic encapsulated in the SettlementProcessor\n            var result = SettlementProcessor.Process(transactions, request.SettlementDate);\n            _repository.SaveSettlementResult(result);\n            _repository.MarkTransactionsAsSettled(transactions);\n            return result;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "c39bd8c8-cabe-41e0-9162-62b7a024b2b4",
        "Name": "Models",
        "ParentId": "5edd1557-d19c-405a-b6e1-c8d924867601",
        "Type": 0,
        "Items": [
          {
            "Id": "fd9dcba5-e8d3-4973-8e9b-10e30918520c",
            "Name": "SettlementRequest.cs",
            "ParentId": "c39bd8c8-cabe-41e0-9162-62b7a024b2b4",
            "Type": 1,
            "Text": "using System;\n\nnamespace SettlementEngine.Models\n{\n    public class SettlementRequest\n    {\n        public DateTime SettlementDate { get; set; }\n        public string InitiatedBy { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "5de35283-a831-4c33-8881-952d8a31a0c5",
            "Name": "SettlementResult.cs",
            "ParentId": "c39bd8c8-cabe-41e0-9162-62b7a024b2b4",
            "Type": 1,
            "Text": "using System;\n\nnamespace SettlementEngine.Models\n{\n    public class SettlementResult\n    {\n        public string SettlementId { get; set; }\n        public DateTime SettledDate { get; set; }\n        public decimal TotalAmount { get; set; }\n        public string Status { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "ef3dd2e2-82ab-4bd8-a412-031377f34d73",
            "Name": "Transaction.cs",
            "ParentId": "c39bd8c8-cabe-41e0-9162-62b7a024b2b4",
            "Type": 1,
            "Text": "using System;\n\nnamespace SettlementEngine.Models\n{\n    public class Transaction\n    {\n        public string TransactionId { get; set; }\n        public string FromAccount { get; set; }\n        public string ToAccount { get; set; }\n        public decimal Amount { get; set; }\n        public DateTime TransactionDate { get; set; }\n        public bool IsSettled { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "93f577d5-d027-4ec3-b1b3-e9406ee3b597",
        "Name": "Data",
        "ParentId": "5edd1557-d19c-405a-b6e1-c8d924867601",
        "Type": 0,
        "Items": [
          {
            "Id": "ece0532c-998d-4a80-a049-f269a5affbd0",
            "Name": "ISettlementRepository.cs",
            "ParentId": "93f577d5-d027-4ec3-b1b3-e9406ee3b597",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing SettlementEngine.Models;\n\nnamespace SettlementEngine.Data\n{\n    public interface ISettlementRepository\n    {\n        System.Collections.Generic.List<Transaction> GetPendingTransactions(DateTime settlementDate);\n        void SaveSettlementResult(SettlementResult result);\n        void MarkTransactionsAsSettled(System.Collections.Generic.List<Transaction> transactions);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "c729e713-ca57-4f12-a3f0-6a89f646bd0d",
            "Name": "SettlementRepository.cs",
            "ParentId": "93f577d5-d027-4ec3-b1b3-e9406ee3b597",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing SettlementEngine.Models;\n\nnamespace SettlementEngine.Data\n{\n    public class SettlementRepository : ISettlementRepository\n    {\n        private readonly List<Transaction> _pendingTransactions = new List<Transaction>();\n        private readonly List<SettlementResult> _settlementResults = new List<SettlementResult>();\n\n        public List<Transaction> GetPendingTransactions(DateTime settlementDate)\n        {\n            // Filter transactions by settlement date and not settled\n            return _pendingTransactions.Where(t => t.TransactionDate.Date == settlementDate.Date && !t.IsSettled).ToList();\n        }\n\n        public void SaveSettlementResult(SettlementResult result)\n        {\n            _settlementResults.Add(result);\n        }\n\n        public void MarkTransactionsAsSettled(List<Transaction> transactions)\n        {\n            foreach (var transaction in transactions)\n            {\n                transaction.IsSettled = true;\n            }\n        }\n\n        // Additional method to add transactions, simulating persistent storage\n        public void AddTransaction(Transaction transaction)\n        {\n            _pendingTransactions.Add(transaction);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "7f644555-f74e-473b-8569-aeeada5c9c05",
        "Name": "Infrastructure",
        "ParentId": "5edd1557-d19c-405a-b6e1-c8d924867601",
        "Type": 0,
        "Items": [
          {
            "Id": "b69daffb-b4ab-48b8-9e1c-2ade78dc906b",
            "Name": "SettlementProcessor.cs",
            "ParentId": "7f644555-f74e-473b-8569-aeeada5c9c05",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing SettlementEngine.Models;\n\nnamespace SettlementEngine.Infrastructure\n{\n    public static class SettlementProcessor\n    {\n        public static SettlementResult Process(IEnumerable<Transaction> transactions, DateTime settlementDate)\n        {\n            if (transactions == null || !transactions.Any())\n            {\n                throw new ArgumentException(\"No transactions provided for settlement.\");\n            }\n\n            decimal totalAmount = transactions.Sum(t => t.Amount);\n\n            return new SettlementResult\n            {\n                SettlementId = Guid.NewGuid().ToString(),\n                SettledDate = settlementDate,\n                TotalAmount = totalAmount,\n                Status = \"Completed\"\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "e7242e38-062d-4a0f-8344-4a481d6c4a4f",
    "Name": "FraudDetectionSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "31d404fa-b865-4553-998a-406ace4777c3",
        "Name": "Program.cs",
        "ParentId": "e7242e38-062d-4a0f-8344-4a481d6c4a4f",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace FraudDetectionSystem\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "71c94c46-fba0-4584-849e-90f76375ea95",
        "Name": "Startup.cs",
        "ParentId": "e7242e38-062d-4a0f-8344-4a481d6c4a4f",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing FraudDetectionSystem.Services;\nusing FraudDetectionSystem.Infrastructure;\n\nnamespace FraudDetectionSystem\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IFraudDetectionService, FraudDetectionService>();\n            services.AddSingleton<IFraudRepository, FraudRepository>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "942e8ce2-ef31-4229-ae57-bcfa3088588c",
        "Name": "Controllers",
        "ParentId": "e7242e38-062d-4a0f-8344-4a481d6c4a4f",
        "Type": 0,
        "Items": [
          {
            "Id": "0a14fb12-cbb2-46ef-a209-2d865d6c185a",
            "Name": "FraudDetectionController.cs",
            "ParentId": "942e8ce2-ef31-4229-ae57-bcfa3088588c",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing FraudDetectionSystem.Models;\nusing FraudDetectionSystem.Services;\n\nnamespace FraudDetectionSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class FraudDetectionController : ControllerBase\n    {\n        private readonly IFraudDetectionService _fraudDetectionService;\n\n        public FraudDetectionController(IFraudDetectionService fraudDetectionService)\n        {\n            _fraudDetectionService = fraudDetectionService;\n        }\n\n        [HttpPost(\"analyze\")]\n        public async Task<ActionResult<FraudAlert>> AnalyzeTransaction([FromBody] Transaction transaction)\n        {\n            var alert = await _fraudDetectionService.AnalyzeTransactionAsync(transaction);\n            return Ok(alert);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "983575b6-6d67-4895-aee3-c177d753bff2",
        "Name": "Services",
        "ParentId": "e7242e38-062d-4a0f-8344-4a481d6c4a4f",
        "Type": 0,
        "Items": [
          {
            "Id": "3bf691da-15f3-4027-a14d-e94612ae9f9c",
            "Name": "IFraudDetectionService.cs",
            "ParentId": "983575b6-6d67-4895-aee3-c177d753bff2",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing FraudDetectionSystem.Models;\n\nnamespace FraudDetectionSystem.Services\n{\n    public interface IFraudDetectionService\n    {\n        Task<FraudAlert> AnalyzeTransactionAsync(Transaction transaction);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "37638a85-7fb5-4d35-939f-900855d04f31",
            "Name": "FraudDetectionService.cs",
            "ParentId": "983575b6-6d67-4895-aee3-c177d753bff2",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing FraudDetectionSystem.Models;\nusing FraudDetectionSystem.Infrastructure;\nusing FraudDetectionSystem.Utils;\n\nnamespace FraudDetectionSystem.Services\n{\n    public class FraudDetectionService : IFraudDetectionService\n    {\n        private readonly IFraudRepository _fraudRepository;\n\n        public FraudDetectionService(IFraudRepository fraudRepository)\n        {\n            _fraudRepository = fraudRepository;\n        }\n\n        public async Task<FraudAlert> AnalyzeTransactionAsync(Transaction transaction)\n        {\n            // Calculate risk score using a robust algorithm based on transaction amount\n            double riskScore = RiskScoringHelper.CalculateRiskScore(transaction.Amount);\n\n            // Determine if transaction is fraudulent based on risk score threshold\n            bool isFraud = riskScore > 2.5;\n            string alertMessage = isFraud ? \"Transaction flagged as high risk due to abnormal activity.\" : \"Transaction appears normal.\";\n\n            var alert = new FraudAlert\n            {\n                AlertId = Guid.NewGuid().ToString(),\n                TransactionId = transaction.TransactionId,\n                IsFraud = isFraud,\n                RiskScore = riskScore,\n                AlertMessage = alertMessage,\n                AlertTime = DateTime.UtcNow\n            };\n\n            // Save the alert in the repository for further processing or auditing\n            _fraudRepository.SaveAlert(alert);\n\n            return await Task.FromResult(alert);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "99252b82-b747-4ecf-85c3-606f26123112",
        "Name": "Models",
        "ParentId": "e7242e38-062d-4a0f-8344-4a481d6c4a4f",
        "Type": 0,
        "Items": [
          {
            "Id": "40691bda-b997-4688-921c-ff39dea4537e",
            "Name": "Transaction.cs",
            "ParentId": "99252b82-b747-4ecf-85c3-606f26123112",
            "Type": 1,
            "Text": "using System;\n\nnamespace FraudDetectionSystem.Models\n{\n    public class Transaction\n    {\n        public string TransactionId { get; set; }\n        public string FromAccount { get; set; }\n        public string ToAccount { get; set; }\n        public decimal Amount { get; set; }\n        public DateTime Timestamp { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "39a9e4a3-5dc8-4521-bda0-563a481d2376",
            "Name": "FraudAlert.cs",
            "ParentId": "99252b82-b747-4ecf-85c3-606f26123112",
            "Type": 1,
            "Text": "using System;\n\nnamespace FraudDetectionSystem.Models\n{\n    public class FraudAlert\n    {\n        public string AlertId { get; set; }\n        public string TransactionId { get; set; }\n        public bool IsFraud { get; set; }\n        public double RiskScore { get; set; }\n        public string AlertMessage { get; set; }\n        public DateTime AlertTime { get; set; }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "7ef8afe0-a543-4883-acf7-c924087c0cbe",
        "Name": "Infrastructure",
        "ParentId": "e7242e38-062d-4a0f-8344-4a481d6c4a4f",
        "Type": 0,
        "Items": [
          {
            "Id": "16ece3e9-9331-45c5-a684-773cc67ce880",
            "Name": "IFraudRepository.cs",
            "ParentId": "7ef8afe0-a543-4883-acf7-c924087c0cbe",
            "Type": 1,
            "Text": "using FraudDetectionSystem.Models;\n\nnamespace FraudDetectionSystem.Infrastructure\n{\n    public interface IFraudRepository\n    {\n        void SaveAlert(FraudAlert alert);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "fe329ea4-13af-4af8-8c04-81e7ac7afdb0",
            "Name": "FraudRepository.cs",
            "ParentId": "7ef8afe0-a543-4883-acf7-c924087c0cbe",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing FraudDetectionSystem.Models;\n\nnamespace FraudDetectionSystem.Infrastructure\n{\n    public class FraudRepository : IFraudRepository\n    {\n        private readonly ConcurrentDictionary<string, FraudAlert> _alerts = new ConcurrentDictionary<string, FraudAlert>();\n\n        public void SaveAlert(FraudAlert alert)\n        {\n            _alerts[alert.AlertId] = alert;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "84d81fdd-d16a-481f-9cfe-950eb3d7ea7d",
        "Name": "Utils",
        "ParentId": "e7242e38-062d-4a0f-8344-4a481d6c4a4f",
        "Type": 0,
        "Items": [
          {
            "Id": "1797dc72-ac03-4817-94b7-827e334f69cc",
            "Name": "RiskScoringHelper.cs",
            "ParentId": "84d81fdd-d16a-481f-9cfe-950eb3d7ea7d",
            "Type": 1,
            "Text": "using System;\n\nnamespace FraudDetectionSystem.Utils\n{\n    public static class RiskScoringHelper\n    {\n        public static double CalculateRiskScore(decimal amount)\n        {\n            // Implement a production-ready risk scoring algorithm\n            // The risk score is derived based on transaction amount and can be adjusted with additional factors\n            double baseScore = (double)amount / 10000.0;\n            // Additional logic can be integrated here for a more complex risk assessment\n            return baseScore;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "ecdb7466-e15d-4732-a00c-61f69b81f45e",
    "Name": "RiskAssessmentEngine",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "17719bbc-6e51-45c9-a8ea-ddffd416fcbf",
        "Name": "Program.cs",
        "ParentId": "ecdb7466-e15d-4732-a00c-61f69b81f45e",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace RiskAssessmentEngine\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "7d0dc2d2-19b5-44f1-81db-f9203068224f",
        "Name": "Startup.cs",
        "ParentId": "ecdb7466-e15d-4732-a00c-61f69b81f45e",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing RiskAssessmentEngine.Services;\n\nnamespace RiskAssessmentEngine\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddScoped<IRiskAssessmentService, RiskAssessmentService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            \n            app.UseRouting();\n            \n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "00a34002-20dc-49c2-966a-2a4b4a8cd36b",
        "Name": "Controllers",
        "ParentId": "ecdb7466-e15d-4732-a00c-61f69b81f45e",
        "Type": 0,
        "Items": [
          {
            "Id": "99c895f2-9c7d-4442-b5c4-3d85bcf05e51",
            "Name": "RiskAssessmentController.cs",
            "ParentId": "00a34002-20dc-49c2-966a-2a4b4a8cd36b",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing RiskAssessmentEngine.Models;\nusing RiskAssessmentEngine.Services;\n\nnamespace RiskAssessmentEngine.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class RiskAssessmentController : ControllerBase\n    {\n        private readonly IRiskAssessmentService _riskService;\n\n        public RiskAssessmentController(IRiskAssessmentService riskService)\n        {\n            _riskService = riskService;\n        }\n\n        [HttpPost(\"assess\")]\n        public ActionResult<RiskScore> AssessRisk([FromBody] RiskRequest request)\n        {\n            if (request == null)\n            {\n                return BadRequest(\"Request cannot be null.\");\n            }\n\n            var riskScore = _riskService.CalculateRisk(request);\n            return Ok(riskScore);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "151ed545-4ec6-4469-b255-60f922939393",
        "Name": "Services",
        "ParentId": "ecdb7466-e15d-4732-a00c-61f69b81f45e",
        "Type": 0,
        "Items": [
          {
            "Id": "29ea3648-02b6-4e1e-af3b-c9e66abe825e",
            "Name": "IRiskAssessmentService.cs",
            "ParentId": "151ed545-4ec6-4469-b255-60f922939393",
            "Type": 1,
            "Text": "using RiskAssessmentEngine.Models;\n\nnamespace RiskAssessmentEngine.Services\n{\n    public interface IRiskAssessmentService\n    {\n        RiskScore CalculateRisk(RiskRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "bdd9b5ba-ba84-4313-aec5-a19e0f464a77",
            "Name": "RiskAssessmentService.cs",
            "ParentId": "151ed545-4ec6-4469-b255-60f922939393",
            "Type": 1,
            "Text": "using System;\nusing RiskAssessmentEngine.Models;\n\nnamespace RiskAssessmentEngine.Services\n{\n    public class RiskAssessmentService : IRiskAssessmentService\n    {\n        public RiskScore CalculateRisk(RiskRequest request)\n        {\n            decimal risk = 0;\n\n            // Evaluate transaction amount risk contribution\n            if (request.TransactionAmount > 10000)\n                risk += 30;\n            else if (request.TransactionAmount > 5000)\n                risk += 20;\n            else\n                risk += 10;\n\n            // Evaluate customer age risk contribution\n            if (request.CustomerAge < 25)\n                risk += 15;\n            else if (request.CustomerAge > 60)\n                risk += 20;\n            else\n                risk += 10;\n\n            // Evaluate suspicious activity frequency\n            risk += request.NumberOfSuspiciousActivities * 5;\n\n            // Incorporate previous risk score if available\n            if (request.PreviousRiskScore > 0)\n                risk = (risk + request.PreviousRiskScore) / 2;\n\n            // Ensure the final risk score is between 0 and 100\n            risk = risk > 100 ? 100 : risk;\n            risk = risk < 0 ? 0 : risk;\n\n            string level = risk < 40 ? \"Low\" : (risk < 70 ? \"Medium\" : \"High\");\n\n            return new RiskScore\n            {\n                Score = risk,\n                Level = level,\n                AssessedAt = DateTime.UtcNow\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "8cc38d0c-50f1-42d4-afaa-82756ea9ecaa",
        "Name": "Models",
        "ParentId": "ecdb7466-e15d-4732-a00c-61f69b81f45e",
        "Type": 0,
        "Items": [
          {
            "Id": "585a2d09-4a32-4351-94f1-6026c2b4a3cd",
            "Name": "RiskRequest.cs",
            "ParentId": "8cc38d0c-50f1-42d4-afaa-82756ea9ecaa",
            "Type": 1,
            "Text": "namespace RiskAssessmentEngine.Models\n{\n    public class RiskRequest\n    {\n        public decimal TransactionAmount { get; set; }\n        public int CustomerAge { get; set; }\n        public int NumberOfSuspiciousActivities { get; set; }\n        public decimal PreviousRiskScore { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "eb5a8c4c-4a8b-4846-9a04-905ad854cda7",
            "Name": "RiskScore.cs",
            "ParentId": "8cc38d0c-50f1-42d4-afaa-82756ea9ecaa",
            "Type": 1,
            "Text": "using System;\n\nnamespace RiskAssessmentEngine.Models\n{\n    public class RiskScore\n    {\n        public decimal Score { get; set; }\n        public string Level { get; set; }\n        public DateTime AssessedAt { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "b9ac20fa-f0cc-4118-b00b-03c96fd04533",
    "Name": "AuditLoggingSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "269a0adb-ed4c-48dd-bb16-89e71f77b975",
        "Name": "Program.cs",
        "ParentId": "b9ac20fa-f0cc-4118-b00b-03c96fd04533",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace AuditLoggingSystem\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "0e34198d-ae89-4cd1-86d2-61256eaff6ee",
        "Name": "Startup.cs",
        "ParentId": "b9ac20fa-f0cc-4118-b00b-03c96fd04533",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing AuditLoggingSystem.Services;\nusing AuditLoggingSystem.Data;\n\nnamespace AuditLoggingSystem\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IAuditService, AuditService>();\n            services.AddSingleton<IAuditRepository, AuditRepository>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "7ac95a4d-3888-4480-b7c3-3415508f8a3b",
        "Name": "Controllers",
        "ParentId": "b9ac20fa-f0cc-4118-b00b-03c96fd04533",
        "Type": 0,
        "Items": [
          {
            "Id": "7432ee31-23c9-46b2-8aa6-92bacea0ef3b",
            "Name": "AuditController.cs",
            "ParentId": "7ac95a4d-3888-4480-b7c3-3415508f8a3b",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing AuditLoggingSystem.Models;\nusing AuditLoggingSystem.Services;\n\nnamespace AuditLoggingSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class AuditController : ControllerBase\n    {\n        private readonly IAuditService _auditService;\n\n        public AuditController(IAuditService auditService)\n        {\n            _auditService = auditService;\n        }\n\n        [HttpPost(\"log\")]\n        public async Task<IActionResult> LogEvent([FromBody] AuditLogRequest request)\n        {\n            if (string.IsNullOrEmpty(request.Level) || string.IsNullOrEmpty(request.Message))\n            {\n                return BadRequest(\"Level and Message are required.\");\n            }\n\n            var logEntry = new LogEntry\n            {\n                Id = Guid.NewGuid(),\n                Timestamp = DateTime.UtcNow,\n                Level = request.Level,\n                Message = request.Message\n            };\n\n            await _auditService.LogEventAsync(logEntry);\n            return Ok(new { Success = true, LogId = logEntry.Id });\n        }\n\n        [HttpGet(\"logs\")]\n        public async Task<IActionResult> GetLogs([FromQuery] DateTime? from, [FromQuery] DateTime? to)\n        {\n            IEnumerable<LogEntry> logs = await _auditService.GetLogsAsync(from, to);\n            return Ok(logs);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "d26cce0d-6a4f-49aa-8f72-cf2e0a9c3b12",
        "Name": "Services",
        "ParentId": "b9ac20fa-f0cc-4118-b00b-03c96fd04533",
        "Type": 0,
        "Items": [
          {
            "Id": "ffdb7d75-e799-4319-81c5-5fb478deaf28",
            "Name": "IAuditService.cs",
            "ParentId": "d26cce0d-6a4f-49aa-8f72-cf2e0a9c3b12",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing AuditLoggingSystem.Models;\n\nnamespace AuditLoggingSystem.Services\n{\n    public interface IAuditService\n    {\n        Task LogEventAsync(LogEntry logEntry);\n        Task<IEnumerable<LogEntry>> GetLogsAsync(DateTime? from, DateTime? to);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "537fc811-9bfb-4276-b6a1-6d8d868cfef6",
            "Name": "AuditService.cs",
            "ParentId": "d26cce0d-6a4f-49aa-8f72-cf2e0a9c3b12",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing AuditLoggingSystem.Models;\nusing AuditLoggingSystem.Data;\n\nnamespace AuditLoggingSystem.Services\n{\n    public class AuditService : IAuditService\n    {\n        private readonly IAuditRepository _repository;\n\n        public AuditService(IAuditRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public async Task LogEventAsync(LogEntry logEntry)\n        {\n            // Business logic can be extended here if needed\n            await _repository.AddLogAsync(logEntry);\n        }\n\n        public async Task<IEnumerable<LogEntry>> GetLogsAsync(DateTime? from, DateTime? to)\n        {\n            return await _repository.GetLogsAsync(from, to);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "1ee1de5c-234c-427d-8f5d-a828b4b16dce",
        "Name": "Models",
        "ParentId": "b9ac20fa-f0cc-4118-b00b-03c96fd04533",
        "Type": 0,
        "Items": [
          {
            "Id": "2f73d8b7-33a4-4b98-96c3-7dc39bdeaf00",
            "Name": "LogEntry.cs",
            "ParentId": "1ee1de5c-234c-427d-8f5d-a828b4b16dce",
            "Type": 1,
            "Text": "using System;\n\nnamespace AuditLoggingSystem.Models\n{\n    public class LogEntry\n    {\n        public Guid Id { get; set; }\n        public DateTime Timestamp { get; set; }\n        public string Level { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "7d0d062c-c0e9-425b-82d0-eda031dc28fd",
            "Name": "AuditLogRequest.cs",
            "ParentId": "1ee1de5c-234c-427d-8f5d-a828b4b16dce",
            "Type": 1,
            "Text": "namespace AuditLoggingSystem.Models\n{\n    public class AuditLogRequest\n    {\n        public string Level { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "6fa23ddb-3c3a-4dbb-90e5-8b28a15d3219",
        "Name": "Data",
        "ParentId": "b9ac20fa-f0cc-4118-b00b-03c96fd04533",
        "Type": 0,
        "Items": [
          {
            "Id": "dd13fa97-d1ed-4ed5-b6b4-9134e3bb5d71",
            "Name": "IAuditRepository.cs",
            "ParentId": "6fa23ddb-3c3a-4dbb-90e5-8b28a15d3219",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing AuditLoggingSystem.Models;\n\nnamespace AuditLoggingSystem.Data\n{\n    public interface IAuditRepository\n    {\n        Task AddLogAsync(LogEntry logEntry);\n        Task<IEnumerable<LogEntry>> GetLogsAsync(DateTime? from, DateTime? to);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "79594e4a-5f2f-450e-9b19-b657de6da86b",
            "Name": "AuditRepository.cs",
            "ParentId": "6fa23ddb-3c3a-4dbb-90e5-8b28a15d3219",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing AuditLoggingSystem.Models;\n\nnamespace AuditLoggingSystem.Data\n{\n    public class AuditRepository : IAuditRepository\n    {\n        private readonly string _filePath = \"audit.log\";\n        private readonly object _lock = new object();\n\n        public AuditRepository()\n        {\n            if (!File.Exists(_filePath))\n            {\n                using (var stream = File.Create(_filePath)) { }\n            }\n        }\n\n        public Task AddLogAsync(LogEntry logEntry)\n        {\n            return Task.Run(() =>\n            {\n                var json = JsonSerializer.Serialize(logEntry);\n                lock (_lock)\n                {\n                    File.AppendAllText(_filePath, json + Environment.NewLine);\n                }\n            });\n        }\n\n        public Task<IEnumerable<LogEntry>> GetLogsAsync(DateTime? from, DateTime? to)\n        {\n            return Task.Run(() =>\n            {\n                List<LogEntry> logs = new List<LogEntry>();\n                lock (_lock)\n                {\n                    var lines = File.ReadAllLines(_filePath);\n                    foreach (var line in lines)\n                    {\n                        if (string.IsNullOrWhiteSpace(line)) continue;\n                        try\n                        {\n                            var entry = JsonSerializer.Deserialize<LogEntry>(line);\n                            if (entry != null) logs.Add(entry);\n                        }\n                        catch\n                        {\n                            // Skip line if deserialization fails\n                        }\n                    }\n                }\n\n                if (from.HasValue)\n                {\n                    logs = logs.Where(l => l.Timestamp >= from.Value).ToList();\n                }\n                if (to.HasValue)\n                {\n                    logs = logs.Where(l => l.Timestamp <= to.Value).ToList();\n                }\n\n                return (IEnumerable<LogEntry>)logs;\n            });\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "bae05a0c-caee-4259-8124-b7c745d4d023",
    "Name": "RegulatoryReportingTool",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "67093cd9-8fcd-4d29-a42a-b8a26d0a645a",
        "Name": "Program.cs",
        "ParentId": "bae05a0c-caee-4259-8124-b7c745d4d023",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing RegulatoryReportingTool.Services;\nusing RegulatoryReportingTool.Data;\n\nnamespace RegulatoryReportingTool\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = WebApplication.CreateBuilder(args);\n\n            // Add services to the container.\n            builder.Services.AddControllers();\n            builder.Services.AddScoped<IReportService, ReportService>();\n            builder.Services.AddSingleton<IReportRepository, ReportRepository>();\n            builder.Services.AddLogging();\n\n            var app = builder.Build();\n\n            // Configure the HTTP request pipeline.\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n\n            app.Run();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "4cfa1d53-e307-4b72-ba75-1719f4c28ee7",
        "Name": "Controllers",
        "ParentId": "bae05a0c-caee-4259-8124-b7c745d4d023",
        "Type": 0,
        "Items": [
          {
            "Id": "33721851-2a2d-44bf-bafe-2fdc081dc110",
            "Name": "ReportController.cs",
            "ParentId": "4cfa1d53-e307-4b72-ba75-1719f4c28ee7",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing RegulatoryReportingTool.Models;\nusing RegulatoryReportingTool.Services;\n\nnamespace RegulatoryReportingTool.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ReportController : ControllerBase\n    {\n        private readonly IReportService _reportService;\n\n        public ReportController(IReportService reportService)\n        {\n            _reportService = reportService;\n        }\n\n        [HttpPost(\"generate\")]\n        public async Task<IActionResult> GenerateReport([FromBody] ReportRequest request)\n        {\n            if (request == null || request.StartDate >= request.EndDate)\n            {\n                return BadRequest(\"Invalid report request parameters.\");\n            }\n\n            try\n            {\n                ReportResponse response = await _reportService.GenerateReportAsync(request);\n                return Ok(response);\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, $\"An error occurred while generating the report: {ex.Message}\");\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "ba754ef6-e4a1-42ce-aff6-610f184ed5a9",
        "Name": "Services",
        "ParentId": "bae05a0c-caee-4259-8124-b7c745d4d023",
        "Type": 0,
        "Items": [
          {
            "Id": "9d362ed2-63ee-4300-8173-8e5162a30ca3",
            "Name": "IReportService.cs",
            "ParentId": "ba754ef6-e4a1-42ce-aff6-610f184ed5a9",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing RegulatoryReportingTool.Models;\n\nnamespace RegulatoryReportingTool.Services\n{\n    public interface IReportService\n    {\n        Task<ReportResponse> GenerateReportAsync(ReportRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "4ca0a468-237a-4c72-b797-60829649412c",
            "Name": "ReportService.cs",
            "ParentId": "ba754ef6-e4a1-42ce-aff6-610f184ed5a9",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing RegulatoryReportingTool.Models;\nusing RegulatoryReportingTool.Data;\nusing RegulatoryReportingTool.Utils;\n\nnamespace RegulatoryReportingTool.Services\n{\n    public class ReportService : IReportService\n    {\n        private readonly IReportRepository _reportRepository;\n\n        public ReportService(IReportRepository reportRepository)\n        {\n            _reportRepository = reportRepository;\n        }\n\n        public async Task<ReportResponse> GenerateReportAsync(ReportRequest request)\n        {\n            // Generate report content using the ReportGenerator utility\n            string reportContent = ReportGenerator.Generate(request.StartDate, request.EndDate, request.ReportType);\n\n            // Create a report response model\n            ReportResponse response = new ReportResponse\n            {\n                ReportId = Guid.NewGuid().ToString(),\n                GeneratedDate = DateTime.UtcNow,\n                ReportType = request.ReportType,\n                ReportData = reportContent\n            };\n\n            // Store the generated report in the repository\n            await _reportRepository.StoreReportAsync(response);\n            \n            return response;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "239f204d-adfd-4042-9cce-d4d5e1888ea7",
        "Name": "Models",
        "ParentId": "bae05a0c-caee-4259-8124-b7c745d4d023",
        "Type": 0,
        "Items": [
          {
            "Id": "7bfa3b29-a5f1-463f-a357-e40747c2a808",
            "Name": "ReportRequest.cs",
            "ParentId": "239f204d-adfd-4042-9cce-d4d5e1888ea7",
            "Type": 1,
            "Text": "using System;\n\nnamespace RegulatoryReportingTool.Models\n{\n    public class ReportRequest\n    {\n        public DateTime StartDate { get; set; }\n        public DateTime EndDate { get; set; }\n        public string ReportType { get; set; } // e.g., \"Monthly\", \"Quarterly\", etc.\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "09554780-4074-4142-af12-315df2627645",
            "Name": "ReportResponse.cs",
            "ParentId": "239f204d-adfd-4042-9cce-d4d5e1888ea7",
            "Type": 1,
            "Text": "using System;\n\nnamespace RegulatoryReportingTool.Models\n{\n    public class ReportResponse\n    {\n        public string ReportId { get; set; }\n        public DateTime GeneratedDate { get; set; }\n        public string ReportType { get; set; }\n        public string ReportData { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "dc42f1ec-3c44-4cc7-9475-d11ee90c1f72",
        "Name": "Data",
        "ParentId": "bae05a0c-caee-4259-8124-b7c745d4d023",
        "Type": 0,
        "Items": [
          {
            "Id": "4bdc1e47-bae2-430e-b440-e24f120c3ea8",
            "Name": "IReportRepository.cs",
            "ParentId": "dc42f1ec-3c44-4cc7-9475-d11ee90c1f72",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing RegulatoryReportingTool.Models;\n\nnamespace RegulatoryReportingTool.Data\n{\n    public interface IReportRepository\n    {\n        Task StoreReportAsync(ReportResponse report);\n        Task<ReportResponse> GetReportAsync(string reportId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "f862e824-7736-45a8-bd9d-285f8f12f538",
            "Name": "ReportRepository.cs",
            "ParentId": "dc42f1ec-3c44-4cc7-9475-d11ee90c1f72",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing System.Threading.Tasks;\nusing RegulatoryReportingTool.Models;\n\nnamespace RegulatoryReportingTool.Data\n{\n    public class ReportRepository : IReportRepository\n    {\n        private readonly ConcurrentDictionary<string, ReportResponse> _reportStore = new ConcurrentDictionary<string, ReportResponse>();\n\n        public Task StoreReportAsync(ReportResponse report)\n        {\n            _reportStore[report.ReportId] = report;\n            return Task.CompletedTask;\n        }\n\n        public Task<ReportResponse> GetReportAsync(string reportId)\n        {\n            _reportStore.TryGetValue(reportId, out ReportResponse report);\n            return Task.FromResult(report);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "177603bc-c4ab-4cc9-8ec5-608076fcd551",
        "Name": "Utils",
        "ParentId": "bae05a0c-caee-4259-8124-b7c745d4d023",
        "Type": 0,
        "Items": [
          {
            "Id": "7afbbf3f-2cfe-45fd-bbd0-1bc62ab4c1be",
            "Name": "ReportGenerator.cs",
            "ParentId": "177603bc-c4ab-4cc9-8ec5-608076fcd551",
            "Type": 1,
            "Text": "using System;\nusing System.Text;\n\nnamespace RegulatoryReportingTool.Utils\n{\n    public static class ReportGenerator\n    {\n        public static string Generate(DateTime startDate, DateTime endDate, string reportType)\n        {\n            // Implement realistic report generation logic\n            // For example, aggregate data between the dates and format report content\n            StringBuilder reportBuilder = new StringBuilder();\n            reportBuilder.AppendLine($\"Report Type: {reportType}\");\n            reportBuilder.AppendLine($\"Period: {startDate:yyyy-MM-dd} to {endDate:yyyy-MM-dd}\");\n            reportBuilder.AppendLine($\"Generated on: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC\");\n            reportBuilder.AppendLine(\"----------------------------------------\");\n            reportBuilder.AppendLine(\"Data Summary:\");\n            reportBuilder.AppendLine(\"Compliance metrics, audit logs, and key performance indicators are included.\");\n            reportBuilder.AppendLine(\"----------------------------------------\");\n            reportBuilder.AppendLine(\"End of Report\");\n            \n            return reportBuilder.ToString();\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "f3ea7e58-5ab1-4f13-bb6a-750a4a94f573",
    "Name": "CreditScoreIntegrationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "9a63d2fb-9b8a-435f-b0fe-6b1569af4a02",
        "Name": "Program.cs",
        "ParentId": "f3ea7e58-5ab1-4f13-bb6a-750a4a94f573",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace CreditScoreIntegrationService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "36bd1fc3-8456-4ebd-af9e-29b0fa203746",
        "Name": "Startup.cs",
        "ParentId": "f3ea7e58-5ab1-4f13-bb6a-750a4a94f573",
        "Type": 1,
        "Text": "using CreditScoreIntegrationService.Infrastructure;\nusing CreditScoreIntegrationService.Services;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace CreditScoreIntegrationService\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient<ICreditBureauClient, CreditBureauClient>();\n            services.AddSingleton<ICreditScoreService, CreditScoreService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "80e4e7b6-2ebe-4463-8835-7ccdb881c9bd",
        "Name": "Controllers",
        "ParentId": "f3ea7e58-5ab1-4f13-bb6a-750a4a94f573",
        "Type": 0,
        "Items": [
          {
            "Id": "7ee93983-3f33-4ece-8df9-4b003bd1c404",
            "Name": "CreditScoreController.cs",
            "ParentId": "80e4e7b6-2ebe-4463-8835-7ccdb881c9bd",
            "Type": 1,
            "Text": "using CreditScoreIntegrationService.Models;\nusing CreditScoreIntegrationService.Services;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\n\nnamespace CreditScoreIntegrationService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class CreditScoreController : ControllerBase\n    {\n        private readonly ICreditScoreService _creditScoreService;\n\n        public CreditScoreController(ICreditScoreService creditScoreService)\n        {\n            _creditScoreService = creditScoreService;\n        }\n\n        [HttpGet(\"{customerId}\")]\n        public async Task<ActionResult<CreditScoreResponse>> GetCreditScore(string customerId)\n        {\n            var result = await _creditScoreService.GetCreditScoreAsync(customerId);\n            if (result == null)\n            {\n                return NotFound(new { Message = \"Credit score not found.\" });\n            }\n            return Ok(result);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "d0e4a234-4d35-4c8a-a10b-528374bb396c",
        "Name": "Services",
        "ParentId": "f3ea7e58-5ab1-4f13-bb6a-750a4a94f573",
        "Type": 0,
        "Items": [
          {
            "Id": "45a4ec55-eed4-451f-8b13-53c11540e96f",
            "Name": "ICreditScoreService.cs",
            "ParentId": "d0e4a234-4d35-4c8a-a10b-528374bb396c",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing CreditScoreIntegrationService.Models;\n\nnamespace CreditScoreIntegrationService.Services\n{\n    public interface ICreditScoreService\n    {\n        Task<CreditScoreResponse> GetCreditScoreAsync(string customerId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "1bbc249b-ab6e-4276-b6ad-acb211b0da00",
            "Name": "CreditScoreService.cs",
            "ParentId": "d0e4a234-4d35-4c8a-a10b-528374bb396c",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing CreditScoreIntegrationService.Infrastructure;\nusing CreditScoreIntegrationService.Models;\n\nnamespace CreditScoreIntegrationService.Services\n{\n    public class CreditScoreService : ICreditScoreService\n    {\n        private readonly ICreditBureauClient _creditBureauClient;\n\n        public CreditScoreService(ICreditBureauClient creditBureauClient)\n        {\n            _creditBureauClient = creditBureauClient;\n        }\n\n        public async Task<CreditScoreResponse> GetCreditScoreAsync(string customerId)\n        {\n            if (string.IsNullOrWhiteSpace(customerId))\n            {\n                throw new ArgumentException(\"Customer ID cannot be null or empty\", nameof(customerId));\n            }\n\n            // Retrieve credit score details from the external credit bureau service\n            var creditScore = await _creditBureauClient.FetchCreditScoreAsync(customerId);\n            if (creditScore == null)\n            {\n                return null;\n            }\n\n            // Apply any necessary business logic or transformations if required\n            return new CreditScoreResponse\n            {\n                CustomerId = customerId,\n                Score = creditScore.Score,\n                Report = creditScore.Report,\n                RetrievedAt = DateTime.UtcNow\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "575b7daf-156e-43d8-b407-6a07431dc1f1",
        "Name": "Infrastructure",
        "ParentId": "f3ea7e58-5ab1-4f13-bb6a-750a4a94f573",
        "Type": 0,
        "Items": [
          {
            "Id": "0d83ae81-2545-4064-9c66-a7aa9e3ede62",
            "Name": "ICreditBureauClient.cs",
            "ParentId": "575b7daf-156e-43d8-b407-6a07431dc1f1",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing CreditScoreIntegrationService.Models;\n\nnamespace CreditScoreIntegrationService.Infrastructure\n{\n    public interface ICreditBureauClient\n    {\n        Task<CreditScore> FetchCreditScoreAsync(string customerId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "abf12dcb-3063-44c6-8ce9-84d6aee8740a",
            "Name": "CreditBureauClient.cs",
            "ParentId": "575b7daf-156e-43d8-b407-6a07431dc1f1",
            "Type": 1,
            "Text": "using CreditScoreIntegrationService.Models;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\n\nnamespace CreditScoreIntegrationService.Infrastructure\n{\n    public class CreditBureauClient : ICreditBureauClient\n    {\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<CreditBureauClient> _logger;\n\n        public CreditBureauClient(HttpClient httpClient, ILogger<CreditBureauClient> logger)\n        {\n            _httpClient = httpClient;\n            _logger = logger;\n        }\n\n        public async Task<CreditScore> FetchCreditScoreAsync(string customerId)\n        {\n            // In production, the endpoint URL would be retrieved from configuration\n            var requestUrl = $\"https://api.creditbureau.com/creditscore/{customerId}\";\n            try\n            {\n                var response = await _httpClient.GetAsync(requestUrl);\n                response.EnsureSuccessStatusCode();\n                var creditScore = await response.Content.ReadFromJsonAsync<CreditScore>();\n                return creditScore;\n            }\n            catch (HttpRequestException ex)\n            {\n                _logger.LogError(ex, $\"Error fetching credit score for customer {customerId}\");\n                throw;\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "87179550-3a76-4ce5-952d-cc6ce2fae84f",
        "Name": "Models",
        "ParentId": "f3ea7e58-5ab1-4f13-bb6a-750a4a94f573",
        "Type": 0,
        "Items": [
          {
            "Id": "1f5636c6-c924-462d-b9d3-a22827e8e6ff",
            "Name": "CreditScore.cs",
            "ParentId": "87179550-3a76-4ce5-952d-cc6ce2fae84f",
            "Type": 1,
            "Text": "namespace CreditScoreIntegrationService.Models\n{\n    public class CreditScore\n    {\n        public int Score { get; set; }\n        public string Report { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "c1ffa11e-a77e-4591-8535-15876dd76c30",
            "Name": "CreditScoreRequest.cs",
            "ParentId": "87179550-3a76-4ce5-952d-cc6ce2fae84f",
            "Type": 1,
            "Text": "namespace CreditScoreIntegrationService.Models\n{\n    public class CreditScoreRequest\n    {\n        public string CustomerId { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "c0f6982a-dafb-4aef-bf21-b766e51c5f1b",
            "Name": "CreditScoreResponse.cs",
            "ParentId": "87179550-3a76-4ce5-952d-cc6ce2fae84f",
            "Type": 1,
            "Text": "using System;\n\nnamespace CreditScoreIntegrationService.Models\n{\n    public class CreditScoreResponse\n    {\n        public string CustomerId { get; set; }\n        public int Score { get; set; }\n        public string Report { get; set; }\n        public DateTime RetrievedAt { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "8703fe11-5e85-4c3a-8c26-b57dfb14bc7f",
    "Name": "ExternalPaymentConnector",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "63e2e9ed-ce56-45bf-bd4c-aa73c8179183",
        "Name": "Program.cs",
        "ParentId": "8703fe11-5e85-4c3a-8c26-b57dfb14bc7f",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ExternalPaymentConnector\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "8c1a30b3-15e0-4a6e-a761-8b3d2e6bf1c3",
        "Name": "Startup.cs",
        "ParentId": "8703fe11-5e85-4c3a-8c26-b57dfb14bc7f",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing ExternalPaymentConnector.Services;\nusing ExternalPaymentConnector.Infrastructure;\n\nnamespace ExternalPaymentConnector\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient();\n            services.AddScoped<IPaymentService, PaymentService>();\n            services.AddScoped<IPaymentProviderFactory, PaymentProviderFactory>();\n            // Register both payment provider implementations\n            services.AddScoped<IPaymentProvider, PayPalProvider>();\n            services.AddScoped<IPaymentProvider, StripeProvider>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "87f2b787-a6d8-4be7-bd48-5839b06f18a5",
        "Name": "Controllers",
        "ParentId": "8703fe11-5e85-4c3a-8c26-b57dfb14bc7f",
        "Type": 0,
        "Items": [
          {
            "Id": "d90091c4-1cda-4197-bfaf-0a13fabe6575",
            "Name": "PaymentController.cs",
            "ParentId": "87f2b787-a6d8-4be7-bd48-5839b06f18a5",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing ExternalPaymentConnector.Services;\nusing ExternalPaymentConnector.Models;\n\nnamespace ExternalPaymentConnector.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class PaymentController : ControllerBase\n    {\n        private readonly IPaymentService _paymentService;\n\n        public PaymentController(IPaymentService paymentService)\n        {\n            _paymentService = paymentService;\n        }\n\n        [HttpPost(\"initiate\")]\n        public async Task<IActionResult> InitiatePayment([FromBody] PaymentRequest request)\n        {\n            PaymentResponse response = await _paymentService.ProcessPaymentAsync(request);\n            if (response.IsSuccess)\n                return Ok(response);\n            return BadRequest(response);\n        }\n\n        [HttpPost(\"callback\")]\n        public async Task<IActionResult> PaymentCallback([FromBody] PaymentCallbackRequest callbackRequest)\n        {\n            bool result = await _paymentService.HandlePaymentCallbackAsync(callbackRequest);\n            if (result)\n                return Ok();\n            return BadRequest();\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "c7aa42c6-72fd-4d1d-93ce-2856f2d0af12",
        "Name": "Services",
        "ParentId": "8703fe11-5e85-4c3a-8c26-b57dfb14bc7f",
        "Type": 0,
        "Items": [
          {
            "Id": "67ad1edc-d36c-406b-a52c-63b7f57ce8fd",
            "Name": "IPaymentService.cs",
            "ParentId": "c7aa42c6-72fd-4d1d-93ce-2856f2d0af12",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing ExternalPaymentConnector.Models;\n\nnamespace ExternalPaymentConnector.Services\n{\n    public interface IPaymentService\n    {\n        Task<PaymentResponse> ProcessPaymentAsync(PaymentRequest request);\n        Task<bool> HandlePaymentCallbackAsync(PaymentCallbackRequest callbackRequest);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "eae99cc1-4e49-40fa-87f1-4f1cbace7b40",
            "Name": "PaymentService.cs",
            "ParentId": "c7aa42c6-72fd-4d1d-93ce-2856f2d0af12",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing ExternalPaymentConnector.Models;\nusing ExternalPaymentConnector.Infrastructure;\n\nnamespace ExternalPaymentConnector.Services\n{\n    public class PaymentService : IPaymentService\n    {\n        private readonly IPaymentProviderFactory _providerFactory;\n\n        public PaymentService(IPaymentProviderFactory providerFactory)\n        {\n            _providerFactory = providerFactory;\n        }\n\n        public async Task<PaymentResponse> ProcessPaymentAsync(PaymentRequest request)\n        {\n            var provider = _providerFactory.GetProvider(request.Provider);\n            PaymentResponse response = await provider.InitiatePaymentAsync(request);\n            return response;\n        }\n\n        public async Task<bool> HandlePaymentCallbackAsync(PaymentCallbackRequest callbackRequest)\n        {\n            var provider = _providerFactory.GetProvider(callbackRequest.Provider);\n            return await provider.ProcessCallbackAsync(callbackRequest);\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "52f654ea-3127-46b5-871d-4a962f06b042",
            "Name": "IPaymentProvider.cs",
            "ParentId": "c7aa42c6-72fd-4d1d-93ce-2856f2d0af12",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing ExternalPaymentConnector.Models;\n\nnamespace ExternalPaymentConnector.Services\n{\n    public interface IPaymentProvider\n    {\n        string ProviderName { get; }\n        Task<PaymentResponse> InitiatePaymentAsync(PaymentRequest request);\n        Task<bool> ProcessCallbackAsync(PaymentCallbackRequest callbackRequest);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e0374e0e-da5d-4da5-9272-43472d556b4f",
            "Name": "PayPalProvider.cs",
            "ParentId": "c7aa42c6-72fd-4d1d-93ce-2856f2d0af12",
            "Type": 1,
            "Text": "using System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing ExternalPaymentConnector.Models;\nusing Microsoft.Extensions.Configuration;\n\nnamespace ExternalPaymentConnector.Services\n{\n    public class PayPalProvider : IPaymentProvider\n    {\n        private readonly HttpClient _httpClient;\n        private readonly IConfiguration _configuration;\n\n        public PayPalProvider(IHttpClientFactory httpClientFactory, IConfiguration configuration)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n            _configuration = configuration;\n        }\n\n        public string ProviderName => \"PayPal\";\n\n        public async Task<PaymentResponse> InitiatePaymentAsync(PaymentRequest request)\n        {\n            string endpoint = _configuration[\"PayPal:InitiatePaymentUrl\"];\n            string json = JsonSerializer.Serialize(request);\n            StringContent content = new StringContent(json, Encoding.UTF8, \"application/json\");\n            HttpResponseMessage httpResponse = await _httpClient.PostAsync(endpoint, content);\n            httpResponse.EnsureSuccessStatusCode();\n            string responseContent = await httpResponse.Content.ReadAsStringAsync();\n            return JsonSerializer.Deserialize<PaymentResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n        }\n\n        public async Task<bool> ProcessCallbackAsync(PaymentCallbackRequest callbackRequest)\n        {\n            // Validate PayPal callback details, verify signature and update transaction status\n            // Production code would include security validations\n            return await Task.FromResult(true);\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "8ec6fb02-a675-46ea-a427-d77965463cbb",
            "Name": "StripeProvider.cs",
            "ParentId": "c7aa42c6-72fd-4d1d-93ce-2856f2d0af12",
            "Type": 1,
            "Text": "using System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing ExternalPaymentConnector.Models;\nusing Microsoft.Extensions.Configuration;\n\nnamespace ExternalPaymentConnector.Services\n{\n    public class StripeProvider : IPaymentProvider\n    {\n        private readonly HttpClient _httpClient;\n        private readonly IConfiguration _configuration;\n\n        public StripeProvider(IHttpClientFactory httpClientFactory, IConfiguration configuration)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n            _configuration = configuration;\n        }\n\n        public string ProviderName => \"Stripe\";\n\n        public async Task<PaymentResponse> InitiatePaymentAsync(PaymentRequest request)\n        {\n            string endpoint = _configuration[\"Stripe:InitiatePaymentUrl\"];\n            string json = JsonSerializer.Serialize(request);\n            StringContent content = new StringContent(json, Encoding.UTF8, \"application/json\");\n            HttpResponseMessage httpResponse = await _httpClient.PostAsync(endpoint, content);\n            httpResponse.EnsureSuccessStatusCode();\n            string responseContent = await httpResponse.Content.ReadAsStringAsync();\n            return JsonSerializer.Deserialize<PaymentResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n        }\n\n        public async Task<bool> ProcessCallbackAsync(PaymentCallbackRequest callbackRequest)\n        {\n            // Validate Stripe callback details, including signature verification\n            return await Task.FromResult(true);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "7e411b67-8654-42ef-afd1-14c920a9be3a",
        "Name": "Infrastructure",
        "ParentId": "8703fe11-5e85-4c3a-8c26-b57dfb14bc7f",
        "Type": 0,
        "Items": [
          {
            "Id": "da8713e7-b7d6-41e8-8b2e-df9724a29395",
            "Name": "PaymentProviderFactory.cs",
            "ParentId": "7e411b67-8654-42ef-afd1-14c920a9be3a",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing ExternalPaymentConnector.Services;\n\nnamespace ExternalPaymentConnector.Infrastructure\n{\n    public interface IPaymentProviderFactory\n    {\n        IPaymentProvider GetProvider(string providerName);\n    }\n\n    public class PaymentProviderFactory : IPaymentProviderFactory\n    {\n        private readonly IEnumerable<IPaymentProvider> _providers;\n\n        public PaymentProviderFactory(IEnumerable<IPaymentProvider> providers)\n        {\n            _providers = providers;\n        }\n\n        public IPaymentProvider GetProvider(string providerName)\n        {\n            var provider = _providers.FirstOrDefault(p => p.ProviderName.Equals(providerName, StringComparison.OrdinalIgnoreCase));\n            if (provider == null)\n            {\n                throw new ArgumentException($\"Payment provider not supported: {providerName}\");\n            }\n            return provider;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "74f27484-d395-499f-ae02-e051b995951a",
        "Name": "Models",
        "ParentId": "8703fe11-5e85-4c3a-8c26-b57dfb14bc7f",
        "Type": 0,
        "Items": [
          {
            "Id": "3f89b3a3-8e28-41e3-99c5-741ceec49e0c",
            "Name": "PaymentRequest.cs",
            "ParentId": "74f27484-d395-499f-ae02-e051b995951a",
            "Type": 1,
            "Text": "namespace ExternalPaymentConnector.Models\n{\n    public class PaymentRequest\n    {\n        public string PaymentId { get; set; }\n        public decimal Amount { get; set; }\n        public string Currency { get; set; }\n        public string Provider { get; set; } // Expected values: \"PayPal\" or \"Stripe\"\n        public string ReturnUrl { get; set; }\n        public string CancelUrl { get; set; }\n        public string CustomerId { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "6658d4b2-e628-4977-878c-b16f4a35f6a9",
            "Name": "PaymentResponse.cs",
            "ParentId": "74f27484-d395-499f-ae02-e051b995951a",
            "Type": 1,
            "Text": "namespace ExternalPaymentConnector.Models\n{\n    public class PaymentResponse\n    {\n        public string PaymentId { get; set; }\n        public bool IsSuccess { get; set; }\n        public string TransactionId { get; set; }\n        public string RedirectUrl { get; set; }\n        public string ErrorMessage { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e0a1a104-1385-448d-92c4-0d1a1553aed0",
            "Name": "PaymentCallbackRequest.cs",
            "ParentId": "74f27484-d395-499f-ae02-e051b995951a",
            "Type": 1,
            "Text": "namespace ExternalPaymentConnector.Models\n{\n    public class PaymentCallbackRequest\n    {\n        public string PaymentId { get; set; }\n        public string Provider { get; set; } // Expected values: \"PayPal\" or \"Stripe\"\n        public string TransactionId { get; set; }\n        public string Status { get; set; }\n        public string Signature { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "5027310c-92d2-4eb1-a4b9-8dff989b8d4b",
    "Name": "FinancialDataAggregator",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "3f1e084d-4074-4cea-ad92-ef114227bca9",
        "Name": "Program.cs",
        "ParentId": "5027310c-92d2-4eb1-a4b9-8dff989b8d4b",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing FinancialDataAggregator.Services;\nusing FinancialDataAggregator.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Register controllers and other services\nbuilder.Services.AddControllers();\n\n// Register HttpClient for external API calls\nbuilder.Services.AddHttpClient();\n\n// Register application services\nbuilder.Services.AddSingleton<IAggregatorService, AggregatorService>();\nbuilder.Services.AddSingleton<IExternalDataProvider, ExternalDataProvider>();\n\n// Register Swagger for API documentation\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment()) {\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();\n",
        "Language": 0
      },
      {
        "Id": "747fedf0-2667-40f1-a190-6aa0d91dad7d",
        "Name": "Controllers",
        "ParentId": "5027310c-92d2-4eb1-a4b9-8dff989b8d4b",
        "Type": 0,
        "Items": [
          {
            "Id": "e037388f-6aad-49ce-81cb-0693ef14e79e",
            "Name": "AggregatorController.cs",
            "ParentId": "747fedf0-2667-40f1-a190-6aa0d91dad7d",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing FinancialDataAggregator.Models;\nusing FinancialDataAggregator.Services;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace FinancialDataAggregator.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class AggregatorController : ControllerBase\n    {\n        private readonly IAggregatorService _aggregatorService;\n\n        public AggregatorController(IAggregatorService aggregatorService)\n        {\n            _aggregatorService = aggregatorService;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAggregatedData([FromQuery] string symbol)\n        {\n            if (string.IsNullOrWhiteSpace(symbol))\n            {\n                return BadRequest(\"Symbol is required.\");\n            }\n\n            AggregatedData aggregatedData = await _aggregatorService.AggregateMarketDataAsync(symbol);\n            return Ok(aggregatedData);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "7c8a9f33-a0c3-422a-b673-ab52f5531dbb",
        "Name": "Services",
        "ParentId": "5027310c-92d2-4eb1-a4b9-8dff989b8d4b",
        "Type": 0,
        "Items": [
          {
            "Id": "5d86b6c4-0a44-4973-b5f4-2b23aea7d686",
            "Name": "IAggregatorService.cs",
            "ParentId": "7c8a9f33-a0c3-422a-b673-ab52f5531dbb",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing FinancialDataAggregator.Models;\n\nnamespace FinancialDataAggregator.Services\n{\n    public interface IAggregatorService\n    {\n        Task<AggregatedData> AggregateMarketDataAsync(string symbol);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "b366a231-311c-4342-b3f8-30fa3a5c7210",
            "Name": "AggregatorService.cs",
            "ParentId": "7c8a9f33-a0c3-422a-b673-ab52f5531dbb",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing FinancialDataAggregator.Infrastructure;\nusing FinancialDataAggregator.Models;\nusing Microsoft.Extensions.Logging;\n\nnamespace FinancialDataAggregator.Services\n{\n    public class AggregatorService : IAggregatorService\n    {\n        private readonly IExternalDataProvider _externalDataProvider;\n        private readonly ILogger<AggregatorService> _logger;\n\n        public AggregatorService(IExternalDataProvider externalDataProvider, ILogger<AggregatorService> logger)\n        {\n            _externalDataProvider = externalDataProvider;\n            _logger = logger;\n        }\n\n        public async Task<AggregatedData> AggregateMarketDataAsync(string symbol)\n        {\n            try\n            {\n                List<MarketData> marketDataList = await _externalDataProvider.GetMarketDataAsync(symbol);\n                if (marketDataList == null || marketDataList.Count == 0)\n                {\n                    throw new Exception($\"No market data available for symbol {symbol}.\");\n                }\n\n                // Compute the average price across different data points\n                decimal averagePrice = marketDataList.Average(data => data.Price);\n\n                var aggregatedData = new AggregatedData\n                {\n                    Symbol = symbol,\n                    AveragePrice = averagePrice,\n                    DataPointCount = marketDataList.Count,\n                    AggregationTimestamp = DateTime.UtcNow,\n                    MarketData = marketDataList\n                };\n\n                return aggregatedData;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error aggregating data for symbol {Symbol}\", symbol);\n                throw;\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "9ac7a18e-e61f-499a-8260-fb9aa185ac90",
        "Name": "Models",
        "ParentId": "5027310c-92d2-4eb1-a4b9-8dff989b8d4b",
        "Type": 0,
        "Items": [
          {
            "Id": "ecafe09b-56fb-41a6-9915-a49143911688",
            "Name": "MarketData.cs",
            "ParentId": "9ac7a18e-e61f-499a-8260-fb9aa185ac90",
            "Type": 1,
            "Text": "using System;\n\nnamespace FinancialDataAggregator.Models\n{\n    public class MarketData\n    {\n        public string Symbol { get; set; }\n        public decimal Price { get; set; }\n        public DateTime Timestamp { get; set; }\n        public string Source { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "080d967e-5b5c-4c2e-a36e-f4e3f7ba4487",
            "Name": "AggregatedData.cs",
            "ParentId": "9ac7a18e-e61f-499a-8260-fb9aa185ac90",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\n\nnamespace FinancialDataAggregator.Models\n{\n    public class AggregatedData\n    {\n        public string Symbol { get; set; }\n        public decimal AveragePrice { get; set; }\n        public int DataPointCount { get; set; }\n        public DateTime AggregationTimestamp { get; set; }\n        public List<MarketData> MarketData { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "34cc9bc2-e32b-4256-8a23-652ac5f6cd14",
        "Name": "Infrastructure",
        "ParentId": "5027310c-92d2-4eb1-a4b9-8dff989b8d4b",
        "Type": 0,
        "Items": [
          {
            "Id": "17cb616a-fd1b-4f10-85f8-02d31fb93d3c",
            "Name": "IExternalDataProvider.cs",
            "ParentId": "34cc9bc2-e32b-4256-8a23-652ac5f6cd14",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing FinancialDataAggregator.Models;\n\nnamespace FinancialDataAggregator.Infrastructure\n{\n    public interface IExternalDataProvider\n    {\n        Task<List<MarketData>> GetMarketDataAsync(string symbol);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "d69b355b-c0cb-48a2-bf4a-a17b656abfec",
            "Name": "ExternalDataProvider.cs",
            "ParentId": "34cc9bc2-e32b-4256-8a23-652ac5f6cd14",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing FinancialDataAggregator.Models;\nusing Microsoft.Extensions.Logging;\n\nnamespace FinancialDataAggregator.Infrastructure\n{\n    public class ExternalDataProvider : IExternalDataProvider\n    {\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<ExternalDataProvider> _logger;\n\n        public ExternalDataProvider(IHttpClientFactory httpClientFactory, ILogger<ExternalDataProvider> logger)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n            _logger = logger;\n        }\n\n        public async Task<List<MarketData>> GetMarketDataAsync(string symbol)\n        {\n            var marketData = new List<MarketData>();\n\n            // Define external API endpoints for financial market data\n            var endpoints = new List<string>\n            {\n                $\"https://api.provider1.com/marketdata?symbol={symbol}\",\n                $\"https://api.provider2.com/quotes?symbol={symbol}\"\n            };\n\n            foreach (var endpoint in endpoints)\n            {\n                try\n                {\n                    var response = await _httpClient.GetAsync(endpoint);\n                    response.EnsureSuccessStatusCode();\n                    \n                    var content = await response.Content.ReadAsStringAsync();\n                    // Deserialize the response into MarketData. Assumes the API returns a JSON object matching MarketData.\n                    MarketData data = JsonSerializer.Deserialize<MarketData>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n                    if (data != null)\n                    {\n                        data.Source = new Uri(endpoint).Host;\n                        marketData.Add(data);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"Failed to retrieve data from {Endpoint}\", endpoint);\n                }\n            }\n\n            return marketData;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "ed9d4711-0b3b-46de-b698-874a4338e5e7",
    "Name": "SMSNotificationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "d0c77adb-9305-423e-b374-64e8b9c5a8b4",
        "Name": "Program.cs",
        "ParentId": "ed9d4711-0b3b-46de-b698-874a4338e5e7",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing SMSNotificationService.Services;\nusing SMSNotificationService.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddControllers();\nbuilder.Services.AddHttpClient();\nbuilder.Services.AddScoped<ISMSService, SMSService>();\nbuilder.Services.AddScoped<ISMSAdapter, SMSAdapter>();\n\nvar app = builder.Build();\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "d99e0dc3-df38-45ef-8668-2f6b5bfcbba0",
        "Name": "Controllers",
        "ParentId": "ed9d4711-0b3b-46de-b698-874a4338e5e7",
        "Type": 0,
        "Items": [
          {
            "Id": "a908f00b-5a4d-4421-af91-f968feb8a516",
            "Name": "SMSController.cs",
            "ParentId": "d99e0dc3-df38-45ef-8668-2f6b5bfcbba0",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing SMSNotificationService.Models;\nusing SMSNotificationService.Services;\n\nnamespace SMSNotificationService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class SMSController : ControllerBase\n    {\n        private readonly ISMSService _smsService;\n        private readonly ILogger<SMSController> _logger;\n\n        public SMSController(ISMSService smsService, ILogger<SMSController> logger)\n        {\n            _smsService = smsService;\n            _logger = logger;\n        }\n\n        [HttpPost(\"send\")]\n        public async Task<IActionResult> SendSms([FromBody] SMSRequest request)\n        {\n            if (request == null || string.IsNullOrWhiteSpace(request.PhoneNumber) || string.IsNullOrWhiteSpace(request.Message))\n            {\n                return BadRequest(\"Invalid SMS request payload.\");\n            }\n\n            var response = await _smsService.SendSMSAsync(request);\n            if (response.Success)\n            {\n                return Ok(response);\n            }\n            else\n            {\n                _logger.LogError($\"Failed to send SMS: {response.StatusMessage}\");\n                return StatusCode(500, response);\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "43da3734-c010-475c-a1b0-d92789592ca1",
        "Name": "Services",
        "ParentId": "ed9d4711-0b3b-46de-b698-874a4338e5e7",
        "Type": 0,
        "Items": [
          {
            "Id": "bdc4dfe3-1750-4ec7-bdf3-9207666e1996",
            "Name": "ISMSService.cs",
            "ParentId": "43da3734-c010-475c-a1b0-d92789592ca1",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing SMSNotificationService.Models;\n\nnamespace SMSNotificationService.Services\n{\n    public interface ISMSService\n    {\n        Task<SMSResponse> SendSMSAsync(SMSRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "9af8467b-77d1-4965-b6e9-ccefdfb0d26f",
            "Name": "SMSService.cs",
            "ParentId": "43da3734-c010-475c-a1b0-d92789592ca1",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing SMSNotificationService.Infrastructure;\nusing SMSNotificationService.Models;\n\nnamespace SMSNotificationService.Services\n{\n    public class SMSService : ISMSService\n    {\n        private readonly ISMSAdapter _smsAdapter;\n        private readonly ILogger<SMSService> _logger;\n\n        public SMSService(ISMSAdapter smsAdapter, ILogger<SMSService> logger)\n        {\n            _smsAdapter = smsAdapter;\n            _logger = logger;\n        }\n\n        public async Task<SMSResponse> SendSMSAsync(SMSRequest request)\n        {\n            // Validate phone number format and message content length\n            if (string.IsNullOrWhiteSpace(request.PhoneNumber) || request.PhoneNumber.Length < 10)\n            {\n                return new SMSResponse\n                {\n                    Success = false,\n                    StatusMessage = \"Invalid phone number format.\"\n                };\n            }\n\n            if (string.IsNullOrWhiteSpace(request.Message) || request.Message.Length > 160)\n            {\n                return new SMSResponse\n                {\n                    Success = false,\n                    StatusMessage = \"Message content must be between 1 and 160 characters.\"\n                };\n            }\n\n            try\n            {\n                // Send SMS using external adapter\n                var response = await _smsAdapter.SendSmsAsync(request);\n                return response;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error occurred while sending SMS.\");\n                return new SMSResponse\n                {\n                    Success = false,\n                    StatusMessage = \"An error occurred while processing the SMS request.\"\n                };\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "a5ae946b-6703-40dd-aaae-423a32d72ff1",
        "Name": "Models",
        "ParentId": "ed9d4711-0b3b-46de-b698-874a4338e5e7",
        "Type": 0,
        "Items": [
          {
            "Id": "fce32043-a6e7-4979-ab71-2533d69ae3e3",
            "Name": "SMSRequest.cs",
            "ParentId": "a5ae946b-6703-40dd-aaae-423a32d72ff1",
            "Type": 1,
            "Text": "namespace SMSNotificationService.Models\n{\n    public class SMSRequest\n    {\n        public string PhoneNumber { get; set; }\n        public string Message { get; set; }\n        // Optional: Reference ID for tracking transactional updates\n        public string TransactionId { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "d110862a-0ea4-42ea-a04f-64d631081d39",
            "Name": "SMSResponse.cs",
            "ParentId": "a5ae946b-6703-40dd-aaae-423a32d72ff1",
            "Type": 1,
            "Text": "namespace SMSNotificationService.Models\n{\n    public class SMSResponse\n    {\n        public bool Success { get; set; }\n        public string StatusMessage { get; set; }\n        // Additional fields such as external provider response code can be added if needed\n        public string ProviderResponseCode { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "435dd4a1-4767-4b24-a3fc-cd1806599cfa",
        "Name": "Infrastructure",
        "ParentId": "ed9d4711-0b3b-46de-b698-874a4338e5e7",
        "Type": 0,
        "Items": [
          {
            "Id": "0e7b239d-62f8-4fba-ac71-01d7f84228b3",
            "Name": "ISMSAdapter.cs",
            "ParentId": "435dd4a1-4767-4b24-a3fc-cd1806599cfa",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing SMSNotificationService.Models;\n\nnamespace SMSNotificationService.Infrastructure\n{\n    public interface ISMSAdapter\n    {\n        Task<SMSResponse> SendSmsAsync(SMSRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "7894d73d-2c11-4490-9615-ff104a44823d",
            "Name": "SMSAdapter.cs",
            "ParentId": "435dd4a1-4767-4b24-a3fc-cd1806599cfa",
            "Type": 1,
            "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing SMSNotificationService.Models;\n\nnamespace SMSNotificationService.Infrastructure\n{\n    public class SMSAdapter : ISMSAdapter\n    {\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<SMSAdapter> _logger;\n\n        public SMSAdapter(IHttpClientFactory httpClientFactory, ILogger<SMSAdapter> logger)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n            _logger = logger;\n        }\n\n        public async Task<SMSResponse> SendSmsAsync(SMSRequest request)\n        {\n            // Construct payload for external SMS provider\n            var payload = new\n            {\n                to = request.PhoneNumber,\n                message = request.Message,\n                transactionId = request.TransactionId\n            };\n\n            var jsonPayload = JsonSerializer.Serialize(payload);\n            var content = new StringContent(jsonPayload, Encoding.UTF8, \"application/json\");\n\n            // URL of external SMS provider\n            var smsProviderUrl = \"https://api.smsprovider.com/send\";\n\n            try\n            {\n                var httpResponse = await _httpClient.PostAsync(smsProviderUrl, content);\n                var responseContent = await httpResponse.Content.ReadAsStringAsync();\n\n                if (!httpResponse.IsSuccessStatusCode)\n                {\n                    _logger.LogError($\"SMS provider returned status code {httpResponse.StatusCode} with message: {responseContent}\");\n                    return new SMSResponse\n                    {\n                        Success = false,\n                        StatusMessage = \"Failed to send SMS via provider.\",\n                        ProviderResponseCode = httpResponse.StatusCode.ToString()\n                    };\n                }\n\n                // Assume provider returns JSON with success status and additional info\n                var providerResponse = JsonSerializer.Deserialize<SMSResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n                if (providerResponse == null)\n                {\n                    return new SMSResponse\n                    {\n                        Success = false,\n                        StatusMessage = \"Invalid response from SMS provider.\"\n                    };\n                }\n                \n                return providerResponse;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Exception occurred while calling external SMS provider.\");\n                throw new Exception(\"Error communicating with SMS provider.\");\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "9ef36649-c7de-4a84-a7ea-9471f3bc4cd3",
    "Name": "EmailNotificationSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "9b5efcf0-3bb1-447d-b03a-1ff81e070e98",
        "Name": "Program.cs",
        "ParentId": "9ef36649-c7de-4a84-a7ea-9471f3bc4cd3",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing EmailNotificationSystem.Services;\nusing EmailNotificationSystem.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IEmailService, EmailService>();\nbuilder.Services.AddSingleton<IEmailLogger, EmailLogger>();\nbuilder.Services.Configure<EmailNotificationSystem.Models.SmtpSettings>(builder.Configuration.GetSection(\"SmtpSettings\"));\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline\napp.UseRouting();\napp.UseEndpoints(endpoints => { endpoints.MapControllers(); });\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "f2a76339-f4ba-4ae1-8fc4-b9ef6d63edd2",
        "Name": "Controllers",
        "ParentId": "9ef36649-c7de-4a84-a7ea-9471f3bc4cd3",
        "Type": 0,
        "Items": [
          {
            "Id": "d6c88fd0-9eeb-4570-a2cc-dfc3566f58ff",
            "Name": "EmailNotificationController.cs",
            "ParentId": "f2a76339-f4ba-4ae1-8fc4-b9ef6d63edd2",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing EmailNotificationSystem.Services;\nusing EmailNotificationSystem.Models;\n\nnamespace EmailNotificationSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class EmailNotificationController : ControllerBase\n    {\n        private readonly IEmailService _emailService;\n        private readonly Infrastructure.IEmailLogger _emailLogger;\n\n        public EmailNotificationController(IEmailService emailService, Infrastructure.IEmailLogger emailLogger)\n        {\n            _emailService = emailService;\n            _emailLogger = emailLogger;\n        }\n\n        [HttpPost(\"send\")]\n        public async Task<IActionResult> SendEmail([FromBody] EmailNotificationRequest request)\n        {\n            try\n            {\n                var result = await _emailService.SendEmailAsync(request);\n                _emailLogger.LogInfo($\"Email sent to {request.To} with subject {request.Subject}\");\n                return Ok(new EmailNotificationResponse \n                { \n                    Success = result \n                });\n            }\n            catch (System.Exception ex)\n            {\n                _emailLogger.LogError($\"Error sending email to {request.To}\", ex);\n                return StatusCode(500, new EmailNotificationResponse \n                { \n                    Success = false, \n                    Error = ex.Message \n                });\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "0c37fa0d-fb38-4792-9aae-34c2ffb7c441",
        "Name": "Services",
        "ParentId": "9ef36649-c7de-4a84-a7ea-9471f3bc4cd3",
        "Type": 0,
        "Items": [
          {
            "Id": "11eaabbc-ae77-4109-a714-5f158bd394c7",
            "Name": "IEmailService.cs",
            "ParentId": "0c37fa0d-fb38-4792-9aae-34c2ffb7c441",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing EmailNotificationSystem.Models;\n\nnamespace EmailNotificationSystem.Services\n{\n    public interface IEmailService\n    {\n        Task<bool> SendEmailAsync(EmailNotificationRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "4bb1e072-05ee-4bf7-aee5-27d46fa1583a",
            "Name": "EmailService.cs",
            "ParentId": "0c37fa0d-fb38-4792-9aae-34c2ffb7c441",
            "Type": 1,
            "Text": "using System.Net;\nusing System.Net.Mail;\nusing System.Threading.Tasks;\nusing EmailNotificationSystem.Models;\nusing Microsoft.Extensions.Options;\n\nnamespace EmailNotificationSystem.Services\n{\n    public class EmailService : IEmailService\n    {\n        private readonly SmtpSettings _smtpSettings;\n\n        public EmailService(IOptions<SmtpSettings> smtpOptions)\n        {\n            _smtpSettings = smtpOptions.Value;\n        }\n\n        public async Task<bool> SendEmailAsync(EmailNotificationRequest request)\n        {\n            using (var client = new SmtpClient(_smtpSettings.Host, _smtpSettings.Port))\n            {\n                client.EnableSsl = _smtpSettings.EnableSsl;\n                client.Credentials = new NetworkCredential(_smtpSettings.Username, _smtpSettings.Password);\n\n                var mailMessage = new MailMessage\n                {\n                    From = new MailAddress(_smtpSettings.FromAddress),\n                    Subject = request.Subject,\n                    Body = request.Body,\n                    IsBodyHtml = true\n                };\n                mailMessage.To.Add(request.To);\n\n                await client.SendMailAsync(mailMessage);\n                return true;\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "a2910b2c-6bfb-48b4-a9af-a2a1c433fcab",
        "Name": "Models",
        "ParentId": "9ef36649-c7de-4a84-a7ea-9471f3bc4cd3",
        "Type": 0,
        "Items": [
          {
            "Id": "35359172-b44d-4f68-8a95-a9809a2fa9f8",
            "Name": "EmailNotificationRequest.cs",
            "ParentId": "a2910b2c-6bfb-48b4-a9af-a2a1c433fcab",
            "Type": 1,
            "Text": "namespace EmailNotificationSystem.Models\n{\n    public class EmailNotificationRequest\n    {\n        public string To { get; set; }\n        public string Subject { get; set; }\n        public string Body { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "1717f530-f22e-4433-b713-8d393f4b1f0c",
            "Name": "EmailNotificationResponse.cs",
            "ParentId": "a2910b2c-6bfb-48b4-a9af-a2a1c433fcab",
            "Type": 1,
            "Text": "namespace EmailNotificationSystem.Models\n{\n    public class EmailNotificationResponse\n    {\n        public bool Success { get; set; }\n        public string Error { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "aa0a75f7-5633-4403-9c37-dcd163b66fb5",
            "Name": "SmtpSettings.cs",
            "ParentId": "a2910b2c-6bfb-48b4-a9af-a2a1c433fcab",
            "Type": 1,
            "Text": "namespace EmailNotificationSystem.Models\n{\n    public class SmtpSettings\n    {\n        public string Host { get; set; }\n        public int Port { get; set; }\n        public bool EnableSsl { get; set; }\n        public string Username { get; set; }\n        public string Password { get; set; }\n        public string FromAddress { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "07396023-2d58-4744-99fd-bd8405550ed7",
        "Name": "Infrastructure",
        "ParentId": "9ef36649-c7de-4a84-a7ea-9471f3bc4cd3",
        "Type": 0,
        "Items": [
          {
            "Id": "e83a9b4f-0511-4a0d-b027-4163c4bbc33f",
            "Name": "EmailLogger.cs",
            "ParentId": "07396023-2d58-4744-99fd-bd8405550ed7",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace EmailNotificationSystem.Infrastructure\n{\n    public interface IEmailLogger\n    {\n        void LogInfo(string message);\n        void LogError(string message, Exception ex);\n    }\n\n    public class EmailLogger : IEmailLogger\n    {\n        private readonly ILogger<EmailLogger> _logger;\n\n        public EmailLogger(ILogger<EmailLogger> logger)\n        {\n            _logger = logger;\n        }\n\n        public void LogInfo(string message)\n        {\n            _logger.LogInformation(message);\n        }\n\n        public void LogError(string message, Exception ex)\n        {\n            _logger.LogError(ex, message);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "0451acee-099c-49ad-b067-ad915efb1e7d",
    "Name": "PushNotificationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "9dc4562a-5996-48fe-a94f-b2453117ea62",
        "Name": "Program.cs",
        "ParentId": "0451acee-099c-49ad-b067-ad915efb1e7d",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing PushNotificationService.Services;\nusing PushNotificationService.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddHttpClient();\nbuilder.Services.AddSingleton<INotificationService, NotificationService>();\nbuilder.Services.AddSingleton<IPushNotificationProvider, FirebasePushNotificationProvider>();\n\nvar app = builder.Build();\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "b91b9673-9a2e-4a08-9940-6b08b35c0fb8",
        "Name": "Controllers",
        "ParentId": "0451acee-099c-49ad-b067-ad915efb1e7d",
        "Type": 0,
        "Items": [
          {
            "Id": "45caa10b-bbd2-4a9c-a644-135d025ea152",
            "Name": "NotificationController.cs",
            "ParentId": "b91b9673-9a2e-4a08-9940-6b08b35c0fb8",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing PushNotificationService.Models;\nusing PushNotificationService.Services;\n\nnamespace PushNotificationService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class NotificationController : ControllerBase\n    {\n        private readonly INotificationService _notificationService;\n        \n        public NotificationController(INotificationService notificationService)\n        {\n            _notificationService = notificationService;\n        }\n        \n        [HttpPost(\"send\")]\n        public async Task<IActionResult> SendNotification([FromBody] NotificationRequest request)\n        {\n            var response = await _notificationService.SendNotificationAsync(request);\n            if(response.Success)\n            {\n                return Ok(response);\n            }\n            return StatusCode(500, response);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "252be5a0-0132-40e1-b1e9-52eada686f66",
        "Name": "Services",
        "ParentId": "0451acee-099c-49ad-b067-ad915efb1e7d",
        "Type": 0,
        "Items": [
          {
            "Id": "d5edccb1-f1da-4ffa-906e-ed37b871f9b6",
            "Name": "INotificationService.cs",
            "ParentId": "252be5a0-0132-40e1-b1e9-52eada686f66",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing PushNotificationService.Models;\n\nnamespace PushNotificationService.Services\n{\n    public interface INotificationService\n    {\n        Task<NotificationResponse> SendNotificationAsync(NotificationRequest request);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "b173c22b-9f29-4988-a013-b843835e51cc",
            "Name": "NotificationService.cs",
            "ParentId": "252be5a0-0132-40e1-b1e9-52eada686f66",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing PushNotificationService.Models;\nusing PushNotificationService.Infrastructure;\n\nnamespace PushNotificationService.Services\n{\n    public class NotificationService : INotificationService\n    {\n        private readonly IPushNotificationProvider _pushNotificationProvider;\n        \n        public NotificationService(IPushNotificationProvider pushNotificationProvider)\n        {\n            _pushNotificationProvider = pushNotificationProvider;\n        }\n        \n        public async Task<NotificationResponse> SendNotificationAsync(NotificationRequest request)\n        {\n            bool isSent = await _pushNotificationProvider.SendPushNotificationAsync(request);\n            return new NotificationResponse\n            {\n                Success = isSent,\n                Message = isSent ? \"Notification sent successfully.\" : \"Failed to send notification.\"\n            };\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "ae30b0af-03e3-4f39-9a98-c7415f92c2b1",
        "Name": "Models",
        "ParentId": "0451acee-099c-49ad-b067-ad915efb1e7d",
        "Type": 0,
        "Items": [
          {
            "Id": "cd13e109-a27a-4d71-a987-655809e8b82f",
            "Name": "NotificationRequest.cs",
            "ParentId": "ae30b0af-03e3-4f39-9a98-c7415f92c2b1",
            "Type": 1,
            "Text": "namespace PushNotificationService.Models\n{\n    public class NotificationRequest\n    {\n        public string DeviceToken { get; set; }\n        public string Title { get; set; }\n        public string Message { get; set; }\n        public int Priority { get; set; } // 1 for high priority, others for normal\n    }\n}",
            "Language": 0
          },
          {
            "Id": "e56c2403-fe87-40cc-8f10-4715423679c9",
            "Name": "NotificationResponse.cs",
            "ParentId": "ae30b0af-03e3-4f39-9a98-c7415f92c2b1",
            "Type": 1,
            "Text": "namespace PushNotificationService.Models\n{\n    public class NotificationResponse\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "43d3a95a-0bb3-4480-ac11-7dbb9b29fab4",
        "Name": "Infrastructure",
        "ParentId": "0451acee-099c-49ad-b067-ad915efb1e7d",
        "Type": 0,
        "Items": [
          {
            "Id": "cb7b0ca6-60ff-4666-a609-a842e291b629",
            "Name": "IPushNotificationProvider.cs",
            "ParentId": "43d3a95a-0bb3-4480-ac11-7dbb9b29fab4",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing PushNotificationService.Models;\n\nnamespace PushNotificationService.Infrastructure\n{\n    public interface IPushNotificationProvider\n    {\n        Task<bool> SendPushNotificationAsync(NotificationRequest request);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "6d8994ba-0e6e-4d78-bc77-bca63a05a29b",
            "Name": "FirebasePushNotificationProvider.cs",
            "ParentId": "43d3a95a-0bb3-4480-ac11-7dbb9b29fab4",
            "Type": 1,
            "Text": "using System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\nusing PushNotificationService.Models;\n\nnamespace PushNotificationService.Infrastructure\n{\n    public class FirebasePushNotificationProvider : IPushNotificationProvider\n    {\n        private readonly HttpClient _httpClient;\n        private const string FirebaseEndpoint = \"https://fcm.googleapis.com/fcm/send\";\n        // The server key should be securely stored in configuration settings or environment variables\n        private const string ServerKey = \"YOUR_FIREBASE_SERVER_KEY\";\n        \n        public FirebasePushNotificationProvider(IHttpClientFactory httpClientFactory)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n        }\n        \n        public async Task<bool> SendPushNotificationAsync(NotificationRequest request)\n        {\n            var payload = new\n            {\n                to = request.DeviceToken,\n                priority = request.Priority == 1 ? \"high\" : \"normal\",\n                notification = new\n                {\n                    title = request.Title,\n                    body = request.Message\n                }\n            };\n            \n            var httpRequest = new HttpRequestMessage(HttpMethod.Post, FirebaseEndpoint);\n            httpRequest.Headers.TryAddWithoutValidation(\"Authorization\", $\"key={ServerKey}\");\n            httpRequest.Content = JsonContent.Create(payload);\n            \n            var response = await _httpClient.SendAsync(httpRequest);\n            if(response.IsSuccessStatusCode)\n            {\n                // In a production scenario, additional response validation should be performed\n                return true;\n            }\n            return false;\n        }\n    }\n}",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "4eeb891e-e821-485d-9ef3-135a48a436e6",
    "Name": "CentralizedLoggingService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "201bb587-7ac6-48b0-bc24-89c1063fef82",
        "Name": "Program.cs",
        "ParentId": "4eeb891e-e821-485d-9ef3-135a48a436e6",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace CentralizedLoggingService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "0ed44c97-a6fc-481d-9bf4-3662d4f76d49",
        "Name": "Startup.cs",
        "ParentId": "4eeb891e-e821-485d-9ef3-135a48a436e6",
        "Type": 1,
        "Text": "using CentralizedLoggingService.Infrastructure;\nusing CentralizedLoggingService.Services;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace CentralizedLoggingService\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<ILogRepository, LogRepository>();\n            services.AddSingleton<ILoggingService, LoggingService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "91ebd184-97b7-406f-8ca0-9df8c7fe294f",
        "Name": "Controllers",
        "ParentId": "4eeb891e-e821-485d-9ef3-135a48a436e6",
        "Type": 0,
        "Items": [
          {
            "Id": "23ed5a43-9821-474d-a8ce-1ae9e8ca479e",
            "Name": "LoggingController.cs",
            "ParentId": "91ebd184-97b7-406f-8ca0-9df8c7fe294f",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing CentralizedLoggingService.Models;\nusing CentralizedLoggingService.Services;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace CentralizedLoggingService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class LoggingController : ControllerBase\n    {\n        private readonly ILoggingService _loggingService;\n\n        public LoggingController(ILoggingService loggingService)\n        {\n            _loggingService = loggingService;\n        }\n\n        [HttpPost(\"ingest\")]\n        public async Task<IActionResult> IngestLog([FromBody] LogEntry logEntry)\n        {\n            if (logEntry == null)\n            {\n                return BadRequest(\"LogEntry cannot be null.\");\n            }\n            await _loggingService.AggregateLogAsync(logEntry);\n            return Ok(new { success = true });\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetLogs([FromQuery] string serviceName = null, [FromQuery] DateTime? from = null, [FromQuery] DateTime? to = null)\n        {\n            var logs = await _loggingService.GetLogsAsync(serviceName, from, to);\n            return Ok(logs);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "b72111c8-7007-47d9-9b67-7cdafb342a1b",
        "Name": "Services",
        "ParentId": "4eeb891e-e821-485d-9ef3-135a48a436e6",
        "Type": 0,
        "Items": [
          {
            "Id": "125d63a3-1b77-489d-a777-656b5fcf90a6",
            "Name": "ILoggingService.cs",
            "ParentId": "b72111c8-7007-47d9-9b67-7cdafb342a1b",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing CentralizedLoggingService.Models;\n\nnamespace CentralizedLoggingService.Services\n{\n    public interface ILoggingService\n    {\n        Task AggregateLogAsync(LogEntry logEntry);\n        Task<IEnumerable<LogEntry>> GetLogsAsync(string serviceName, DateTime? from, DateTime? to);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "851ed6d9-8768-4143-a547-d7f16b469d7e",
            "Name": "LoggingService.cs",
            "ParentId": "b72111c8-7007-47d9-9b67-7cdafb342a1b",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing CentralizedLoggingService.Infrastructure;\nusing CentralizedLoggingService.Models;\n\nnamespace CentralizedLoggingService.Services\n{\n    public class LoggingService : ILoggingService\n    {\n        private readonly ILogRepository _logRepository;\n\n        public LoggingService(ILogRepository logRepository)\n        {\n            _logRepository = logRepository;\n        }\n\n        public async Task AggregateLogAsync(LogEntry logEntry)\n        {\n            if (string.IsNullOrWhiteSpace(logEntry.ServiceName))\n            {\n                throw new ArgumentException(\"ServiceName cannot be null or empty.\");\n            }\n            if (string.IsNullOrWhiteSpace(logEntry.Message))\n            {\n                throw new ArgumentException(\"Message cannot be null or empty.\");\n            }\n            logEntry.Timestamp = DateTime.UtcNow;\n            await _logRepository.AddLogAsync(logEntry);\n        }\n\n        public async Task<IEnumerable<LogEntry>> GetLogsAsync(string serviceName, DateTime? from, DateTime? to)\n        {\n            var allLogs = await _logRepository.GetAllLogsAsync();\n\n            if (!string.IsNullOrWhiteSpace(serviceName))\n            {\n                allLogs = allLogs.Where(log => log.ServiceName.Equals(serviceName, StringComparison.OrdinalIgnoreCase));\n            }\n            if (from.HasValue)\n            {\n                allLogs = allLogs.Where(log => log.Timestamp >= from.Value);\n            }\n            if (to.HasValue)\n            {\n                allLogs = allLogs.Where(log => log.Timestamp <= to.Value);\n            }\n            return allLogs.OrderByDescending(log => log.Timestamp);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "843e8702-ccd5-42f8-9254-36407e2f0d20",
        "Name": "Models",
        "ParentId": "4eeb891e-e821-485d-9ef3-135a48a436e6",
        "Type": 0,
        "Items": [
          {
            "Id": "8dfdcfd5-0f69-4147-bc84-f4ee11b779eb",
            "Name": "LogEntry.cs",
            "ParentId": "843e8702-ccd5-42f8-9254-36407e2f0d20",
            "Type": 1,
            "Text": "using System;\n\nnamespace CentralizedLoggingService.Models\n{\n    public class LogEntry\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n        public string ServiceName { get; set; }\n        public string LogLevel { get; set; } // e.g., Info, Warning, Error\n        public string Message { get; set; }\n        public DateTime Timestamp { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "19b70ccb-5ada-4537-9e2c-24cd2010917d",
        "Name": "Infrastructure",
        "ParentId": "4eeb891e-e821-485d-9ef3-135a48a436e6",
        "Type": 0,
        "Items": [
          {
            "Id": "65af221a-7d47-430f-aa61-9c5b9389ec78",
            "Name": "ILogRepository.cs",
            "ParentId": "19b70ccb-5ada-4537-9e2c-24cd2010917d",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing CentralizedLoggingService.Models;\n\nnamespace CentralizedLoggingService.Infrastructure\n{\n    public interface ILogRepository\n    {\n        Task AddLogAsync(LogEntry logEntry);\n        Task<IEnumerable<LogEntry>> GetAllLogsAsync();\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "549a3324-6e41-4774-898f-54206ab8fa4e",
            "Name": "LogRepository.cs",
            "ParentId": "19b70ccb-5ada-4537-9e2c-24cd2010917d",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing CentralizedLoggingService.Models;\n\nnamespace CentralizedLoggingService.Infrastructure\n{\n    public class LogRepository : ILogRepository\n    {\n        private readonly string _logFilePath;\n        private readonly object _lock = new object();\n\n        public LogRepository()\n        {\n            _logFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"CentralizedLogs.jsonl\");\n            if (!File.Exists(_logFilePath))\n            {\n                using (var stream = File.Create(_logFilePath)) { }\n            }\n        }\n\n        public Task AddLogAsync(LogEntry logEntry)\n        {\n            return Task.Run(() =>\n            {\n                var json = JsonSerializer.Serialize(logEntry);\n                lock (_lock)\n                {\n                    File.AppendAllText(_logFilePath, json + Environment.NewLine);\n                }\n            });\n        }\n\n        public Task<IEnumerable<LogEntry>> GetAllLogsAsync()\n        {\n            return Task.Run(() =>\n            {\n                var logs = new List<LogEntry>();\n                lock (_lock)\n                {\n                    foreach (var line in File.ReadAllLines(_logFilePath))\n                    {\n                        if (!string.IsNullOrWhiteSpace(line))\n                        {\n                            var entry = JsonSerializer.Deserialize<LogEntry>(line);\n                            if (entry != null)\n                            {\n                                logs.Add(entry);\n                            }\n                        }\n                    }\n                }\n                return (IEnumerable<LogEntry>)logs;\n            });\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "7d099013-38a0-4170-ae78-046e87f523d4",
    "Name": "ConfigurationManager",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "328edf7b-d84b-4348-afbc-deb8c3e323f4",
        "Name": "Program.cs",
        "ParentId": "7d099013-38a0-4170-ae78-046e87f523d4",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ConfigurationManager\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "a6c8efa4-12df-4ff3-80cd-150f23a3cea1",
        "Name": "Startup.cs",
        "ParentId": "7d099013-38a0-4170-ae78-046e87f523d4",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing ConfigurationManager.Services;\nusing ConfigurationManager.Data;\n\nnamespace ConfigurationManager\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IConfigurationRepository, ConfigurationRepository>();\n            services.AddSingleton<IConfigurationService, ConfigurationService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "58cc2786-2d32-45f4-8ba7-ae75222981fd",
        "Name": "Controllers",
        "ParentId": "7d099013-38a0-4170-ae78-046e87f523d4",
        "Type": 0,
        "Items": [
          {
            "Id": "7cd21d1b-b556-42f6-86c0-567dfc333c65",
            "Name": "ConfigurationController.cs",
            "ParentId": "58cc2786-2d32-45f4-8ba7-ae75222981fd",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Collections.Generic;\nusing ConfigurationManager.Services;\nusing ConfigurationManager.Models;\n\nnamespace ConfigurationManager.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ConfigurationController : ControllerBase\n    {\n        private readonly IConfigurationService _configurationService;\n\n        public ConfigurationController(IConfigurationService configurationService)\n        {\n            _configurationService = configurationService;\n        }\n\n        [HttpGet]\n        public ActionResult<IEnumerable<ConfigurationItem>> GetAll()\n        {\n            var items = _configurationService.GetAllConfigurations();\n            return Ok(items);\n        }\n\n        [HttpGet(\"{key}\")]\n        public ActionResult<ConfigurationItem> Get(string key)\n        {\n            var item = _configurationService.GetConfiguration(key);\n            if (item == null)\n            {\n                return NotFound();\n            }\n            return Ok(item);\n        }\n\n        [HttpPost]\n        public ActionResult Set([FromBody] ConfigurationItem item)\n        {\n            try\n            {\n                _configurationService.SetConfiguration(item.Key, item.Value);\n                var updatedItem = _configurationService.GetConfiguration(item.Key);\n                return Ok(updatedItem);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { error = ex.Message });\n            }\n        }\n\n        [HttpDelete(\"{key}\")]\n        public ActionResult Delete(string key)\n        {\n            if (!_configurationService.DeleteConfiguration(key))\n            {\n                return NotFound();\n            }\n            return NoContent();\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "cb1bde69-9873-407e-acff-d9c07b5de353",
        "Name": "Services",
        "ParentId": "7d099013-38a0-4170-ae78-046e87f523d4",
        "Type": 0,
        "Items": [
          {
            "Id": "38b2b08a-bd3a-4eed-b611-8e464bbf634a",
            "Name": "IConfigurationService.cs",
            "ParentId": "cb1bde69-9873-407e-acff-d9c07b5de353",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing ConfigurationManager.Models;\n\nnamespace ConfigurationManager.Services\n{\n    public interface IConfigurationService\n    {\n        ConfigurationItem GetConfiguration(string key);\n        IEnumerable<ConfigurationItem> GetAllConfigurations();\n        void SetConfiguration(string key, string value);\n        bool DeleteConfiguration(string key);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "4cd3793e-2ec1-4a73-adac-72f78d85948e",
            "Name": "ConfigurationService.cs",
            "ParentId": "cb1bde69-9873-407e-acff-d9c07b5de353",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing ConfigurationManager.Models;\nusing ConfigurationManager.Data;\n\nnamespace ConfigurationManager.Services\n{\n    public class ConfigurationService : IConfigurationService\n    {\n        private readonly IConfigurationRepository _repository;\n\n        public ConfigurationService(IConfigurationRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public ConfigurationItem GetConfiguration(string key)\n        {\n            return _repository.GetConfiguration(key);\n        }\n\n        public IEnumerable<ConfigurationItem> GetAllConfigurations()\n        {\n            return _repository.GetAllConfigurations();\n        }\n\n        public void SetConfiguration(string key, string value)\n        {\n            if (string.IsNullOrWhiteSpace(key))\n            {\n                throw new ArgumentException(\"Configuration key must be provided.\");\n            }\n\n            var existingItem = _repository.GetConfiguration(key);\n            if (existingItem != null)\n            {\n                existingItem.Value = value;\n                existingItem.LastModified = DateTime.UtcNow;\n                _repository.UpdateConfiguration(existingItem);\n            }\n            else\n            {\n                var newItem = new ConfigurationItem\n                {\n                    Key = key,\n                    Value = value,\n                    LastModified = DateTime.UtcNow\n                };\n                _repository.AddConfiguration(newItem);\n            }\n        }\n\n        public bool DeleteConfiguration(string key)\n        {\n            return _repository.DeleteConfiguration(key);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "e1729397-8517-4ff0-945d-ac37999a0876",
        "Name": "Data",
        "ParentId": "7d099013-38a0-4170-ae78-046e87f523d4",
        "Type": 0,
        "Items": [
          {
            "Id": "fb332356-cff4-43e3-a9d1-8863b9605e3f",
            "Name": "IConfigurationRepository.cs",
            "ParentId": "e1729397-8517-4ff0-945d-ac37999a0876",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing ConfigurationManager.Models;\n\nnamespace ConfigurationManager.Data\n{\n    public interface IConfigurationRepository\n    {\n        ConfigurationItem GetConfiguration(string key);\n        IEnumerable<ConfigurationItem> GetAllConfigurations();\n        void AddConfiguration(ConfigurationItem item);\n        void UpdateConfiguration(ConfigurationItem item);\n        bool DeleteConfiguration(string key);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e0ae2b51-e229-486b-b669-e4072f839b4a",
            "Name": "ConfigurationRepository.cs",
            "ParentId": "e1729397-8517-4ff0-945d-ac37999a0876",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing ConfigurationManager.Models;\n\nnamespace ConfigurationManager.Data\n{\n    public class ConfigurationRepository : IConfigurationRepository\n    {\n        private readonly ConcurrentDictionary<string, ConfigurationItem> _store;\n\n        public ConfigurationRepository()\n        {\n            _store = new ConcurrentDictionary<string, ConfigurationItem>();\n        }\n\n        public ConfigurationItem GetConfiguration(string key)\n        {\n            _store.TryGetValue(key, out ConfigurationItem item);\n            return item;\n        }\n\n        public IEnumerable<ConfigurationItem> GetAllConfigurations()\n        {\n            return _store.Values;\n        }\n\n        public void AddConfiguration(ConfigurationItem item)\n        {\n            if (!_store.TryAdd(item.Key, item))\n            {\n                throw new Exception($\"A configuration with key '{item.Key}' already exists.\");\n            }\n        }\n\n        public void UpdateConfiguration(ConfigurationItem item)\n        {\n            _store[item.Key] = item;\n        }\n\n        public bool DeleteConfiguration(string key)\n        {\n            return _store.TryRemove(key, out _);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "1fbf7a2c-eb9d-45d3-8394-2c5ad7c7b702",
        "Name": "Models",
        "ParentId": "7d099013-38a0-4170-ae78-046e87f523d4",
        "Type": 0,
        "Items": [
          {
            "Id": "b500ecff-a5f4-4d87-8219-3046dafe2ac0",
            "Name": "ConfigurationItem.cs",
            "ParentId": "1fbf7a2c-eb9d-45d3-8394-2c5ad7c7b702",
            "Type": 1,
            "Text": "using System;\n\nnamespace ConfigurationManager.Models\n{\n    public class ConfigurationItem\n    {\n        public string Key { get; set; }\n        public string Value { get; set; }\n        public DateTime LastModified { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "397c271c-81bb-4e02-8d8b-295662f90486",
    "Name": "ServiceDiscoveryTool",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "8133c62d-4f77-475f-913c-565ff631ae4b",
        "Name": "Program.cs",
        "ParentId": "397c271c-81bb-4e02-8d8b-295662f90486",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ServiceDiscoveryTool\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "136b02ae-c2ad-415c-b7ee-b44df13f0b45",
        "Name": "Startup.cs",
        "ParentId": "397c271c-81bb-4e02-8d8b-295662f90486",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing ServiceDiscoveryTool.Services;\nusing ServiceDiscoveryTool.Infrastructure;\n\nnamespace ServiceDiscoveryTool\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IDiscoveryService, DiscoveryService>();\n            services.AddHostedService<ServiceHealthMonitor>();\n            services.AddLogging();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n            app.UseEndpoints(endpoints => { endpoints.MapControllers(); });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "5be5092b-b48d-4e5a-929c-dae187559e65",
        "Name": "Controllers",
        "ParentId": "397c271c-81bb-4e02-8d8b-295662f90486",
        "Type": 0,
        "Items": [
          {
            "Id": "c83d1a4d-edbe-4d78-903d-69db0718705a",
            "Name": "ServiceRegistryController.cs",
            "ParentId": "5be5092b-b48d-4e5a-929c-dae187559e65",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.AspNetCore.Mvc;\nusing ServiceDiscoveryTool.Models;\nusing ServiceDiscoveryTool.Services;\n\nnamespace ServiceDiscoveryTool.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ServiceRegistryController : ControllerBase\n    {\n        private readonly IDiscoveryService _discoveryService;\n\n        public ServiceRegistryController(IDiscoveryService discoveryService)\n        {\n            _discoveryService = discoveryService;\n        }\n\n        [HttpPost(\"register\")]\n        public IActionResult RegisterService([FromBody] ServiceInfo service)\n        {\n            if (service == null || string.IsNullOrEmpty(service.Name) || string.IsNullOrEmpty(service.Address))\n            {\n                return BadRequest(\"Service information is incomplete.\");\n            }\n            _discoveryService.RegisterService(service);\n            return Ok(new { Message = \"Service registered successfully\", ServiceId = service.ServiceId });\n        }\n\n        [HttpPost(\"heartbeat\")]\n        public IActionResult Heartbeat([FromQuery] Guid serviceId)\n        {\n            var updated = _discoveryService.UpdateHeartbeat(serviceId);\n            if (!updated)\n            {\n                return NotFound(\"Service not registered.\");\n            }\n            return Ok(new { Message = \"Heartbeat updated successfully\" });\n        }\n\n        [HttpDelete(\"unregister\")]\n        public IActionResult UnregisterService([FromQuery] Guid serviceId)\n        {\n            var removed = _discoveryService.UnregisterService(serviceId);\n            if (!removed)\n            {\n                return NotFound(\"Service not found.\");\n            }\n            return Ok(new { Message = \"Service unregistered successfully\" });\n        }\n\n        [HttpGet(\"discover\")]\n        public IActionResult DiscoverServices()\n        {\n            var services = _discoveryService.GetServices();\n            return Ok(services);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "75548d6d-8461-4baf-ac92-35ed5daa4c05",
        "Name": "Services",
        "ParentId": "397c271c-81bb-4e02-8d8b-295662f90486",
        "Type": 0,
        "Items": [
          {
            "Id": "3fe92f9f-0541-4e57-a8a1-09bcb15c5751",
            "Name": "IDiscoveryService.cs",
            "ParentId": "75548d6d-8461-4baf-ac92-35ed5daa4c05",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing ServiceDiscoveryTool.Models;\n\nnamespace ServiceDiscoveryTool.Services\n{\n    public interface IDiscoveryService\n    {\n        void RegisterService(ServiceInfo service);\n        bool UnregisterService(Guid serviceId);\n        bool UpdateHeartbeat(Guid serviceId);\n        IEnumerable<ServiceInfo> GetServices();\n        IEnumerable<ServiceInfo> GetAllServices();\n        void MarkServiceUnhealthy(Guid serviceId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "76bb76ee-83bb-41cf-8bba-a8746b3336ed",
            "Name": "DiscoveryService.cs",
            "ParentId": "75548d6d-8461-4baf-ac92-35ed5daa4c05",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Linq;\nusing ServiceDiscoveryTool.Models;\n\nnamespace ServiceDiscoveryTool.Services\n{\n    public class DiscoveryService : IDiscoveryService\n    {\n        private readonly ConcurrentDictionary<Guid, ServiceInfo> _services = new ConcurrentDictionary<Guid, ServiceInfo>();\n\n        public void RegisterService(ServiceInfo service)\n        {\n            if (service == null) throw new ArgumentNullException(nameof(service));\n            service.ServiceId = service.ServiceId == Guid.Empty ? Guid.NewGuid() : service.ServiceId;\n            service.LastHeartbeat = DateTime.UtcNow;\n            service.IsHealthy = true;\n            _services[service.ServiceId] = service;\n        }\n\n        public bool UnregisterService(Guid serviceId)\n        {\n            return _services.TryRemove(serviceId, out _);\n        }\n\n        public bool UpdateHeartbeat(Guid serviceId)\n        {\n            if (_services.TryGetValue(serviceId, out ServiceInfo service))\n            {\n                service.LastHeartbeat = DateTime.UtcNow;\n                service.IsHealthy = true;\n                return true;\n            }\n            return false;\n        }\n\n        public IEnumerable<ServiceInfo> GetServices()\n        {\n            return _services.Values.Where(s => s.IsHealthy).ToList();\n        }\n\n        public IEnumerable<ServiceInfo> GetAllServices()\n        {\n            return _services.Values.ToList();\n        }\n\n        public void MarkServiceUnhealthy(Guid serviceId)\n        {\n            if (_services.TryGetValue(serviceId, out ServiceInfo service))\n            {\n                service.IsHealthy = false;\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "48f50894-cbdc-4759-a0b8-1479880dd4a8",
        "Name": "Models",
        "ParentId": "397c271c-81bb-4e02-8d8b-295662f90486",
        "Type": 0,
        "Items": [
          {
            "Id": "5a109c2f-58ef-4227-981a-cf77f9bf04f9",
            "Name": "ServiceInfo.cs",
            "ParentId": "48f50894-cbdc-4759-a0b8-1479880dd4a8",
            "Type": 1,
            "Text": "using System;\n\nnamespace ServiceDiscoveryTool.Models\n{\n    public class ServiceInfo\n    {\n        public Guid ServiceId { get; set; }\n        public string Name { get; set; }\n        public string Address { get; set; }\n        public int Port { get; set; }\n        public DateTime LastHeartbeat { get; set; }\n        public bool IsHealthy { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "8b4518d2-92a2-480b-8e59-3be5ba14021d",
        "Name": "Infrastructure",
        "ParentId": "397c271c-81bb-4e02-8d8b-295662f90486",
        "Type": 0,
        "Items": [
          {
            "Id": "bd57f316-b2f8-493d-a658-f78e57564235",
            "Name": "ServiceHealthMonitor.cs",
            "ParentId": "8b4518d2-92a2-480b-8e59-3be5ba14021d",
            "Type": 1,
            "Text": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing ServiceDiscoveryTool.Services;\n\nnamespace ServiceDiscoveryTool.Infrastructure\n{\n    public class ServiceHealthMonitor : BackgroundService\n    {\n        private readonly IDiscoveryService _discoveryService;\n        private readonly ILogger<ServiceHealthMonitor> _logger;\n        private readonly TimeSpan _checkInterval = TimeSpan.FromSeconds(10);\n        private readonly TimeSpan _healthTimeout = TimeSpan.FromSeconds(30);\n\n        public ServiceHealthMonitor(IDiscoveryService discoveryService, ILogger<ServiceHealthMonitor> logger)\n        {\n            _discoveryService = discoveryService;\n            _logger = logger;\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                try\n                {\n                    var now = DateTime.UtcNow;\n                    foreach (var service in _discoveryService.GetAllServices())\n                    {\n                        if (service.IsHealthy && (now - service.LastHeartbeat) > _healthTimeout)\n                        {\n                            _logger.LogWarning($\"Service {service.ServiceId} ({service.Name}) marked unhealthy due to heartbeat timeout.\");\n                            _discoveryService.MarkServiceUnhealthy(service.ServiceId);\n                        }\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"Error occurred during health monitoring.\");\n                }\n                await Task.Delay(_checkInterval, stoppingToken);\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "44300999-40d9-4915-a2c7-a798586fbd7b",
    "Name": "DataCachingService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "b9fb7e28-bd04-4915-90de-b5cc9db7e582",
        "Name": "Program.cs",
        "ParentId": "44300999-40d9-4915-a2c7-a798586fbd7b",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace DataCachingService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "3fc502fa-61e0-4841-9488-f54c157cd29d",
        "Name": "Startup.cs",
        "ParentId": "44300999-40d9-4915-a2c7-a798586fbd7b",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing DataCachingService.Services;\n\nnamespace DataCachingService\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddMemoryCache();\n            services.AddSingleton<ICacheService, CacheService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "c1adb387-5b7b-464f-a788-a9011433a2d7",
        "Name": "Controllers",
        "ParentId": "44300999-40d9-4915-a2c7-a798586fbd7b",
        "Type": 0,
        "Items": [
          {
            "Id": "bd179344-e503-42f4-8070-62a7beeba073",
            "Name": "CacheController.cs",
            "ParentId": "c1adb387-5b7b-464f-a788-a9011433a2d7",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.AspNetCore.Mvc;\nusing DataCachingService.Models;\nusing DataCachingService.Services;\n\nnamespace DataCachingService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class CacheController : ControllerBase\n    {\n        private readonly ICacheService _cacheService;\n\n        public CacheController(ICacheService cacheService)\n        {\n            _cacheService = cacheService;\n        }\n\n        [HttpGet(\"{key}\")]\n        public IActionResult GetCache(string key)\n        {\n            var value = _cacheService.Get<string>(key);\n            if (value == null)\n            {\n                return NotFound(new { Message = $\"No cache found for key {key}\" });\n            }\n            return Ok(new CacheResponse { Key = key, Value = value });\n        }\n\n        [HttpPost]\n        public IActionResult SetCache([FromBody] CacheRequest request)\n        {\n            if (string.IsNullOrEmpty(request.Key) || request.Value == null || request.ExpirySeconds <= 0)\n            {\n                return BadRequest(new { Message = \"Invalid cache request parameters.\" });\n            }\n\n            _cacheService.Set<string>(request.Key, request.Value, TimeSpan.FromSeconds(request.ExpirySeconds));\n            return Ok(new CacheResponse { Key = request.Key, Value = request.Value });\n        }\n\n        [HttpDelete(\"{key}\")]\n        public IActionResult RemoveCache(string key)\n        {\n            _cacheService.Remove(key);\n            return Ok(new { Message = $\"Cache removed for key {key}\" });\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "e9f37da9-ca5c-445e-89e8-5cb05d879fa5",
        "Name": "Services",
        "ParentId": "44300999-40d9-4915-a2c7-a798586fbd7b",
        "Type": 0,
        "Items": [
          {
            "Id": "10b01631-f864-4f7a-8454-0eda504f4a40",
            "Name": "ICacheService.cs",
            "ParentId": "e9f37da9-ca5c-445e-89e8-5cb05d879fa5",
            "Type": 1,
            "Text": "using System;\n\nnamespace DataCachingService.Services\n{\n    public interface ICacheService\n    {\n        T Get<T>(string key);\n        void Set<T>(string key, T value, TimeSpan expiration);\n        void Remove(string key);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "4e01f347-4fac-4e69-868a-0487aa2546af",
            "Name": "CacheService.cs",
            "ParentId": "e9f37da9-ca5c-445e-89e8-5cb05d879fa5",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.Extensions.Caching.Memory;\n\nnamespace DataCachingService.Services\n{\n    public class CacheService : ICacheService\n    {\n        private readonly IMemoryCache _memoryCache;\n\n        public CacheService(IMemoryCache memoryCache)\n        {\n            _memoryCache = memoryCache;\n        }\n\n        public T Get<T>(string key)\n        {\n            _memoryCache.TryGetValue(key, out T value);\n            return value;\n        }\n\n        public void Set<T>(string key, T value, TimeSpan expiration)\n        {\n            var cacheEntryOptions = new MemoryCacheEntryOptions()\n                .SetAbsoluteExpiration(expiration);\n            _memoryCache.Set(key, value, cacheEntryOptions);\n        }\n\n        public void Remove(string key)\n        {\n            _memoryCache.Remove(key);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "4bb44fd7-c329-42cf-9cab-2cb469421b2d",
        "Name": "Models",
        "ParentId": "44300999-40d9-4915-a2c7-a798586fbd7b",
        "Type": 0,
        "Items": [
          {
            "Id": "b4b349c6-c1ad-4ff7-af37-37b0e179a2db",
            "Name": "CacheRequest.cs",
            "ParentId": "4bb44fd7-c329-42cf-9cab-2cb469421b2d",
            "Type": 1,
            "Text": "namespace DataCachingService.Models\n{\n    public class CacheRequest\n    {\n        public string Key { get; set; }\n        public string Value { get; set; }\n        public int ExpirySeconds { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "bf867c09-194d-4ab9-8575-c15d7fd068f8",
            "Name": "CacheResponse.cs",
            "ParentId": "4bb44fd7-c329-42cf-9cab-2cb469421b2d",
            "Type": 1,
            "Text": "namespace DataCachingService.Models\n{\n    public class CacheResponse\n    {\n        public string Key { get; set; }\n        public string Value { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "40601af0-6782-4347-b644-c850a4a9bb58",
        "Name": "Infrastructure",
        "ParentId": "44300999-40d9-4915-a2c7-a798586fbd7b",
        "Type": 0,
        "Items": [
          {
            "Id": "1203def1-a757-4a30-9934-62105a1c55df",
            "Name": "CacheProvider.cs",
            "ParentId": "40601af0-6782-4347-b644-c850a4a9bb58",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.Extensions.Caching.Memory;\n\nnamespace DataCachingService.Infrastructure\n{\n    public class CacheProvider\n    {\n        private readonly IMemoryCache _cache;\n\n        public CacheProvider(IMemoryCache cache)\n        {\n            _cache = cache;\n        }\n\n        public T GetCacheItem<T>(string key)\n        {\n            _cache.TryGetValue(key, out T value);\n            return value;\n        }\n\n        public void SetCacheItem<T>(string key, T value, TimeSpan expiration)\n        {\n            var options = new MemoryCacheEntryOptions().SetAbsoluteExpiration(expiration);\n            _cache.Set(key, value, options);\n        }\n\n        public void RemoveCacheItem(string key)\n        {\n            _cache.Remove(key);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "48c292a6-51db-441d-9c64-b4c3b91599c6",
    "Name": "RealTimeAnalyticsDashboard",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "4842e6ee-3571-4a1f-b7ce-55143c2efcbb",
        "Name": "Program.cs",
        "ParentId": "48c292a6-51db-441d-9c64-b4c3b91599c6",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace RealTimeAnalyticsDashboard\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "71825d9e-23ac-46da-9de1-ebfea92437b3",
        "Name": "Startup.cs",
        "ParentId": "48c292a6-51db-441d-9c64-b4c3b91599c6",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing RealTimeAnalyticsDashboard.Services;\nusing RealTimeAnalyticsDashboard.Data;\n\nnamespace RealTimeAnalyticsDashboard\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IAnalyticsService, AnalyticsService>();\n            services.AddSingleton<IAnalyticsRepository, AnalyticsRepository>();\n            services.AddLogging();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ILogger<Startup> logger)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            else\n            {\n                app.UseExceptionHandler(\"/error\");\n            }\n\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "adb32801-6d1c-4989-9a3a-b8833a430767",
        "Name": "Controllers",
        "ParentId": "48c292a6-51db-441d-9c64-b4c3b91599c6",
        "Type": 0,
        "Items": [
          {
            "Id": "306e5159-4bea-427d-9cf7-f4aa78c1e830",
            "Name": "AnalyticsController.cs",
            "ParentId": "adb32801-6d1c-4989-9a3a-b8833a430767",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing RealTimeAnalyticsDashboard.Models;\nusing RealTimeAnalyticsDashboard.Services;\nusing System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\n\nnamespace RealTimeAnalyticsDashboard.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class AnalyticsController : ControllerBase\n    {\n        private readonly IAnalyticsService _analyticsService;\n\n        public AnalyticsController(IAnalyticsService analyticsService)\n        {\n            _analyticsService = analyticsService;\n        }\n\n        [HttpGet(\"live\")]\n        public async Task<ActionResult<IEnumerable<AnalyticsData>>> GetLiveAnalytics()\n        {\n            try\n            {\n                var data = await _analyticsService.GetLiveAnalyticsDataAsync();\n                return Ok(data);\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, new { Message = \"An error occurred while retrieving analytics data.\", Detail = ex.Message });\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "174691de-c605-49a3-8388-e0b127fad048",
        "Name": "Services",
        "ParentId": "48c292a6-51db-441d-9c64-b4c3b91599c6",
        "Type": 0,
        "Items": [
          {
            "Id": "a0da1249-3734-4810-bb62-34b4df12f79e",
            "Name": "IAnalyticsService.cs",
            "ParentId": "174691de-c605-49a3-8388-e0b127fad048",
            "Type": 1,
            "Text": "using RealTimeAnalyticsDashboard.Models;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace RealTimeAnalyticsDashboard.Services\n{\n    public interface IAnalyticsService\n    {\n         Task<IEnumerable<AnalyticsData>> GetLiveAnalyticsDataAsync();\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "0028f180-adc0-4f8b-ab94-ffbb08195fb6",
            "Name": "AnalyticsService.cs",
            "ParentId": "174691de-c605-49a3-8388-e0b127fad048",
            "Type": 1,
            "Text": "using RealTimeAnalyticsDashboard.Models;\nusing RealTimeAnalyticsDashboard.Data;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Linq;\nusing System;\n\nnamespace RealTimeAnalyticsDashboard.Services\n{\n    public class AnalyticsService : IAnalyticsService\n    {\n        private readonly IAnalyticsRepository _repository;\n\n        public AnalyticsService(IAnalyticsRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public async Task<IEnumerable<AnalyticsData>> GetLiveAnalyticsDataAsync()\n        {\n            var rawData = await _repository.FetchAnalyticsMetricsAsync();\n            // Process the raw data to produce up-to-date analytics data\n            var processedData = rawData.Select(metric => new AnalyticsData\n            {\n                Metric = metric.Metric,\n                Value = metric.Value,\n                Timestamp = DateTime.UtcNow\n            }).ToList();\n\n            return processedData;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "c392154e-6aa9-4f23-8db5-2038103b3229",
        "Name": "Models",
        "ParentId": "48c292a6-51db-441d-9c64-b4c3b91599c6",
        "Type": 0,
        "Items": [
          {
            "Id": "c3f193fe-3aa3-400c-9925-53d21034c640",
            "Name": "AnalyticsData.cs",
            "ParentId": "c392154e-6aa9-4f23-8db5-2038103b3229",
            "Type": 1,
            "Text": "using System;\n\nnamespace RealTimeAnalyticsDashboard.Models\n{\n    public class AnalyticsData\n    {\n         public string Metric { get; set; }\n         public double Value { get; set; }\n         public DateTime Timestamp { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "3c425450-bba8-47fb-976a-0c1670559a5f",
        "Name": "Data",
        "ParentId": "48c292a6-51db-441d-9c64-b4c3b91599c6",
        "Type": 0,
        "Items": [
          {
            "Id": "c5d09910-be69-4cd9-a554-b4f1e4eb4dbd",
            "Name": "IAnalyticsRepository.cs",
            "ParentId": "3c425450-bba8-47fb-976a-0c1670559a5f",
            "Type": 1,
            "Text": "using RealTimeAnalyticsDashboard.Models;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace RealTimeAnalyticsDashboard.Data\n{\n    public interface IAnalyticsRepository\n    {\n         Task<IEnumerable<AnalyticsData>> FetchAnalyticsMetricsAsync();\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "34ba7308-06dc-4d78-bc0a-1cefd3761275",
            "Name": "AnalyticsRepository.cs",
            "ParentId": "3c425450-bba8-47fb-976a-0c1670559a5f",
            "Type": 1,
            "Text": "using RealTimeAnalyticsDashboard.Models;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System;\n\nnamespace RealTimeAnalyticsDashboard.Data\n{\n    public class AnalyticsRepository : IAnalyticsRepository\n    {\n         public async Task<IEnumerable<AnalyticsData>> FetchAnalyticsMetricsAsync()\n         {\n             // In production, this method would query a database or connect to a real-time data stream\n             // to fetch aggregated analytics metrics. Here, we simulate this with static data.\n             var metrics = new List<AnalyticsData>\n             {\n                 new AnalyticsData { Metric = \"TotalTransactions\", Value = 1250 },\n                 new AnalyticsData { Metric = \"SuccessfulPayments\", Value = 1200 },\n                 new AnalyticsData { Metric = \"FailedTransactions\", Value = 50 },\n                 new AnalyticsData { Metric = \"AverageProcessingTime\", Value = 250 } // in milliseconds\n             };\n\n             return await Task.FromResult(metrics);\n         }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "e16b4db5-0ef7-4cc8-9888-b796fa0c08d4",
    "Name": "HistoricalReportingSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "698400ad-67a1-45dd-bd76-41b09abaa01c",
        "Name": "Program.cs",
        "ParentId": "e16b4db5-0ef7-4cc8-9888-b796fa0c08d4",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace HistoricalReportingSystem\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "0a5cfba8-218b-4498-8a49-f477ce539021",
        "Name": "Startup.cs",
        "ParentId": "e16b4db5-0ef7-4cc8-9888-b796fa0c08d4",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing HistoricalReportingSystem.Services;\nusing HistoricalReportingSystem.Data;\n\nnamespace HistoricalReportingSystem\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IReportService, ReportService>();\n            services.AddSingleton<IFinancialDataRepository, FinancialDataRepository>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "44562982-1dbc-4693-9f60-0f182406fa0b",
        "Name": "Controllers",
        "ParentId": "e16b4db5-0ef7-4cc8-9888-b796fa0c08d4",
        "Type": 0,
        "Items": [
          {
            "Id": "297c40eb-d8cc-421b-a072-a59729e4f4c1",
            "Name": "ReportController.cs",
            "ParentId": "44562982-1dbc-4693-9f60-0f182406fa0b",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.AspNetCore.Mvc;\nusing HistoricalReportingSystem.Services;\nusing HistoricalReportingSystem.Models;\n\nnamespace HistoricalReportingSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ReportController : ControllerBase\n    {\n        private readonly IReportService _reportService;\n\n        public ReportController(IReportService reportService)\n        {\n            _reportService = reportService;\n        }\n\n        [HttpGet]\n        public ActionResult<Report> GetReport([FromQuery] DateTime startDate, [FromQuery] DateTime endDate)\n        {\n            if (startDate >= endDate)\n            {\n                return BadRequest(\"Start date must be before end date.\");\n            }\n\n            Report report = _reportService.GenerateReport(startDate, endDate);\n            return Ok(report);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "e7067fa4-9a2e-484b-a358-fca834b01df5",
        "Name": "Services",
        "ParentId": "e16b4db5-0ef7-4cc8-9888-b796fa0c08d4",
        "Type": 0,
        "Items": [
          {
            "Id": "00e8aa1b-388c-4067-89ae-316b2b643a4d",
            "Name": "IReportService.cs",
            "ParentId": "e7067fa4-9a2e-484b-a358-fca834b01df5",
            "Type": 1,
            "Text": "using System;\nusing HistoricalReportingSystem.Models;\n\nnamespace HistoricalReportingSystem.Services\n{\n    public interface IReportService\n    {\n        Report GenerateReport(DateTime startDate, DateTime endDate);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e9c49f4a-af11-4238-88e0-2ded92d2a154",
            "Name": "ReportService.cs",
            "ParentId": "e7067fa4-9a2e-484b-a358-fca834b01df5",
            "Type": 1,
            "Text": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\nusing HistoricalReportingSystem.Models;\nusing HistoricalReportingSystem.Data;\n\nnamespace HistoricalReportingSystem.Services\n{\n    public class ReportService : IReportService\n    {\n        private readonly IFinancialDataRepository _repository;\n\n        public ReportService(IFinancialDataRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public Report GenerateReport(DateTime startDate, DateTime endDate)\n        {\n            IEnumerable<FinancialRecord> records = _repository.GetRecords(startDate, endDate);\n\n            int totalTransactions = records.Count();\n            decimal totalAmount = records.Sum(r => r.Amount);\n            decimal averageAmount = totalTransactions > 0 ? totalAmount / totalTransactions : 0m;\n\n            Report report = new Report\n            {\n                StartDate = startDate,\n                EndDate = endDate,\n                TotalTransactions = totalTransactions,\n                TotalAmount = totalAmount,\n                AverageAmount = averageAmount,\n                Records = records.ToList()\n            };\n\n            return report;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "d3bc724d-3488-4347-8041-623636d932c5",
        "Name": "Models",
        "ParentId": "e16b4db5-0ef7-4cc8-9888-b796fa0c08d4",
        "Type": 0,
        "Items": [
          {
            "Id": "af4e7c8e-2107-499f-be00-b71b4557934b",
            "Name": "FinancialRecord.cs",
            "ParentId": "d3bc724d-3488-4347-8041-623636d932c5",
            "Type": 1,
            "Text": "using System;\n\nnamespace HistoricalReportingSystem.Models\n{\n    public class FinancialRecord\n    {\n        public Guid Id { get; set; }\n        public DateTime TransactionDate { get; set; }\n        public decimal Amount { get; set; }\n        public string Description { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "f71fde77-b21b-4e12-90df-4c636e7ff159",
            "Name": "Report.cs",
            "ParentId": "d3bc724d-3488-4347-8041-623636d932c5",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\n\nnamespace HistoricalReportingSystem.Models\n{\n    public class Report\n    {\n        public DateTime StartDate { get; set; }\n        public DateTime EndDate { get; set; }\n        public int TotalTransactions { get; set; }\n        public decimal TotalAmount { get; set; }\n        public decimal AverageAmount { get; set; }\n        public List<FinancialRecord> Records { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "3858afbd-eb04-424f-8c7b-8dc1b0465377",
        "Name": "Data",
        "ParentId": "e16b4db5-0ef7-4cc8-9888-b796fa0c08d4",
        "Type": 0,
        "Items": [
          {
            "Id": "8862b573-0f01-4e50-8d44-6b840768764e",
            "Name": "IFinancialDataRepository.cs",
            "ParentId": "3858afbd-eb04-424f-8c7b-8dc1b0465377",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing HistoricalReportingSystem.Models;\n\nnamespace HistoricalReportingSystem.Data\n{\n    public interface IFinancialDataRepository\n    {\n        IEnumerable<FinancialRecord> GetRecords(DateTime startDate, DateTime endDate);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "355ddf14-9ec1-4b2f-b002-83169cfa19c5",
            "Name": "FinancialDataRepository.cs",
            "ParentId": "3858afbd-eb04-424f-8c7b-8dc1b0465377",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing HistoricalReportingSystem.Models;\n\nnamespace HistoricalReportingSystem.Data\n{\n    public class FinancialDataRepository : IFinancialDataRepository\n    {\n        private readonly List<FinancialRecord> _records;\n\n        public FinancialDataRepository()\n        {\n            // Simulated data source; in production, this would interface with a persistent database.\n            _records = new List<FinancialRecord>\n            {\n                new FinancialRecord { Id = Guid.NewGuid(), TransactionDate = DateTime.UtcNow.AddDays(-10), Amount = 1500.50m, Description = \"Loan repayment\" },\n                new FinancialRecord { Id = Guid.NewGuid(), TransactionDate = DateTime.UtcNow.AddDays(-9), Amount = 2000.00m, Description = \"Deposit\" },\n                new FinancialRecord { Id = Guid.NewGuid(), TransactionDate = DateTime.UtcNow.AddDays(-8), Amount = -500.75m, Description = \"Withdrawal\" },\n                new FinancialRecord { Id = Guid.NewGuid(), TransactionDate = DateTime.UtcNow.AddDays(-7), Amount = 3200.00m, Description = \"Account transfer\" },\n                new FinancialRecord { Id = Guid.NewGuid(), TransactionDate = DateTime.UtcNow.AddDays(-6), Amount = -750.25m, Description = \"Bill payment\" }\n            };\n        }\n\n        public IEnumerable<FinancialRecord> GetRecords(DateTime startDate, DateTime endDate)\n        {\n            return _records.Where(r => r.TransactionDate >= startDate && r.TransactionDate <= endDate).ToList();\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "223a07ca-3634-4331-876e-4f8154a6bb3d",
    "Name": "UserBehaviorAnalytics",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "ad33f73e-9b25-4bcd-86e4-849223c65159",
        "Name": "Program.cs",
        "ParentId": "223a07ca-3634-4331-876e-4f8154a6bb3d",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace UserBehaviorAnalytics\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "081b141e-e18f-4154-a791-268b9fbfbef6",
        "Name": "Startup.cs",
        "ParentId": "223a07ca-3634-4331-876e-4f8154a6bb3d",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing UserBehaviorAnalytics.Services;\nusing UserBehaviorAnalytics.Data;\nusing UserBehaviorAnalytics.Infrastructure;\n\nnamespace UserBehaviorAnalytics\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IUserInteractionRepository, UserInteractionRepository>();\n            services.AddScoped<IAnalyticsService, AnalyticsService>();\n            services.AddSingleton<IAuditLogger, AuditLogger>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "87ad938c-b117-4d1b-869b-601a24d3948c",
        "Name": "Controllers",
        "ParentId": "223a07ca-3634-4331-876e-4f8154a6bb3d",
        "Type": 0,
        "Items": [
          {
            "Id": "acde2da3-d47b-474d-b89d-91e451d08618",
            "Name": "UserBehaviorController.cs",
            "ParentId": "87ad938c-b117-4d1b-869b-601a24d3948c",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing UserBehaviorAnalytics.Services;\nusing UserBehaviorAnalytics.Models;\n\nnamespace UserBehaviorAnalytics.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class UserBehaviorController : ControllerBase\n    {\n        private readonly IAnalyticsService _analyticsService;\n\n        public UserBehaviorController(IAnalyticsService analyticsService)\n        {\n            _analyticsService = analyticsService;\n        }\n\n        [HttpPost(\"log\")]\n        public async Task<IActionResult> LogInteraction([FromBody] UserInteraction interaction)\n        {\n            if (interaction == null || string.IsNullOrWhiteSpace(interaction.UserId))\n            {\n                return BadRequest(\"Valid interaction data is required.\");\n            }\n            await _analyticsService.LogInteractionAsync(interaction);\n            return Ok(\"Interaction logged successfully.\");\n        }\n\n        [HttpGet(\"report\")]\n        public async Task<IActionResult> GetReport([FromQuery] string userId)\n        {\n            if (string.IsNullOrWhiteSpace(userId))\n            {\n                return BadRequest(\"User ID is required.\");\n            }\n            AnalyticsReport report = await _analyticsService.GenerateReportAsync(userId);\n            return Ok(report);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "26da0476-e8df-4944-911b-c49749e3708e",
        "Name": "Services",
        "ParentId": "223a07ca-3634-4331-876e-4f8154a6bb3d",
        "Type": 0,
        "Items": [
          {
            "Id": "db31489d-4748-4f13-b215-2177036d77d6",
            "Name": "IAnalyticsService.cs",
            "ParentId": "26da0476-e8df-4944-911b-c49749e3708e",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing UserBehaviorAnalytics.Models;\n\nnamespace UserBehaviorAnalytics.Services\n{\n    public interface IAnalyticsService\n    {\n        Task LogInteractionAsync(UserInteraction interaction);\n        Task<AnalyticsReport> GenerateReportAsync(string userId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "128de1e2-cf4b-42fb-9975-02a5e9e059b7",
            "Name": "AnalyticsService.cs",
            "ParentId": "26da0476-e8df-4944-911b-c49749e3708e",
            "Type": 1,
            "Text": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing UserBehaviorAnalytics.Models;\nusing UserBehaviorAnalytics.Data;\nusing UserBehaviorAnalytics.Infrastructure;\n\nnamespace UserBehaviorAnalytics.Services\n{\n    public class AnalyticsService : IAnalyticsService\n    {\n        private readonly IUserInteractionRepository _repository;\n        private readonly IAuditLogger _auditLogger;\n\n        public AnalyticsService(IUserInteractionRepository repository, IAuditLogger auditLogger)\n        {\n            _repository = repository;\n            _auditLogger = auditLogger;\n        }\n\n        public async Task LogInteractionAsync(UserInteraction interaction)\n        {\n            interaction.Timestamp = DateTime.UtcNow;\n            await _repository.AddInteractionAsync(interaction);\n            _auditLogger.LogInfo($\"Logged interaction for user {interaction.UserId}\");\n        }\n\n        public async Task<AnalyticsReport> GenerateReportAsync(string userId)\n        {\n            var interactions = await _repository.GetInteractionsByUserAsync(userId);\n            if (interactions == null || !interactions.Any())\n            {\n                return new AnalyticsReport\n                {\n                    UserId = userId,\n                    TotalInteractions = 0,\n                    MostFrequentAction = null,\n                    AverageSessionDuration = 0\n                };\n            }\n\n            int total = interactions.Count;\n            var frequentGroup = interactions.GroupBy(i => i.Action)\n                                             .OrderByDescending(g => g.Count())\n                                             .FirstOrDefault();\n            string mostFrequent = frequentGroup != null ? frequentGroup.Key : null;\n\n            var sessionDurations = interactions\n                .GroupBy(i => i.SessionId)\n                .Select(g => (g.Max(i => i.Timestamp) - g.Min(i => i.Timestamp)).TotalSeconds)\n                .ToList();\n\n            double averageSessionDuration = sessionDurations.Any() ? sessionDurations.Average() : 0;\n\n            return new AnalyticsReport\n            {\n                UserId = userId,\n                TotalInteractions = total,\n                MostFrequentAction = mostFrequent,\n                AverageSessionDuration = averageSessionDuration\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "3f9f25f8-188c-4828-bae6-e4f4b0877c8f",
        "Name": "Models",
        "ParentId": "223a07ca-3634-4331-876e-4f8154a6bb3d",
        "Type": 0,
        "Items": [
          {
            "Id": "2611cdf4-ce4b-4fae-8bd5-8cf702b7de05",
            "Name": "UserInteraction.cs",
            "ParentId": "3f9f25f8-188c-4828-bae6-e4f4b0877c8f",
            "Type": 1,
            "Text": "using System;\n\nnamespace UserBehaviorAnalytics.Models\n{\n    public class UserInteraction\n    {\n        public string InteractionId { get; set; } = Guid.NewGuid().ToString();\n        public string UserId { get; set; }\n        public string SessionId { get; set; }\n        public string Action { get; set; }\n        public DateTime Timestamp { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "1519e988-0626-44aa-b067-6ce98403dadc",
            "Name": "AnalyticsReport.cs",
            "ParentId": "3f9f25f8-188c-4828-bae6-e4f4b0877c8f",
            "Type": 1,
            "Text": "namespace UserBehaviorAnalytics.Models\n{\n    public class AnalyticsReport\n    {\n        public string UserId { get; set; }\n        public int TotalInteractions { get; set; }\n        public string MostFrequentAction { get; set; }\n        public double AverageSessionDuration { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "d7e43ab2-59cf-4c96-bf74-8bb5c7b905a0",
        "Name": "Data",
        "ParentId": "223a07ca-3634-4331-876e-4f8154a6bb3d",
        "Type": 0,
        "Items": [
          {
            "Id": "1cb54313-0d6b-4e5b-a243-0a268eb02e52",
            "Name": "IUserInteractionRepository.cs",
            "ParentId": "d7e43ab2-59cf-4c96-bf74-8bb5c7b905a0",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing UserBehaviorAnalytics.Models;\n\nnamespace UserBehaviorAnalytics.Data\n{\n    public interface IUserInteractionRepository\n    {\n        Task AddInteractionAsync(UserInteraction interaction);\n        Task<System.Collections.Generic.List<UserInteraction>> GetInteractionsByUserAsync(string userId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "a978e1c9-626c-420e-83af-9a7ce18e7d5f",
            "Name": "UserInteractionRepository.cs",
            "ParentId": "d7e43ab2-59cf-4c96-bf74-8bb5c7b905a0",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing UserBehaviorAnalytics.Models;\n\nnamespace UserBehaviorAnalytics.Data\n{\n    public class UserInteractionRepository : IUserInteractionRepository\n    {\n        private static readonly ConcurrentBag<UserInteraction> _interactions = new ConcurrentBag<UserInteraction>();\n\n        public Task AddInteractionAsync(UserInteraction interaction)\n        {\n            _interactions.Add(interaction);\n            return Task.CompletedTask;\n        }\n\n        public Task<List<UserInteraction>> GetInteractionsByUserAsync(string userId)\n        {\n            var result = _interactions.Where(i => i.UserId == userId).ToList();\n            return Task.FromResult(result);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "dc6be893-896d-400e-b3fa-74d2c4d88506",
        "Name": "Infrastructure",
        "ParentId": "223a07ca-3634-4331-876e-4f8154a6bb3d",
        "Type": 0,
        "Items": [
          {
            "Id": "94e318db-1a45-4116-ae8a-58da52f4402a",
            "Name": "IAuditLogger.cs",
            "ParentId": "dc6be893-896d-400e-b3fa-74d2c4d88506",
            "Type": 1,
            "Text": "namespace UserBehaviorAnalytics.Infrastructure\n{\n    public interface IAuditLogger\n    {\n        void LogInfo(string message);\n        void LogError(string message, System.Exception ex);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "222674e1-6a5f-4da8-908c-bd0509efb00c",
            "Name": "AuditLogger.cs",
            "ParentId": "dc6be893-896d-400e-b3fa-74d2c4d88506",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace UserBehaviorAnalytics.Infrastructure\n{\n    public class AuditLogger : IAuditLogger\n    {\n        private readonly ILogger<AuditLogger> _logger;\n\n        public AuditLogger(ILogger<AuditLogger> logger)\n        {\n            _logger = logger;\n        }\n\n        public void LogInfo(string message)\n        {\n            _logger.LogInformation(message);\n        }\n\n        public void LogError(string message, Exception ex)\n        {\n            _logger.LogError(ex, message);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "511da801-3cf9-4425-b7d0-3efd0b30f308",
    "Name": "DataExportUtility",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "e85da1e6-598d-465f-8408-3092d0b76d07",
        "Name": "Program.cs",
        "ParentId": "511da801-3cf9-4425-b7d0-3efd0b30f308",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing DataExportUtility.Services;\nusing DataExportUtility.Data;\nusing Microsoft.Extensions.Configuration;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nbuilder.Services.AddSingleton<IExportService, ExportService>();\nbuilder.Services.AddSingleton<IExportRepository, ExportRepository>();\nbuilder.Services.AddLogging();\n\n// Register configuration\nbuilder.Services.AddSingleton<IConfiguration>(builder.Configuration);\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseRouting();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "a91537fc-3b33-4fc7-aaf9-c20ff2d74ebb",
        "Name": "Controllers",
        "ParentId": "511da801-3cf9-4425-b7d0-3efd0b30f308",
        "Type": 0,
        "Items": [
          {
            "Id": "1cb8d461-fe4f-4979-9456-92d6230efb47",
            "Name": "ExportController.cs",
            "ParentId": "a91537fc-3b33-4fc7-aaf9-c20ff2d74ebb",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing DataExportUtility.Models;\nusing DataExportUtility.Services;\nusing System.Threading.Tasks;\n\nnamespace DataExportUtility.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ExportController : ControllerBase\n    {\n        private readonly IExportService _exportService;\n\n        public ExportController(IExportService exportService)\n        {\n            _exportService = exportService;\n        }\n\n        [HttpPost(\"export\")]\n        public async Task<IActionResult> ExportData([FromBody] ExportRequest request)\n        {\n            var result = await _exportService.ExportDataAsync(request);\n            return Ok(result);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "0af1483d-4050-4c70-97da-156a3a5a9c26",
        "Name": "Services",
        "ParentId": "511da801-3cf9-4425-b7d0-3efd0b30f308",
        "Type": 0,
        "Items": [
          {
            "Id": "3ddda29e-202c-4d57-abb3-cf7b2669733f",
            "Name": "IExportService.cs",
            "ParentId": "0af1483d-4050-4c70-97da-156a3a5a9c26",
            "Type": 1,
            "Text": "using DataExportUtility.Models;\nusing System.Threading.Tasks;\n\nnamespace DataExportUtility.Services\n{\n    public interface IExportService\n    {\n         Task<ExportResult> ExportDataAsync(ExportRequest request);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "446aa3bf-7a04-437c-afd6-72c2d534726a",
            "Name": "ExportService.cs",
            "ParentId": "0af1483d-4050-4c70-97da-156a3a5a9c26",
            "Type": 1,
            "Text": "using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing DataExportUtility.Models;\nusing DataExportUtility.Data;\nusing DataExportUtility.Utils;\nusing Microsoft.Extensions.Configuration;\nusing System.Collections.Generic;\n\nnamespace DataExportUtility.Services\n{\n    public class ExportService : IExportService\n    {\n        private readonly IExportRepository _exportRepository;\n        private readonly IConfiguration _configuration;\n\n        public ExportService(IExportRepository exportRepository, IConfiguration configuration)\n        {\n            _exportRepository = exportRepository;\n            _configuration = configuration;\n        }\n\n        public async Task<ExportResult> ExportDataAsync(ExportRequest request)\n        {\n            // Retrieve data from repository based on date filters\n            IEnumerable<ExportData> data = await _exportRepository.GetExportDataAsync(request.StartDate, request.EndDate);\n\n            // Convert data to CSV format\n            string csvContent = CsvHelper.ConvertToCsv(data);\n\n            // Determine export path from configuration\n            string exportDirectory = _configuration[\"ExportPath\"];\n            if (string.IsNullOrEmpty(exportDirectory))\n            {\n                exportDirectory = Path.Combine(Directory.GetCurrentDirectory(), \"Exports\");\n            }\n            if (!Directory.Exists(exportDirectory))\n            {\n                Directory.CreateDirectory(exportDirectory);\n            }\n\n            string fileName = $\"Export_{DateTime.UtcNow:yyyyMMddHHmmss}.csv\";\n            string fullPath = Path.Combine(exportDirectory, fileName);\n\n            await File.WriteAllTextAsync(fullPath, csvContent);\n\n            // Determine record count in a type-safe manner\n            int recordCount = 0;\n            if (data is ICollection<ExportData> collection)\n            {\n                recordCount = collection.Count;\n            }\n            else\n            {\n                foreach (var item in data) { recordCount++; }\n            }\n\n            return new ExportResult\n            {\n                FilePath = fullPath,\n                RecordCount = recordCount,\n                ExportTime = DateTime.UtcNow\n            };\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "6692aa94-9922-4e54-82ae-8fabc2567eed",
        "Name": "Models",
        "ParentId": "511da801-3cf9-4425-b7d0-3efd0b30f308",
        "Type": 0,
        "Items": [
          {
            "Id": "99f30d9b-f799-423d-8b78-8b752a86041e",
            "Name": "ExportRequest.cs",
            "ParentId": "6692aa94-9922-4e54-82ae-8fabc2567eed",
            "Type": 1,
            "Text": "using System;\n\nnamespace DataExportUtility.Models\n{\n    public class ExportRequest\n    {\n         public DateTime StartDate { get; set; }\n         public DateTime EndDate { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "f790ce69-854a-4b43-88ae-05ac4e8a9b21",
            "Name": "ExportResult.cs",
            "ParentId": "6692aa94-9922-4e54-82ae-8fabc2567eed",
            "Type": 1,
            "Text": "using System;\n\nnamespace DataExportUtility.Models\n{\n    public class ExportResult\n    {\n         public string FilePath { get; set; }\n         public int RecordCount { get; set; }\n         public DateTime ExportTime { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "6f1214fd-8dae-4f1a-b3ba-412b9eec9a00",
            "Name": "ExportData.cs",
            "ParentId": "6692aa94-9922-4e54-82ae-8fabc2567eed",
            "Type": 1,
            "Text": "using System;\n\nnamespace DataExportUtility.Models\n{\n    public class ExportData\n    {\n         public int Id { get; set; }\n         public string Name { get; set; }\n         public DateTime CreatedDate { get; set; }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "69423942-78a9-4a77-8d1a-6b8aed99f557",
        "Name": "Data",
        "ParentId": "511da801-3cf9-4425-b7d0-3efd0b30f308",
        "Type": 0,
        "Items": [
          {
            "Id": "46c5fce4-e996-4a70-ba4e-8b1540825802",
            "Name": "IExportRepository.cs",
            "ParentId": "69423942-78a9-4a77-8d1a-6b8aed99f557",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing DataExportUtility.Models;\n\nnamespace DataExportUtility.Data\n{\n    public interface IExportRepository\n    {\n         Task<IEnumerable<ExportData>> GetExportDataAsync(DateTime startDate, DateTime endDate);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "61651ab6-abbf-42e4-9270-bd224f08d941",
            "Name": "ExportRepository.cs",
            "ParentId": "69423942-78a9-4a77-8d1a-6b8aed99f557",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Data.SqlClient;\nusing DataExportUtility.Models;\nusing Microsoft.Extensions.Configuration;\n\nnamespace DataExportUtility.Data\n{\n    public class ExportRepository : IExportRepository\n    {\n        private readonly string _connectionString;\n\n        public ExportRepository(IConfiguration configuration)\n        {\n            _connectionString = configuration.GetConnectionString(\"ExportDb\");\n        }\n\n        public async Task<IEnumerable<ExportData>> GetExportDataAsync(DateTime startDate, DateTime endDate)\n        {\n            var exportDataList = new List<ExportData>();\n            using (SqlConnection connection = new SqlConnection(_connectionString))\n            {\n                await connection.OpenAsync();\n                string query = \"SELECT Id, Name, CreatedDate FROM ExportTable WHERE CreatedDate BETWEEN @StartDate AND @EndDate\";\n                using (SqlCommand command = new SqlCommand(query, connection))\n                {\n                    command.Parameters.AddWithValue(\"@StartDate\", startDate);\n                    command.Parameters.AddWithValue(\"@EndDate\", endDate);\n                    using (var reader = await command.ExecuteReaderAsync())\n                    {\n                        while (await reader.ReadAsync())\n                        {\n                            exportDataList.Add(new ExportData\n                            {\n                                Id = reader.GetInt32(0),\n                                Name = reader.GetString(1),\n                                CreatedDate = reader.GetDateTime(2)\n                            });\n                        }\n                    }\n                }\n            }\n            return exportDataList;\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "c8264ca4-7459-4556-affa-0fa5de969cc5",
        "Name": "Utils",
        "ParentId": "511da801-3cf9-4425-b7d0-3efd0b30f308",
        "Type": 0,
        "Items": [
          {
            "Id": "2567e692-9d76-4213-b280-23158689e888",
            "Name": "CsvHelper.cs",
            "ParentId": "c8264ca4-7459-4556-affa-0fa5de969cc5",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Text;\nusing System.Reflection;\n\nnamespace DataExportUtility.Utils\n{\n    public static class CsvHelper\n    {\n        public static string ConvertToCsv<T>(IEnumerable<T> data)\n        {\n            var sb = new StringBuilder();\n            var properties = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);\n            \n            // Write header\n            for (int i = 0; i < properties.Length; i++)\n            {\n                sb.Append(properties[i].Name);\n                if (i < properties.Length - 1)\n                {\n                    sb.Append(\",\");\n                }\n            }\n            sb.AppendLine();\n            \n            // Write rows\n            foreach (var item in data)\n            {\n                for (int i = 0; i < properties.Length; i++)\n                {\n                    var value = properties[i].GetValue(item, null);\n                    string stringValue = value != null ? value.ToString().Replace(\",\", \";\") : string.Empty;\n                    sb.Append(stringValue);\n                    if (i < properties.Length - 1)\n                    {\n                        sb.Append(\",\");\n                    }\n                }\n                sb.AppendLine();\n            }\n            \n            return sb.ToString();\n        }\n    }\n}",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "5c3450ee-c908-43d3-a8c9-2d88da88ef9f",
    "Name": "DataImportUtility",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "b2288115-6e06-4e70-b20d-251919ddb57f",
        "Name": "Program.cs",
        "ParentId": "5c3450ee-c908-43d3-a8c9-2d88da88ef9f",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\n\nnamespace DataImportUtility\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var host = Host.CreateDefaultBuilder(args)\n                .ConfigureServices((hostContext, services) =>\n                {\n                    services.AddHttpClient();\n                    services.AddSingleton<Services.IDataImportService, Services.DataImportService>();\n                    services.AddSingleton<Clients.IExternalDataClient, Clients.ExternalDataClient>();\n                    services.AddSingleton<Infrastructure.IDataRepository, Infrastructure.DataRepository>();\n                    services.AddHostedService<Workers.ImportWorker>();\n                })\n                .ConfigureLogging(logging =>\n                {\n                    logging.ClearProviders();\n                    logging.AddConsole();\n                })\n                .Build();\n\n            await host.RunAsync();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "cc1fdd59-3172-407b-9c2d-b836e16591d4",
        "Name": "Workers",
        "ParentId": "5c3450ee-c908-43d3-a8c9-2d88da88ef9f",
        "Type": 0,
        "Items": [
          {
            "Id": "2542113d-811a-4420-a01c-0068fcc2e381",
            "Name": "ImportWorker.cs",
            "ParentId": "cc1fdd59-3172-407b-9c2d-b836e16591d4",
            "Type": 1,
            "Text": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing DataImportUtility.Services;\n\nnamespace DataImportUtility.Workers\n{\n    public class ImportWorker : BackgroundService\n    {\n        private readonly ILogger<ImportWorker> _logger;\n        private readonly IDataImportService _dataImportService;\n\n        public ImportWorker(ILogger<ImportWorker> logger, IDataImportService dataImportService)\n        {\n            _logger = logger;\n            _dataImportService = dataImportService;\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            _logger.LogInformation(\"Data Import Worker started.\");\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                try\n                {\n                    await _dataImportService.ImportDataAsync(stoppingToken);\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"Error occurred during data import.\");\n                }\n                await Task.Delay(TimeSpan.FromMinutes(5), stoppingToken);\n            }\n            _logger.LogInformation(\"Data Import Worker stopping.\");\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "46c2f784-18ee-46d2-8288-3740d457c395",
        "Name": "Services",
        "ParentId": "5c3450ee-c908-43d3-a8c9-2d88da88ef9f",
        "Type": 0,
        "Items": [
          {
            "Id": "379d519b-4ec0-4fb8-912c-1eca7b960616",
            "Name": "IDataImportService.cs",
            "ParentId": "46c2f784-18ee-46d2-8288-3740d457c395",
            "Type": 1,
            "Text": "using System.Threading;\nusing System.Threading.Tasks;\n\nnamespace DataImportUtility.Services\n{\n    public interface IDataImportService\n    {\n        Task ImportDataAsync(CancellationToken cancellationToken);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "8545174f-1d67-4415-be2f-036222fefc28",
            "Name": "DataImportService.cs",
            "ParentId": "46c2f784-18ee-46d2-8288-3740d457c395",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing DataImportUtility.Clients;\nusing DataImportUtility.Infrastructure;\nusing DataImportUtility.Models;\n\nnamespace DataImportUtility.Services\n{\n    public class DataImportService : IDataImportService\n    {\n        private readonly ILogger<DataImportService> _logger;\n        private readonly IExternalDataClient _externalDataClient;\n        private readonly IDataRepository _dataRepository;\n\n        public DataImportService(ILogger<DataImportService> logger, IExternalDataClient externalDataClient, IDataRepository dataRepository)\n        {\n            _logger = logger;\n            _externalDataClient = externalDataClient;\n            _dataRepository = dataRepository;\n        }\n\n        public async Task ImportDataAsync(CancellationToken cancellationToken)\n        {\n            _logger.LogInformation(\"Starting data import process.\");\n            List<ImportedRecord> records = await _externalDataClient.FetchDataAsync(cancellationToken);\n            foreach (var record in records)\n            {\n                await _dataRepository.SaveRecordAsync(record, cancellationToken);\n                _logger.LogInformation(\"Imported record with ID {RecordId}.\", record.Id);\n            }\n            _logger.LogInformation(\"Data import process completed.\");\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "4d329fe3-4a0d-4ec2-902b-27df3288447c",
        "Name": "Clients",
        "ParentId": "5c3450ee-c908-43d3-a8c9-2d88da88ef9f",
        "Type": 0,
        "Items": [
          {
            "Id": "09230daa-1cdf-49bd-9b60-409a88e173bd",
            "Name": "IExternalDataClient.cs",
            "ParentId": "4d329fe3-4a0d-4ec2-902b-27df3288447c",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing DataImportUtility.Models;\n\nnamespace DataImportUtility.Clients\n{\n    public interface IExternalDataClient\n    {\n        Task<List<ImportedRecord>> FetchDataAsync(CancellationToken cancellationToken);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "43209b24-bfac-4f6e-8592-8d7a04639a17",
            "Name": "ExternalDataClient.cs",
            "ParentId": "4d329fe3-4a0d-4ec2-902b-27df3288447c",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing DataImportUtility.Models;\n\nnamespace DataImportUtility.Clients\n{\n    public class ExternalDataClient : IExternalDataClient\n    {\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<ExternalDataClient> _logger;\n\n        public ExternalDataClient(IHttpClientFactory httpClientFactory, ILogger<ExternalDataClient> logger)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n            _logger = logger;\n        }\n\n        public async Task<List<ImportedRecord>> FetchDataAsync(CancellationToken cancellationToken)\n        {\n            var requestUri = \"https://api.externaldata.com/records\";\n            HttpResponseMessage response = await _httpClient.GetAsync(requestUri, cancellationToken);\n            response.EnsureSuccessStatusCode();\n            var jsonString = await response.Content.ReadAsStringAsync(cancellationToken);\n            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };\n            List<ImportedRecord> records = JsonSerializer.Deserialize<List<ImportedRecord>>(jsonString, options);\n            _logger.LogInformation(\"Fetched {Count} records from external data source.\", records?.Count ?? 0);\n            return records;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "1600f587-23f2-4533-9bf9-8a2cbed76a92",
        "Name": "Models",
        "ParentId": "5c3450ee-c908-43d3-a8c9-2d88da88ef9f",
        "Type": 0,
        "Items": [
          {
            "Id": "0b9b20df-cc9a-4086-85e7-a109e1afd3cd",
            "Name": "ImportedRecord.cs",
            "ParentId": "1600f587-23f2-4533-9bf9-8a2cbed76a92",
            "Type": 1,
            "Text": "using System;\n\nnamespace DataImportUtility.Models\n{\n    public class ImportedRecord\n    {\n        public int Id { get; set; }\n        public string Data { get; set; }\n        public DateTime ImportedAt { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "226cb923-1507-4faa-8661-67e30930c484",
        "Name": "Infrastructure",
        "ParentId": "5c3450ee-c908-43d3-a8c9-2d88da88ef9f",
        "Type": 0,
        "Items": [
          {
            "Id": "7a1d5a0d-025b-4866-8c69-8899e242ee83",
            "Name": "IDataRepository.cs",
            "ParentId": "226cb923-1507-4faa-8661-67e30930c484",
            "Type": 1,
            "Text": "using System.Threading;\nusing System.Threading.Tasks;\nusing DataImportUtility.Models;\n\nnamespace DataImportUtility.Infrastructure\n{\n    public interface IDataRepository\n    {\n        Task SaveRecordAsync(ImportedRecord record, CancellationToken cancellationToken);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e567cee1-5610-4d90-91f7-36bc0c9fbffb",
            "Name": "DataRepository.cs",
            "ParentId": "226cb923-1507-4faa-8661-67e30930c484",
            "Type": 1,
            "Text": "using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing DataImportUtility.Models;\n\nnamespace DataImportUtility.Infrastructure\n{\n    public class DataRepository : IDataRepository\n    {\n        private readonly string _connectionString;\n        private readonly ILogger<DataRepository> _logger;\n\n        public DataRepository(IConfiguration configuration, ILogger<DataRepository> logger)\n        {\n            _connectionString = configuration.GetConnectionString(\"DefaultConnection\");\n            if (string.IsNullOrEmpty(_connectionString))\n            {\n                throw new ArgumentNullException(\"Connection string 'DefaultConnection' is not configured.\");\n            }\n            _logger = logger;\n        }\n\n        public async Task SaveRecordAsync(ImportedRecord record, CancellationToken cancellationToken)\n        {\n            using (SqlConnection connection = new SqlConnection(_connectionString))\n            {\n                await connection.OpenAsync(cancellationToken);\n                using (SqlCommand command = connection.CreateCommand())\n                {\n                    command.CommandText = \"INSERT INTO ImportedRecords (Id, Data, ImportedAt) VALUES (@Id, @Data, @ImportedAt)\";\n                    command.CommandType = CommandType.Text;\n                    command.Parameters.Add(new SqlParameter(\"@Id\", SqlDbType.Int) { Value = record.Id });\n                    command.Parameters.Add(new SqlParameter(\"@Data\", SqlDbType.NVarChar, -1) { Value = record.Data });\n                    command.Parameters.Add(new SqlParameter(\"@ImportedAt\", SqlDbType.DateTime) { Value = record.ImportedAt });\n                    await command.ExecuteNonQueryAsync(cancellationToken);\n                    _logger.LogInformation(\"Record with ID {RecordId} saved to database.\", record.Id);\n                }\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "f5a41bce-ece6-44af-9dc5-c563fb8d834b",
    "Name": "StandardizedErrorHandling",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "b80ca221-2e55-4f65-8170-44eb8e7f803f",
        "Name": "Program.cs",
        "ParentId": "f5a41bce-ece6-44af-9dc5-c563fb8d834b",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace StandardizedErrorHandling\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "23e9ab87-7c2e-491b-a86e-63467f305ddc",
        "Name": "Startup.cs",
        "ParentId": "f5a41bce-ece6-44af-9dc5-c563fb8d834b",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing StandardizedErrorHandling.Middleware;\n\nnamespace StandardizedErrorHandling\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            // Global exception handling middleware should be registered first\n            app.UseMiddleware<ExceptionHandlingMiddleware>();\n\n            if (env.IsDevelopment())\n            {\n                // Additional development middleware can be activated here\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "c696d3a6-1791-470c-87d3-21ca59ad8e87",
        "Name": "Controllers",
        "ParentId": "f5a41bce-ece6-44af-9dc5-c563fb8d834b",
        "Type": 0,
        "Items": [
          {
            "Id": "16b39f58-9eac-4217-8673-bc00bc8c707d",
            "Name": "ErrorDemoController.cs",
            "ParentId": "c696d3a6-1791-470c-87d3-21ca59ad8e87",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System;\n\nnamespace StandardizedErrorHandling.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ErrorDemoController : ControllerBase\n    {\n        // This endpoint is to demonstrate standardized error handling\n        [HttpGet(\"throw\")]\n        public IActionResult ThrowError()\n        {\n            throw new InvalidOperationException(\"A test exception has been thrown to demonstrate error handling.\");\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "c7f26819-fc6e-4514-bf25-7a75146f36e0",
        "Name": "Middleware",
        "ParentId": "f5a41bce-ece6-44af-9dc5-c563fb8d834b",
        "Type": 0,
        "Items": [
          {
            "Id": "a56f7876-8ae0-4766-94c6-f4bf08caa7dd",
            "Name": "ExceptionHandlingMiddleware.cs",
            "ParentId": "c7f26819-fc6e-4514-bf25-7a75146f36e0",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing StandardizedErrorHandling.Models;\nusing System;\nusing System.Net;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace StandardizedErrorHandling.Middleware\n{\n    public class ExceptionHandlingMiddleware\n    {\n        private readonly RequestDelegate _next;\n        private readonly ILogger<ExceptionHandlingMiddleware> _logger;\n\n        public ExceptionHandlingMiddleware(RequestDelegate next, ILogger<ExceptionHandlingMiddleware> logger)\n        {\n            _next = next;\n            _logger = logger;\n        }\n\n        public async Task InvokeAsync(HttpContext httpContext)\n        {\n            try\n            {\n                await _next(httpContext);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"An unhandled exception occurred.\");\n                await HandleExceptionAsync(httpContext, ex);\n            }\n        }\n\n        private static Task HandleExceptionAsync(HttpContext context, Exception exception)\n        {\n            context.Response.ContentType = \"application/json\";\n            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;\n\n            var errorDetails = new ErrorDetails\n            {\n                StatusCode = context.Response.StatusCode,\n                Message = \"An unexpected error occurred. Please try again later.\"\n            };\n\n            var jsonResponse = JsonSerializer.Serialize(errorDetails);\n            return context.Response.WriteAsync(jsonResponse);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "329723f3-e67b-4c5e-a006-6773910f0fbb",
        "Name": "Models",
        "ParentId": "f5a41bce-ece6-44af-9dc5-c563fb8d834b",
        "Type": 0,
        "Items": [
          {
            "Id": "e24a45a3-eded-48dd-ac6b-8deb0c872899",
            "Name": "ErrorDetails.cs",
            "ParentId": "329723f3-e67b-4c5e-a006-6773910f0fbb",
            "Type": 1,
            "Text": "using System.Text.Json;\n\nnamespace StandardizedErrorHandling.Models\n{\n    public class ErrorDetails\n    {\n        public int StatusCode { get; set; }\n        public string Message { get; set; }\n\n        public override string ToString()\n        {\n            return JsonSerializer.Serialize(this);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "22444c44-bebf-4d36-aa88-1d24532b8b10",
    "Name": "DataValidationEngine",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "dab6cf74-7a1a-4a55-aa20-39b4df3c983c",
        "Name": "Program.cs",
        "ParentId": "22444c44-bebf-4d36-aa88-1d24532b8b10",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace DataValidationEngine\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "7fde47e5-de4d-4d45-9e53-00c6697a1f25",
        "Name": "Startup.cs",
        "ParentId": "22444c44-bebf-4d36-aa88-1d24532b8b10",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing DataValidationEngine.Services;\nusing DataValidationEngine.Data;\n\nnamespace DataValidationEngine\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IValidationService, ValidationService>();\n            services.AddSingleton<IValidationRepository, ValidationRepository>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            \n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3cd09ad9-11d2-427d-923d-89f28e1d6c90",
        "Name": "Controllers",
        "ParentId": "22444c44-bebf-4d36-aa88-1d24532b8b10",
        "Type": 0,
        "Items": [
          {
            "Id": "95bf46c4-5322-4e53-9ba0-cc72594d616a",
            "Name": "ValidationController.cs",
            "ParentId": "3cd09ad9-11d2-427d-923d-89f28e1d6c90",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing DataValidationEngine.Services;\nusing DataValidationEngine.Models;\n\nnamespace DataValidationEngine.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ValidationController : ControllerBase\n    {\n        private readonly IValidationService _validationService;\n\n        public ValidationController(IValidationService validationService)\n        {\n            _validationService = validationService;\n        }\n\n        [HttpPost(\"validate\")]\n        public IActionResult ValidateData([FromBody] ValidationRequest request)\n        {\n            var result = _validationService.Validate(request);\n            if (result.IsValid)\n            {\n                return Ok(result);\n            }\n            return BadRequest(result);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "94b797c4-1f54-47a6-b785-9d3e00ec27fd",
        "Name": "Services",
        "ParentId": "22444c44-bebf-4d36-aa88-1d24532b8b10",
        "Type": 0,
        "Items": [
          {
            "Id": "555b0b4d-e959-4583-8a36-d7685f1585fe",
            "Name": "IValidationService.cs",
            "ParentId": "94b797c4-1f54-47a6-b785-9d3e00ec27fd",
            "Type": 1,
            "Text": "using DataValidationEngine.Models;\n\nnamespace DataValidationEngine.Services\n{\n    public interface IValidationService\n    {\n        ValidationResult Validate(ValidationRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "9ef061ce-ac60-4442-81c1-b4b18be1edfb",
            "Name": "ValidationService.cs",
            "ParentId": "94b797c4-1f54-47a6-b785-9d3e00ec27fd",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Text.RegularExpressions;\nusing DataValidationEngine.Models;\nusing DataValidationEngine.Data;\n\nnamespace DataValidationEngine.Services\n{\n    public class ValidationService : IValidationService\n    {\n        private readonly IValidationRepository _repository;\n\n        public ValidationService(IValidationRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public ValidationResult Validate(ValidationRequest request)\n        {\n            var errors = new List<string>();\n\n            if (string.IsNullOrWhiteSpace(request.DataField1))\n            {\n                errors.Add(\"DataField1 is required.\");\n            }\n\n            if (string.IsNullOrWhiteSpace(request.DataField2))\n            {\n                errors.Add(\"DataField2 is required.\");\n            }\n\n            if (!string.IsNullOrWhiteSpace(request.DataField1) && request.DataField1.Length > 50)\n            {\n                errors.Add(\"DataField1 should not exceed 50 characters.\");\n            }\n\n            if (!string.IsNullOrWhiteSpace(request.DataField2))\n            {\n                if (!Regex.IsMatch(request.DataField2, \"^\\d+$\"))\n                {\n                    errors.Add(\"DataField2 must be numeric.\");\n                }\n            }\n\n            if (!_repository.IsValidReference(request.ReferenceId))\n            {\n                errors.Add(\"ReferenceId is invalid.\");\n            }\n\n            bool isValid = errors.Count == 0;\n            return new ValidationResult\n            {\n                IsValid = isValid,\n                Errors = errors.ToArray()\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "da7e48ac-174b-4403-9dab-e0769dc80468",
        "Name": "Models",
        "ParentId": "22444c44-bebf-4d36-aa88-1d24532b8b10",
        "Type": 0,
        "Items": [
          {
            "Id": "ad2c62aa-8d2b-4d86-9285-8536afd5c4cf",
            "Name": "ValidationRequest.cs",
            "ParentId": "da7e48ac-174b-4403-9dab-e0769dc80468",
            "Type": 1,
            "Text": "namespace DataValidationEngine.Models\n{\n    public class ValidationRequest\n    {\n        public string DataField1 { get; set; }\n        public string DataField2 { get; set; }\n        public string ReferenceId { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "9da464ff-1d23-4b8f-8773-d149982016f9",
            "Name": "ValidationResult.cs",
            "ParentId": "da7e48ac-174b-4403-9dab-e0769dc80468",
            "Type": 1,
            "Text": "namespace DataValidationEngine.Models\n{\n    public class ValidationResult\n    {\n        public bool IsValid { get; set; }\n        public string[] Errors { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "c7307266-081c-44d6-8693-613b2406dadd",
        "Name": "Data",
        "ParentId": "22444c44-bebf-4d36-aa88-1d24532b8b10",
        "Type": 0,
        "Items": [
          {
            "Id": "af6d7025-a880-4bf5-85df-21eee07c1fe8",
            "Name": "IValidationRepository.cs",
            "ParentId": "c7307266-081c-44d6-8693-613b2406dadd",
            "Type": 1,
            "Text": "namespace DataValidationEngine.Data\n{\n    public interface IValidationRepository\n    {\n        bool IsValidReference(string referenceId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "26f4b31f-6b47-41c5-9b6a-98da240533ca",
            "Name": "ValidationRepository.cs",
            "ParentId": "c7307266-081c-44d6-8693-613b2406dadd",
            "Type": 1,
            "Text": "using System.Collections.Generic;\n\nnamespace DataValidationEngine.Data\n{\n    public class ValidationRepository : IValidationRepository\n    {\n        private readonly HashSet<string> _validReferences;\n\n        public ValidationRepository()\n        {\n            // In a production environment, these references would be fetched from a persistent store\n            _validReferences = new HashSet<string>\n            {\n                \"REF1001\",\n                \"REF1002\",\n                \"REF1003\"\n            };\n        }\n\n        public bool IsValidReference(string referenceId)\n        {\n            return !string.IsNullOrEmpty(referenceId) && _validReferences.Contains(referenceId);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "1a3405f3-545b-41e6-b859-b704c943054e",
    "Name": "APIGatewayService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "bd8f2db3-a420-4826-ab16-b9e64d06ab2a",
        "Name": "Program.cs",
        "ParentId": "1a3405f3-545b-41e6-b859-b704c943054e",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace APIGatewayService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "bce0cc70-3233-4f61-8254-7317aea87a7f",
        "Name": "Startup.cs",
        "ParentId": "1a3405f3-545b-41e6-b859-b704c943054e",
        "Type": 1,
        "Text": "using System.Text;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing APIGatewayService.Services;\nusing APIGatewayService.Middleware;\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.IdentityModel.Tokens;\n\nnamespace APIGatewayService\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient();\n\n            // JWT Authentication configuration\n            var key = Encoding.ASCII.GetBytes(Configuration[\"Jwt:Key\"]);\n            services.AddAuthentication(x =>\n            {\n                x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n                x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n            })\n            .AddJwtBearer(x =>\n            {\n                x.RequireHttpsMetadata = true;\n                x.SaveToken = true;\n                x.TokenValidationParameters = new TokenValidationParameters\n                {\n                    ValidateIssuerSigningKey = true,\n                    IssuerSigningKey = new SymmetricSecurityKey(key),\n                    ValidateIssuer = false,\n                    ValidateAudience = false\n                };\n            });\n\n            // Register the API Gateway service\n            services.AddSingleton<IApiGatewayService, ApiGatewayService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n            app.UseAuthentication();\n            app.UseAuthorization();\n\n            // Middleware for logging requests and responses\n            app.UseMiddleware<RequestLoggingMiddleware>();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "9e2c7360-3afe-436c-bf95-d6f5c4fe47d7",
        "Name": "Controllers",
        "ParentId": "1a3405f3-545b-41e6-b859-b704c943054e",
        "Type": 0,
        "Items": [
          {
            "Id": "986bbfe6-8bee-46ae-b06e-8bf7e09e764f",
            "Name": "GatewayController.cs",
            "ParentId": "9e2c7360-3afe-436c-bf95-d6f5c4fe47d7",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing APIGatewayService.Services;\nusing APIGatewayService.Models;\n\nnamespace APIGatewayService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class GatewayController : ControllerBase\n    {\n        private readonly IApiGatewayService _gatewayService;\n\n        public GatewayController(IApiGatewayService gatewayService)\n        {\n            _gatewayService = gatewayService;\n        }\n\n        [HttpPost(\"forward\")]\n        public async Task<IActionResult> ForwardRequest([FromBody] GatewayRequest request)\n        {\n            if (request == null || string.IsNullOrEmpty(request.Endpoint))\n            {\n                return BadRequest(\"Invalid request data.\");\n            }\n\n            GatewayResponse response = await _gatewayService.ForwardRequestAsync(request);\n            return StatusCode(response.StatusCode, response);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "356d2965-6041-4ff9-84bb-767e3decf76a",
        "Name": "Services",
        "ParentId": "1a3405f3-545b-41e6-b859-b704c943054e",
        "Type": 0,
        "Items": [
          {
            "Id": "ca841c51-c538-4883-84e6-045cd156016a",
            "Name": "IApiGatewayService.cs",
            "ParentId": "356d2965-6041-4ff9-84bb-767e3decf76a",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing APIGatewayService.Models;\n\nnamespace APIGatewayService.Services\n{\n    public interface IApiGatewayService\n    {\n        Task<GatewayResponse> ForwardRequestAsync(GatewayRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "10eaaa1b-5543-497a-a61f-b1782f963b26",
            "Name": "ApiGatewayService.cs",
            "ParentId": "356d2965-6041-4ff9-84bb-767e3decf76a",
            "Type": 1,
            "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\nusing APIGatewayService.Models;\nusing Microsoft.Extensions.Configuration;\n\nnamespace APIGatewayService.Services\n{\n    public class ApiGatewayService : IApiGatewayService\n    {\n        private readonly IHttpClientFactory _httpClientFactory;\n        private readonly IConfiguration _configuration;\n\n        public ApiGatewayService(IHttpClientFactory httpClientFactory, IConfiguration configuration)\n        {\n            _httpClientFactory = httpClientFactory;\n            _configuration = configuration;\n        }\n\n        public async Task<GatewayResponse> ForwardRequestAsync(GatewayRequest request)\n        {\n            try\n            {\n                // Lookup target service URL from configuration\n                string targetUrl = _configuration[$\"ServiceUrls:{request.ServiceName}\"];\n                if (string.IsNullOrEmpty(targetUrl))\n                {\n                    return new GatewayResponse\n                    {\n                        StatusCode = 404,\n                        Body = \"Service not found.\"\n                    };\n                }\n\n                // Build full URL by appending the endpoint path\n                targetUrl = targetUrl.TrimEnd('/') + \"/\" + request.Endpoint.TrimStart('/');\n\n                HttpClient client = _httpClientFactory.CreateClient();\n                var httpRequest = new HttpRequestMessage(new HttpMethod(request.Method), targetUrl);\n\n                if (!string.IsNullOrEmpty(request.Body))\n                {\n                    httpRequest.Content = new StringContent(request.Body, Encoding.UTF8, \"application/json\");\n                }\n\n                if (request.Headers != null)\n                {\n                    foreach (var header in request.Headers)\n                    {\n                        httpRequest.Headers.Add(header.Key, header.Value);\n                    }\n                }\n\n                HttpResponseMessage httpResponse = await client.SendAsync(httpRequest);\n                string responseBody = await httpResponse.Content.ReadAsStringAsync();\n\n                return new GatewayResponse\n                {\n                    StatusCode = (int)httpResponse.StatusCode,\n                    Body = responseBody\n                };\n            }\n            catch (Exception ex)\n            {\n                return new GatewayResponse\n                {\n                    StatusCode = 500,\n                    Body = $\"Error forwarding request: {ex.Message}\"\n                };\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "b3eddeaf-aab6-47db-ba6d-ff4a169e67f9",
        "Name": "Models",
        "ParentId": "1a3405f3-545b-41e6-b859-b704c943054e",
        "Type": 0,
        "Items": [
          {
            "Id": "f7b8a497-ff4c-4980-aff9-4aa525420a4c",
            "Name": "GatewayRequest.cs",
            "ParentId": "b3eddeaf-aab6-47db-ba6d-ff4a169e67f9",
            "Type": 1,
            "Text": "using System.Collections.Generic;\n\nnamespace APIGatewayService.Models\n{\n    public class GatewayRequest\n    {\n        public string ServiceName { get; set; }\n        public string Endpoint { get; set; }\n        public string Method { get; set; }\n        public string Body { get; set; }\n        public Dictionary<string, string> Headers { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "91780795-033e-4554-8b46-652f1bfd594f",
            "Name": "GatewayResponse.cs",
            "ParentId": "b3eddeaf-aab6-47db-ba6d-ff4a169e67f9",
            "Type": 1,
            "Text": "namespace APIGatewayService.Models\n{\n    public class GatewayResponse\n    {\n        public int StatusCode { get; set; }\n        public string Body { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "6c89c7e8-32a2-43f2-b215-63edd19ea073",
        "Name": "Middleware",
        "ParentId": "1a3405f3-545b-41e6-b859-b704c943054e",
        "Type": 0,
        "Items": [
          {
            "Id": "706a8acf-932f-405a-bcab-188f43d5dbbe",
            "Name": "RequestLoggingMiddleware.cs",
            "ParentId": "6c89c7e8-32a2-43f2-b215-63edd19ea073",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\n\nnamespace APIGatewayService.Middleware\n{\n    public class RequestLoggingMiddleware\n    {\n        private readonly RequestDelegate _next;\n        private readonly ILogger<RequestLoggingMiddleware> _logger;\n\n        public RequestLoggingMiddleware(RequestDelegate next, ILogger<RequestLoggingMiddleware> logger)\n        {\n            _next = next;\n            _logger = logger;\n        }\n\n        public async Task Invoke(HttpContext context)\n        {\n            _logger.LogInformation($\"Incoming request: {context.Request.Method} {context.Request.Path}\");\n            await _next(context);\n            _logger.LogInformation($\"Outgoing response: {context.Response.StatusCode}\");\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "d84c7858-190f-4b0a-a578-1269e48117ae",
    "Name": "MicroservicesOrchestrator",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "f6f7f047-61c6-4a13-9a00-27af0571b255",
        "Name": "Program.cs",
        "ParentId": "d84c7858-190f-4b0a-a578-1269e48117ae",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace MicroservicesOrchestrator\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "dd61e3f6-cd14-4877-abfa-50df455883f2",
        "Name": "Startup.cs",
        "ParentId": "d84c7858-190f-4b0a-a578-1269e48117ae",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing MicroservicesOrchestrator.Services;\nusing MicroservicesOrchestrator.Clients;\nusing MicroservicesOrchestrator.Infrastructure;\n\nnamespace MicroservicesOrchestrator\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            // Configure HTTP Client with a retry policy handler for robust external calls\n            services.AddHttpClient<IMicroserviceClient, MicroserviceClient>()\n                .AddHttpMessageHandler<RetryPolicyHandler>();\n            services.AddSingleton<IOrchestratorService, OrchestratorService>();\n            services.AddTransient<RetryPolicyHandler>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            \n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "4b3f913e-ab09-470e-8a65-5d8292a44fd0",
        "Name": "Controllers",
        "ParentId": "d84c7858-190f-4b0a-a578-1269e48117ae",
        "Type": 0,
        "Items": [
          {
            "Id": "d1005a19-ccc8-4c08-a2a4-c5435f8a818b",
            "Name": "OrchestratorController.cs",
            "ParentId": "4b3f913e-ab09-470e-8a65-5d8292a44fd0",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing MicroservicesOrchestrator.Services;\nusing MicroservicesOrchestrator.Models;\n\nnamespace MicroservicesOrchestrator.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class OrchestratorController : ControllerBase\n    {\n        private readonly IOrchestratorService _orchestratorService;\n\n        public OrchestratorController(IOrchestratorService orchestratorService)\n        {\n            _orchestratorService = orchestratorService;\n        }\n\n        [HttpPost(\"orchestrate\")]\n        public async Task<IActionResult> Orchestrate([FromBody] ServiceRequest request)\n        {\n            OrchestrationResult result = await _orchestratorService.OrchestrateAsync(request);\n            if(result.OverallSuccess)\n            {\n                return Ok(result);\n            }\n            return BadRequest(result);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "b581b46b-15a1-46fd-bd31-b499980683d5",
        "Name": "Services",
        "ParentId": "d84c7858-190f-4b0a-a578-1269e48117ae",
        "Type": 0,
        "Items": [
          {
            "Id": "237163f6-f3d8-4414-a6f3-33e0d8eafddc",
            "Name": "IOrchestratorService.cs",
            "ParentId": "b581b46b-15a1-46fd-bd31-b499980683d5",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing MicroservicesOrchestrator.Models;\n\nnamespace MicroservicesOrchestrator.Services\n{\n    public interface IOrchestratorService\n    {\n        Task<OrchestrationResult> OrchestrateAsync(ServiceRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "40bf1f7b-22fc-42f0-85a6-530b6a26578b",
            "Name": "OrchestratorService.cs",
            "ParentId": "b581b46b-15a1-46fd-bd31-b499980683d5",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing MicroservicesOrchestrator.Clients;\nusing MicroservicesOrchestrator.Models;\n\nnamespace MicroservicesOrchestrator.Services\n{\n    public class OrchestratorService : IOrchestratorService\n    {\n        private readonly IMicroserviceClient _microserviceClient;\n\n        public OrchestratorService(IMicroserviceClient microserviceClient)\n        {\n            _microserviceClient = microserviceClient;\n        }\n\n        public async Task<OrchestrationResult> OrchestrateAsync(ServiceRequest request)\n        {\n            // Coordinate the call to the appropriate microservice\n            var responses = new List<ServiceResponse>();\n            ServiceResponse response = await _microserviceClient.CallServiceAsync(request);\n            responses.Add(response);\n            bool overallSuccess = response.Success;\n\n            return new OrchestrationResult\n            {\n                OverallSuccess = overallSuccess,\n                Responses = responses\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "5090056f-106b-4f25-9acc-32abf3a550e5",
        "Name": "Clients",
        "ParentId": "d84c7858-190f-4b0a-a578-1269e48117ae",
        "Type": 0,
        "Items": [
          {
            "Id": "ab0bcfe0-ff79-4f14-a23a-41c5782fa7fb",
            "Name": "IMicroserviceClient.cs",
            "ParentId": "5090056f-106b-4f25-9acc-32abf3a550e5",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing MicroservicesOrchestrator.Models;\n\nnamespace MicroservicesOrchestrator.Clients\n{\n    public interface IMicroserviceClient\n    {\n        Task<ServiceResponse> CallServiceAsync(ServiceRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "7e85ec37-88cd-4fcc-83fb-0829f0568e67",
            "Name": "MicroserviceClient.cs",
            "ParentId": "5090056f-106b-4f25-9acc-32abf3a550e5",
            "Type": 1,
            "Text": "using System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\nusing MicroservicesOrchestrator.Models;\n\nnamespace MicroservicesOrchestrator.Clients\n{\n    public class MicroserviceClient : IMicroserviceClient\n    {\n        private readonly HttpClient _httpClient;\n\n        public MicroserviceClient(HttpClient httpClient)\n        {\n            _httpClient = httpClient;\n        }\n\n        public async Task<ServiceResponse> CallServiceAsync(ServiceRequest request)\n        {\n            // Use the provided endpoint from the request to call the microservice\n            HttpResponseMessage response = await _httpClient.PostAsJsonAsync(request.Endpoint, request);\n            response.EnsureSuccessStatusCode();\n            ServiceResponse serviceResponse = await response.Content.ReadFromJsonAsync<ServiceResponse>();\n            return serviceResponse;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "871f2682-6443-4587-bc83-3f396db65d23",
        "Name": "Models",
        "ParentId": "d84c7858-190f-4b0a-a578-1269e48117ae",
        "Type": 0,
        "Items": [
          {
            "Id": "54775665-60b7-4758-984e-564eca8d9ec5",
            "Name": "ServiceRequest.cs",
            "ParentId": "871f2682-6443-4587-bc83-3f396db65d23",
            "Type": 1,
            "Text": "using System.Collections.Generic;\n\nnamespace MicroservicesOrchestrator.Models\n{\n    public class ServiceRequest\n    {\n        public string ServiceName { get; set; }\n        public string Endpoint { get; set; }\n        public Dictionary<string, string> Payload { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "bbe0cd84-47c2-463c-aa62-ba8df7856686",
            "Name": "ServiceResponse.cs",
            "ParentId": "871f2682-6443-4587-bc83-3f396db65d23",
            "Type": 1,
            "Text": "namespace MicroservicesOrchestrator.Models\n{\n    public class ServiceResponse\n    {\n        public string ServiceName { get; set; }\n        public bool Success { get; set; }\n        public string Data { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "742409a8-d95b-4de9-b6af-fc8a6043bb4c",
            "Name": "OrchestrationResult.cs",
            "ParentId": "871f2682-6443-4587-bc83-3f396db65d23",
            "Type": 1,
            "Text": "using System.Collections.Generic;\n\nnamespace MicroservicesOrchestrator.Models\n{\n    public class OrchestrationResult\n    {\n        public bool OverallSuccess { get; set; }\n        public List<ServiceResponse> Responses { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "14688d7c-3626-4cb9-90c9-9ee95e4dca09",
        "Name": "Infrastructure",
        "ParentId": "d84c7858-190f-4b0a-a578-1269e48117ae",
        "Type": 0,
        "Items": [
          {
            "Id": "03090fb2-b63b-4932-96e1-6a6759cb6354",
            "Name": "RetryPolicyHandler.cs",
            "ParentId": "14688d7c-3626-4cb9-90c9-9ee95e4dca09",
            "Type": 1,
            "Text": "using System;\nusing System.Net.Http;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace MicroservicesOrchestrator.Infrastructure\n{\n    public class RetryPolicyHandler : DelegatingHandler\n    {\n        private readonly int _maxRetries = 3;\n\n        protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\n        {\n            HttpResponseMessage response = null;\n            for (int i = 0; i < _maxRetries; i++)\n            {\n                response = await base.SendAsync(request, cancellationToken);\n                if (response.IsSuccessStatusCode)\n                {\n                    return response;\n                }\n                // Exponential backoff delay\n                await Task.Delay(TimeSpan.FromSeconds(Math.Pow(2, i)), cancellationToken);\n            }\n            return response;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "bf8f8028-1a38-4f16-8ede-25a0862b2b01",
    "Name": "SessionManagementSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "bf58d6e1-42de-4991-add8-e49e0e9aaf11",
        "Name": "Program.cs",
        "ParentId": "bf8f8028-1a38-4f16-8ede-25a0862b2b01",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing SessionManagementSystem.Services;\nusing SessionManagementSystem.Data;\nusing SessionManagementSystem.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<ISessionService, SessionService>();\nbuilder.Services.AddSingleton<ISessionRepository, SessionRepository>();\nbuilder.Services.AddLogging();\n\nvar app = builder.Build();\n\napp.UseRouting();\n\n// Middleware to validate session based on header\napp.UseMiddleware<SessionMiddleware>();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "396245bc-ef58-4130-9c40-71871e886ff5",
        "Name": "Controllers",
        "ParentId": "bf8f8028-1a38-4f16-8ede-25a0862b2b01",
        "Type": 0,
        "Items": [
          {
            "Id": "f29d0ed8-3915-4c46-a8cb-57367839427f",
            "Name": "SessionController.cs",
            "ParentId": "396245bc-ef58-4130-9c40-71871e886ff5",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing SessionManagementSystem.Models;\nusing SessionManagementSystem.Services;\n\nnamespace SessionManagementSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class SessionController : ControllerBase\n    {\n        private readonly ISessionService _sessionService;\n\n        public SessionController(ISessionService sessionService)\n        {\n            _sessionService = sessionService;\n        }\n\n        [HttpPost(\"create\")]\n        public IActionResult CreateSession([FromBody] SessionRequest request)\n        {\n            var session = _sessionService.CreateSession(request);\n            return CreatedAtAction(nameof(GetSession), new { id = session.SessionId }, session);\n        }\n\n        [HttpGet(\"{id}\")]\n        public IActionResult GetSession(string id)\n        {\n            var session = _sessionService.GetSession(id);\n            if (session == null)\n                return NotFound();\n            return Ok(session);\n        }\n\n        [HttpPut(\"{id}\")]\n        public IActionResult UpdateSession(string id, [FromBody] SessionRequest request)\n        {\n            var updatedSession = _sessionService.UpdateSession(id, request);\n            if (updatedSession == null)\n                return NotFound();\n            return Ok(updatedSession);\n        }\n\n        [HttpDelete(\"{id}\")]\n        public IActionResult DeleteSession(string id)\n        {\n            var success = _sessionService.DeleteSession(id);\n            if (!success)\n                return NotFound();\n            return NoContent();\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "edc6e3f9-c5c0-410e-959c-87dc5bfc918c",
        "Name": "Services",
        "ParentId": "bf8f8028-1a38-4f16-8ede-25a0862b2b01",
        "Type": 0,
        "Items": [
          {
            "Id": "c2e8aad2-a4ec-469c-816b-4f9b2d0cf675",
            "Name": "ISessionService.cs",
            "ParentId": "edc6e3f9-c5c0-410e-959c-87dc5bfc918c",
            "Type": 1,
            "Text": "using SessionManagementSystem.Models;\n\nnamespace SessionManagementSystem.Services\n{\n    public interface ISessionService\n    {\n        Session CreateSession(SessionRequest request);\n        Session GetSession(string sessionId);\n        Session UpdateSession(string sessionId, SessionRequest request);\n        bool DeleteSession(string sessionId);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "cd812a89-9358-4d43-9b3d-e35509107ea0",
            "Name": "SessionService.cs",
            "ParentId": "edc6e3f9-c5c0-410e-959c-87dc5bfc918c",
            "Type": 1,
            "Text": "using System;\nusing SessionManagementSystem.Models;\nusing SessionManagementSystem.Data;\n\nnamespace SessionManagementSystem.Services\n{\n    public class SessionService : ISessionService\n    {\n        private readonly ISessionRepository _repository;\n\n        public SessionService(ISessionRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public Session CreateSession(SessionRequest request)\n        {\n            var session = new Session\n            {\n                SessionId = Guid.NewGuid().ToString(),\n                UserId = request.UserId,\n                CreatedAt = DateTime.UtcNow,\n                LastActivity = DateTime.UtcNow,\n                ExpiresAt = DateTime.UtcNow.AddMinutes(request.TimeoutInMinutes > 0 ? request.TimeoutInMinutes : 30),\n                Data = request.Data\n            };\n            _repository.AddSession(session);\n            return session;\n        }\n\n        public Session GetSession(string sessionId)\n        {\n            return _repository.GetSession(sessionId);\n        }\n\n        public Session UpdateSession(string sessionId, SessionRequest request)\n        {\n            var existing = _repository.GetSession(sessionId);\n            if (existing == null)\n                return null;\n            existing.LastActivity = DateTime.UtcNow;\n            existing.ExpiresAt = DateTime.UtcNow.AddMinutes(request.TimeoutInMinutes > 0 ? request.TimeoutInMinutes : 30);\n            existing.Data = request.Data;\n            _repository.UpdateSession(existing);\n            return existing;\n        }\n\n        public bool DeleteSession(string sessionId)\n        {\n            return _repository.DeleteSession(sessionId);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "ce12537e-a4cd-43a7-b403-c16ecaba42df",
        "Name": "Models",
        "ParentId": "bf8f8028-1a38-4f16-8ede-25a0862b2b01",
        "Type": 0,
        "Items": [
          {
            "Id": "9048553e-6846-4d20-ba83-ecff56f2a2a0",
            "Name": "Session.cs",
            "ParentId": "ce12537e-a4cd-43a7-b403-c16ecaba42df",
            "Type": 1,
            "Text": "using System;\n\nnamespace SessionManagementSystem.Models\n{\n    public class Session\n    {\n        public string SessionId { get; set; }\n        public string UserId { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public DateTime LastActivity { get; set; }\n        public DateTime ExpiresAt { get; set; }\n        public string Data { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "f1cafa6f-27ea-46ff-ae8f-e112a468b8b9",
            "Name": "SessionRequest.cs",
            "ParentId": "ce12537e-a4cd-43a7-b403-c16ecaba42df",
            "Type": 1,
            "Text": "namespace SessionManagementSystem.Models\n{\n    public class SessionRequest\n    {\n        public string UserId { get; set; }\n        public int TimeoutInMinutes { get; set; }\n        public string Data { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "1e0f6cf6-e236-48e0-b7b0-b9b44e87479a",
            "Name": "SessionResponse.cs",
            "ParentId": "ce12537e-a4cd-43a7-b403-c16ecaba42df",
            "Type": 1,
            "Text": "using System;\n\nnamespace SessionManagementSystem.Models\n{\n    public class SessionResponse\n    {\n        public string SessionId { get; set; }\n        public string UserId { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public DateTime LastActivity { get; set; }\n        public DateTime ExpiresAt { get; set; }\n        public string Data { get; set; }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "5131f0de-8756-4285-aec9-8693a0150fca",
        "Name": "Data",
        "ParentId": "bf8f8028-1a38-4f16-8ede-25a0862b2b01",
        "Type": 0,
        "Items": [
          {
            "Id": "04587b5e-67e4-4064-a270-2b33bbc240e1",
            "Name": "ISessionRepository.cs",
            "ParentId": "5131f0de-8756-4285-aec9-8693a0150fca",
            "Type": 1,
            "Text": "using SessionManagementSystem.Models;\n\nnamespace SessionManagementSystem.Data\n{\n    public interface ISessionRepository\n    {\n        void AddSession(Session session);\n        Session GetSession(string sessionId);\n        void UpdateSession(Session session);\n        bool DeleteSession(string sessionId);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "bbec9bf0-5e6e-48e2-bb86-01170ce70825",
            "Name": "SessionRepository.cs",
            "ParentId": "5131f0de-8756-4285-aec9-8693a0150fca",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Concurrent;\nusing SessionManagementSystem.Models;\n\nnamespace SessionManagementSystem.Data\n{\n    public class SessionRepository : ISessionRepository\n    {\n        private readonly ConcurrentDictionary<string, Session> _sessions = new ConcurrentDictionary<string, Session>();\n\n        public void AddSession(Session session)\n        {\n            _sessions[session.SessionId] = session;\n        }\n\n        public Session GetSession(string sessionId)\n        {\n            _sessions.TryGetValue(sessionId, out var session);\n            if (session != null && session.ExpiresAt < DateTime.UtcNow)\n            {\n                DeleteSession(sessionId);\n                return null;\n            }\n            return session;\n        }\n\n        public void UpdateSession(Session session)\n        {\n            _sessions[session.SessionId] = session;\n        }\n\n        public bool DeleteSession(string sessionId)\n        {\n            return _sessions.TryRemove(sessionId, out _);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "0d288f50-3f00-4ffc-a9c0-dc36b477a270",
        "Name": "Infrastructure",
        "ParentId": "bf8f8028-1a38-4f16-8ede-25a0862b2b01",
        "Type": 0,
        "Items": [
          {
            "Id": "1bbf5acf-470d-4015-8e46-a6fc8a848476",
            "Name": "SessionMiddleware.cs",
            "ParentId": "0d288f50-3f00-4ffc-a9c0-dc36b477a270",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing SessionManagementSystem.Data;\n\nnamespace SessionManagementSystem.Infrastructure\n{\n    public class SessionMiddleware\n    {\n        private readonly RequestDelegate _next;\n        private readonly ISessionRepository _repository;\n\n        public SessionMiddleware(RequestDelegate next, ISessionRepository repository)\n        {\n            _next = next;\n            _repository = repository;\n        }\n\n        public async Task Invoke(HttpContext context)\n        {\n            if (context.Request.Headers.ContainsKey(\"X-Session-Id\"))\n            {\n                var sessionId = context.Request.Headers[\"X-Session-Id\"].ToString();\n                var session = _repository.GetSession(sessionId);\n                if (session == null)\n                {\n                    context.Response.StatusCode = StatusCodes.Status440LoginTimeout;\n                    await context.Response.WriteAsync(\"Session expired or invalid.\");\n                    return;\n                }\n            }\n            await _next(context);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "b6f91a18-5052-4edc-a45e-031a87deb0ca",
    "Name": "OAuthIntegrationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "182f6bc8-9fb5-402b-8150-63238c478a37",
        "Name": "Program.cs",
        "ParentId": "b6f91a18-5052-4edc-a45e-031a87deb0ca",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing OAuthIntegrationService.Services;\n\nnamespace OAuthIntegrationService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = WebApplication.CreateBuilder(args);\n            builder.Services.AddControllers();\n            builder.Services.AddHttpClient(\"OAuthClient\");\n            builder.Services.AddSingleton<IOAuthService, OAuthService>();\n\n            var app = builder.Build();\n\n            app.UseRouting();\n            app.UseAuthorization();\n            app.MapControllers();\n            app.Run();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "ea8ad9a2-3a54-4612-8c47-d8f766dd2a38",
        "Name": "Controllers",
        "ParentId": "b6f91a18-5052-4edc-a45e-031a87deb0ca",
        "Type": 0,
        "Items": [
          {
            "Id": "435e0e2e-15ae-4610-ab5b-2e8df536f990",
            "Name": "OAuthController.cs",
            "ParentId": "ea8ad9a2-3a54-4612-8c47-d8f766dd2a38",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing OAuthIntegrationService.Services;\nusing OAuthIntegrationService.Models;\n\nnamespace OAuthIntegrationService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class OAuthController : ControllerBase\n    {\n        private readonly IOAuthService _oAuthService;\n\n        public OAuthController(IOAuthService oAuthService)\n        {\n            _oAuthService = oAuthService;\n        }\n\n        [HttpPost(\"exchange-code\")]\n        public async Task<IActionResult> ExchangeCode([FromBody] ExchangeCodeRequest request)\n        {\n            if (string.IsNullOrWhiteSpace(request.Code))\n            {\n                return BadRequest(\"Authorization code is required.\");\n            }\n\n            OAuthTokenResponse tokenResponse = await _oAuthService.ExchangeCodeForToken(request.Code);\n            \n            if (tokenResponse == null || string.IsNullOrEmpty(tokenResponse.AccessToken))\n            {\n                return BadRequest(\"Failed to exchange code for token.\");\n            }\n            \n            return Ok(tokenResponse);\n        }\n\n        [HttpGet(\"userinfo\")]\n        public async Task<IActionResult> GetUserInfo([FromHeader(Name = \"Authorization\")] string authorization)\n        {\n            if (string.IsNullOrWhiteSpace(authorization))\n            {\n                return BadRequest(\"Authorization header is missing.\");\n            }\n\n            var token = authorization.Replace(\"Bearer \", \"\").Trim();\n            OAuthUserInfo userInfo = await _oAuthService.GetUserInfo(token);\n\n            if (userInfo == null)\n            {\n                return NotFound(\"User information could not be retrieved.\");\n            }\n            \n            return Ok(userInfo);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "05032df9-1814-4346-945c-72d04eafd96a",
        "Name": "Models",
        "ParentId": "b6f91a18-5052-4edc-a45e-031a87deb0ca",
        "Type": 0,
        "Items": [
          {
            "Id": "5408c233-f205-4596-b4de-22c17f7ee15e",
            "Name": "OAuthTokenResponse.cs",
            "ParentId": "05032df9-1814-4346-945c-72d04eafd96a",
            "Type": 1,
            "Text": "using System.Text.Json.Serialization;\n\nnamespace OAuthIntegrationService.Models\n{\n    public class OAuthTokenResponse\n    {\n        [JsonPropertyName(\"access_token\")]\n        public string AccessToken { get; set; }\n        \n        [JsonPropertyName(\"token_type\")]\n        public string TokenType { get; set; }\n        \n        [JsonPropertyName(\"expires_in\")]\n        public int ExpiresIn { get; set; }\n        \n        [JsonPropertyName(\"refresh_token\")]\n        public string RefreshToken { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "905a5368-bd61-4466-8b7c-a9e5aa85182d",
            "Name": "OAuthUserInfo.cs",
            "ParentId": "05032df9-1814-4346-945c-72d04eafd96a",
            "Type": 1,
            "Text": "using System.Text.Json.Serialization;\n\nnamespace OAuthIntegrationService.Models\n{\n    public class OAuthUserInfo\n    {\n        [JsonPropertyName(\"id\")]\n        public string Id { get; set; }\n        \n        [JsonPropertyName(\"email\")]\n        public string Email { get; set; }\n        \n        [JsonPropertyName(\"name\")]\n        public string Name { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "f3acd8ad-924c-4e9f-a84b-3dedc15f1bcf",
            "Name": "ExchangeCodeRequest.cs",
            "ParentId": "05032df9-1814-4346-945c-72d04eafd96a",
            "Type": 1,
            "Text": "namespace OAuthIntegrationService.Models\n{\n    public class ExchangeCodeRequest\n    {\n        public string Code { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "96a963de-9d01-47ba-a22e-51ddcb4765ef",
        "Name": "Services",
        "ParentId": "b6f91a18-5052-4edc-a45e-031a87deb0ca",
        "Type": 0,
        "Items": [
          {
            "Id": "3cc28e58-bac9-4fd2-9505-cd0ddfc5d1f4",
            "Name": "IOAuthService.cs",
            "ParentId": "96a963de-9d01-47ba-a22e-51ddcb4765ef",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing OAuthIntegrationService.Models;\n\nnamespace OAuthIntegrationService.Services\n{\n    public interface IOAuthService\n    {\n        Task<OAuthTokenResponse> ExchangeCodeForToken(string code);\n        Task<OAuthUserInfo> GetUserInfo(string accessToken);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "84a922ae-cc78-4489-bd4f-7c72301079b8",
            "Name": "OAuthService.cs",
            "ParentId": "96a963de-9d01-47ba-a22e-51ddcb4765ef",
            "Type": 1,
            "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing OAuthIntegrationService.Models;\nusing OAuthIntegrationService.Utils;\n\nnamespace OAuthIntegrationService.Services\n{\n    public class OAuthService : IOAuthService\n    {\n        private readonly IHttpClientFactory _httpClientFactory;\n        // In a production environment, these values should be securely retrieved from configuration.\n        private readonly string _clientId = \"your_client_id\";\n        private readonly string _clientSecret = \"your_client_secret\";\n        private readonly string _tokenEndpoint = \"https://oauthprovider.com/token\";\n        private readonly string _userInfoEndpoint = \"https://oauthprovider.com/userinfo\";\n\n        public OAuthService(IHttpClientFactory httpClientFactory)\n        {\n            _httpClientFactory = httpClientFactory;\n        }\n\n        public async Task<OAuthTokenResponse> ExchangeCodeForToken(string code)\n        {\n            var client = _httpClientFactory.CreateClient(\"OAuthClient\");\n            var requestContent = new StringContent(\n                $\"grant_type=authorization_code&code={code}&redirect_uri=https://yourredirecturi.com/callback\",\n                Encoding.UTF8,\n                \"application/x-www-form-urlencoded\");\n\n            client.DefaultRequestHeaders.Authorization = \n                new System.Net.Http.Headers.AuthenticationHeaderValue(\"Basic\", OAuthHelper.BuildBasicAuthHeader(_clientId, _clientSecret));\n\n            HttpResponseMessage response = await client.PostAsync(_tokenEndpoint, requestContent);\n            response.EnsureSuccessStatusCode();\n            string jsonResponse = await response.Content.ReadAsStringAsync();\n            var tokenResponse = JsonSerializer.Deserialize<OAuthTokenResponse>(jsonResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n            \n            return tokenResponse;\n        }\n\n        public async Task<OAuthUserInfo> GetUserInfo(string accessToken)\n        {\n            var client = _httpClientFactory.CreateClient(\"OAuthClient\");\n            client.DefaultRequestHeaders.Authorization = \n                new System.Net.Http.Headers.AuthenticationHeaderValue(\"Bearer\", accessToken);\n            \n            HttpResponseMessage response = await client.GetAsync(_userInfoEndpoint);\n            response.EnsureSuccessStatusCode();\n            string jsonResponse = await response.Content.ReadAsStringAsync();\n            var userInfo = JsonSerializer.Deserialize<OAuthUserInfo>(jsonResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n            \n            return userInfo;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "847bd2fb-5562-4797-a32a-b5309816ba89",
        "Name": "Utils",
        "ParentId": "b6f91a18-5052-4edc-a45e-031a87deb0ca",
        "Type": 0,
        "Items": [
          {
            "Id": "54359caf-edb0-44f0-8aad-ad28c529b803",
            "Name": "OAuthHelper.cs",
            "ParentId": "847bd2fb-5562-4797-a32a-b5309816ba89",
            "Type": 1,
            "Text": "using System;\nusing System.Text;\n\nnamespace OAuthIntegrationService.Utils\n{\n    public static class OAuthHelper\n    {\n        public static string BuildBasicAuthHeader(string clientId, string clientSecret)\n        {\n            var credentials = Encoding.UTF8.GetBytes($\"{clientId}:{clientSecret}\");\n            return Convert.ToBase64String(credentials);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "d2d674bb-f7cf-4c58-9fd3-d4c0a7ab96af",
    "Name": "CustomerFeedbackCollector",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "df58860e-9d45-4c15-96f6-004cf964477f",
        "Name": "Program.cs",
        "ParentId": "d2d674bb-f7cf-4c58-9fd3-d4c0a7ab96af",
        "Type": 1,
        "Text": "using CustomerFeedbackCollector.Services;\nusing CustomerFeedbackCollector.Data;\nusing CustomerFeedbackCollector.Infrastructure;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IFeedbackService, FeedbackService>();\nbuilder.Services.AddSingleton<IFeedbackRepository, FeedbackRepository>();\nbuilder.Services.AddSingleton<INotificationService, NotificationService>();\nbuilder.Services.AddLogging();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseRouting();\napp.UseAuthorization();\napp.MapControllers();\napp.Run();",
        "Language": 0
      },
      {
        "Id": "02052151-0b01-4455-af9e-b76e43fcd392",
        "Name": "Controllers",
        "ParentId": "d2d674bb-f7cf-4c58-9fd3-d4c0a7ab96af",
        "Type": 0,
        "Items": [
          {
            "Id": "5da5e0a7-f3a7-4892-b260-bbb7f1d79f94",
            "Name": "FeedbackController.cs",
            "ParentId": "02052151-0b01-4455-af9e-b76e43fcd392",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing CustomerFeedbackCollector.Services;\nusing CustomerFeedbackCollector.Models;\n\nnamespace CustomerFeedbackCollector.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class FeedbackController : ControllerBase\n    {\n        private readonly IFeedbackService _feedbackService;\n\n        public FeedbackController(IFeedbackService feedbackService)\n        {\n            _feedbackService = feedbackService;\n        }\n\n        [HttpGet]\n        public IActionResult GetAllFeedback()\n        {\n            var feedbacks = _feedbackService.GetAllFeedback();\n            return Ok(feedbacks);\n        }\n\n        [HttpGet(\"{id}\")]\n        public IActionResult GetFeedback(string id)\n        {\n            var feedback = _feedbackService.GetFeedbackById(id);\n            if (feedback == null)\n            {\n                return NotFound();\n            }\n            return Ok(feedback);\n        }\n\n        [HttpPost]\n        public IActionResult SubmitFeedback([FromBody] Feedback feedback)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(ModelState);\n            }\n            var createdFeedback = _feedbackService.SubmitFeedback(feedback);\n            return CreatedAtAction(nameof(GetFeedback), new { id = createdFeedback.FeedbackId }, createdFeedback);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "8a28f254-e734-4d22-af44-b6d2fa64b6c7",
        "Name": "Services",
        "ParentId": "d2d674bb-f7cf-4c58-9fd3-d4c0a7ab96af",
        "Type": 0,
        "Items": [
          {
            "Id": "c182c166-dc14-4892-a21b-47f8cb1fe1f4",
            "Name": "IFeedbackService.cs",
            "ParentId": "8a28f254-e734-4d22-af44-b6d2fa64b6c7",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing CustomerFeedbackCollector.Models;\n\nnamespace CustomerFeedbackCollector.Services\n{\n    public interface IFeedbackService\n    {\n        IEnumerable<Feedback> GetAllFeedback();\n        Feedback GetFeedbackById(string id);\n        Feedback SubmitFeedback(Feedback feedback);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "eac99d8d-4da8-4946-b104-c1adcc1fb05b",
            "Name": "FeedbackService.cs",
            "ParentId": "8a28f254-e734-4d22-af44-b6d2fa64b6c7",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing CustomerFeedbackCollector.Models;\nusing CustomerFeedbackCollector.Data;\n\nnamespace CustomerFeedbackCollector.Services\n{\n    public class FeedbackService : IFeedbackService\n    {\n        private readonly IFeedbackRepository _repository;\n\n        public FeedbackService(IFeedbackRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public IEnumerable<Feedback> GetAllFeedback()\n        {\n            return _repository.GetAllFeedback();\n        }\n\n        public Feedback GetFeedbackById(string id)\n        {\n            return _repository.GetFeedback(id);\n        }\n\n        public Feedback SubmitFeedback(Feedback feedback)\n        {\n            if (string.IsNullOrWhiteSpace(feedback.CustomerId))\n                throw new ArgumentException(\"CustomerId is required\");\n            if (string.IsNullOrWhiteSpace(feedback.Content))\n                throw new ArgumentException(\"Feedback content cannot be empty\");\n            \n            feedback.FeedbackId = Guid.NewGuid().ToString();\n            feedback.CreatedAt = DateTime.UtcNow;\n            \n            _repository.AddFeedback(feedback);\n            return feedback;\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "d7b8214f-ba21-4882-acf8-3490f1b1afe1",
        "Name": "Data",
        "ParentId": "d2d674bb-f7cf-4c58-9fd3-d4c0a7ab96af",
        "Type": 0,
        "Items": [
          {
            "Id": "56b3c45c-8da6-4f44-b134-04856547cd0b",
            "Name": "IFeedbackRepository.cs",
            "ParentId": "d7b8214f-ba21-4882-acf8-3490f1b1afe1",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing CustomerFeedbackCollector.Models;\n\nnamespace CustomerFeedbackCollector.Data\n{\n    public interface IFeedbackRepository\n    {\n        IEnumerable<Feedback> GetAllFeedback();\n        Feedback GetFeedback(string id);\n        void AddFeedback(Feedback feedback);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "e7ccf423-a95a-4490-b351-6230e8b74ed2",
            "Name": "FeedbackRepository.cs",
            "ParentId": "d7b8214f-ba21-4882-acf8-3490f1b1afe1",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Linq;\nusing CustomerFeedbackCollector.Models;\n\nnamespace CustomerFeedbackCollector.Data\n{\n    public class FeedbackRepository : IFeedbackRepository\n    {\n        private readonly ConcurrentDictionary<string, Feedback> _feedbackStore = new ConcurrentDictionary<string, Feedback>();\n\n        public IEnumerable<Feedback> GetAllFeedback()\n        {\n            return _feedbackStore.Values.ToList();\n        }\n\n        public Feedback GetFeedback(string id)\n        {\n            _feedbackStore.TryGetValue(id, out Feedback feedback);\n            return feedback;\n        }\n\n        public void AddFeedback(Feedback feedback)\n        {\n            _feedbackStore[feedback.FeedbackId] = feedback;\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "b6938abd-6854-480c-85fb-30b2bdf41a7b",
        "Name": "Models",
        "ParentId": "d2d674bb-f7cf-4c58-9fd3-d4c0a7ab96af",
        "Type": 0,
        "Items": [
          {
            "Id": "bb82dd6f-8dfe-4809-b5c8-3a11c9da0179",
            "Name": "Feedback.cs",
            "ParentId": "b6938abd-6854-480c-85fb-30b2bdf41a7b",
            "Type": 1,
            "Text": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace CustomerFeedbackCollector.Models\n{\n    public class Feedback\n    {\n        public string FeedbackId { get; set; }\n        \n        [Required]\n        public string CustomerId { get; set; }\n        \n        [Required]\n        [MaxLength(1000)]\n        public string Content { get; set; }\n        \n        public DateTime CreatedAt { get; set; }\n        \n        // Optional rating score provided by the customer\n        public int Rating { get; set; }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "dd9bfc15-92d2-4419-8898-14a804d87bb9",
        "Name": "Infrastructure",
        "ParentId": "d2d674bb-f7cf-4c58-9fd3-d4c0a7ab96af",
        "Type": 0,
        "Items": [
          {
            "Id": "32ef14b0-a1b4-407f-97ce-f2b97cf345ce",
            "Name": "NotificationService.cs",
            "ParentId": "dd9bfc15-92d2-4419-8898-14a804d87bb9",
            "Type": 1,
            "Text": "using System;\nusing System.Net.Mail;\nusing Microsoft.Extensions.Logging;\n\nnamespace CustomerFeedbackCollector.Infrastructure\n{\n    public interface INotificationService\n    {\n        void SendFeedbackAcknowledgement(string customerEmail, string message);\n    }\n\n    public class NotificationService : INotificationService\n    {\n        private readonly ILogger<NotificationService> _logger;\n\n        public NotificationService(ILogger<NotificationService> logger)\n        {\n            _logger = logger;\n        }\n\n        public void SendFeedbackAcknowledgement(string customerEmail, string message)\n        {\n            try\n            {\n                using (var smtpClient = new SmtpClient(\"smtp.example.com\"))\n                {\n                    var mailMessage = new MailMessage(\"no-reply@example.com\", customerEmail, \"Feedback Received\", message);\n                    // Configure SMTP client settings as needed for production environment\n                    smtpClient.Send(mailMessage);\n                }\n                _logger.LogInformation($\"Feedback acknowledgement sent to {customerEmail}\");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, $\"Failed to send acknowledgement to {customerEmail}\");\n                throw;\n            }\n        }\n    }\n}",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "2971c2af-5d7e-4446-a472-8ece588b072b",
    "Name": "ChatSupportIntegration",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "75473904-8fb5-4c84-bc2b-ca46a6b53907",
        "Name": "Program.cs",
        "ParentId": "2971c2af-5d7e-4446-a472-8ece588b072b",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ChatSupportIntegration\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "a24b81dd-8c9f-4e9d-be33-f9d7b411951a",
        "Name": "Startup.cs",
        "ParentId": "2971c2af-5d7e-4446-a472-8ece588b072b",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing ChatSupportIntegration.Infrastructure;\nusing ChatSupportIntegration.Services;\n\nnamespace ChatSupportIntegration\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient();\n            services.AddSingleton<IChatService, ChatService>();\n            services.AddSingleton<IIntegrationService, IntegrationService>();\n            services.AddSingleton<IChatLogger, ChatLogger>();\n            services.AddSingleton<IIntegrationAdapter, IntegrationAdapter>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "b6f7162f-cbc8-48e8-ac3f-8ee6565bca57",
        "Name": "Controllers",
        "ParentId": "2971c2af-5d7e-4446-a472-8ece588b072b",
        "Type": 0,
        "Items": [
          {
            "Id": "4408ad67-45dd-4531-b18a-048fd65b8182",
            "Name": "ChatSupportController.cs",
            "ParentId": "b6f7162f-cbc8-48e8-ac3f-8ee6565bca57",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing ChatSupportIntegration.Services;\nusing ChatSupportIntegration.Models;\n\nnamespace ChatSupportIntegration.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ChatSupportController : ControllerBase\n    {\n        private readonly IChatService _chatService;\n\n        public ChatSupportController(IChatService chatService)\n        {\n            _chatService = chatService;\n        }\n\n        [HttpGet(\"{sessionId}\")]\n        public async Task<IActionResult> GetSession(string sessionId)\n        {\n            var session = await _chatService.GetChatSessionAsync(sessionId);\n            if (session == null)\n            {\n                return NotFound();\n            }\n            return Ok(session);\n        }\n\n        [HttpPost(\"send\")]\n        public async Task<IActionResult> SendMessage([FromBody] ChatMessage message)\n        {\n            if (message == null || string.IsNullOrWhiteSpace(message.Content))\n            {\n                return BadRequest(\"Message content is required.\");\n            }\n            var result = await _chatService.ProcessChatMessageAsync(message);\n            return Ok(result);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "6ccf5398-9d3d-4a80-8a1c-88255987dbb3",
        "Name": "Services",
        "ParentId": "2971c2af-5d7e-4446-a472-8ece588b072b",
        "Type": 0,
        "Items": [
          {
            "Id": "52fab0f0-b841-45b4-8431-e240f3d57266",
            "Name": "IChatService.cs",
            "ParentId": "6ccf5398-9d3d-4a80-8a1c-88255987dbb3",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing ChatSupportIntegration.Models;\n\nnamespace ChatSupportIntegration.Services\n{\n    public interface IChatService\n    {\n        Task<ChatSession> GetChatSessionAsync(string sessionId);\n        Task<ChatMessage> ProcessChatMessageAsync(ChatMessage message);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "ba39cdc9-3585-4869-8796-befe3d82380b",
            "Name": "ChatService.cs",
            "ParentId": "6ccf5398-9d3d-4a80-8a1c-88255987dbb3",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing ChatSupportIntegration.Models;\nusing ChatSupportIntegration.Infrastructure;\n\nnamespace ChatSupportIntegration.Services\n{\n    public class ChatService : IChatService\n    {\n        private readonly IIntegrationService _integrationService;\n        private readonly IChatLogger _chatLogger;\n        private static readonly ConcurrentDictionary<string, ChatSession> _sessions = new ConcurrentDictionary<string, ChatSession>();\n\n        public ChatService(IIntegrationService integrationService, IChatLogger chatLogger)\n        {\n            _integrationService = integrationService;\n            _chatLogger = chatLogger;\n        }\n\n        public async Task<ChatSession> GetChatSessionAsync(string sessionId)\n        {\n            _sessions.TryGetValue(sessionId, out ChatSession session);\n            return await Task.FromResult(session);\n        }\n\n        public async Task<ChatMessage> ProcessChatMessageAsync(ChatMessage message)\n        {\n            try\n            {\n                if (string.IsNullOrEmpty(message.SessionId))\n                {\n                    message.SessionId = Guid.NewGuid().ToString();\n                    var newSession = new ChatSession\n                    {\n                        SessionId = message.SessionId,\n                        Messages = new List<ChatMessage> { message }\n                    };\n                    _sessions[message.SessionId] = newSession;\n                }\n                else\n                {\n                    _sessions.AddOrUpdate(message.SessionId,\n                        new ChatSession { SessionId = message.SessionId, Messages = new List<ChatMessage> { message } },\n                        (key, existingSession) =>\n                        {\n                            existingSession.Messages.Add(message);\n                            return existingSession;\n                        });\n                }\n\n                _chatLogger.LogInfo($\"Processing chat message for session: {message.SessionId}\");\n\n                var response = await _integrationService.SendMessageToExternalChatAsync(message);\n\n                if (response != null)\n                {\n                    _sessions.AddOrUpdate(message.SessionId,\n                        new ChatSession { SessionId = message.SessionId, Messages = new List<ChatMessage> { response } },\n                        (key, existingSession) =>\n                        {\n                            existingSession.Messages.Add(response);\n                            return existingSession;\n                        });\n                }\n                \n                return response ?? message;\n            }\n            catch (Exception ex)\n            {\n                _chatLogger.LogError(\"Error processing chat message.\", ex);\n                throw;\n            }\n        }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "9d7abcd5-36cb-4f05-8c93-31d3e54cca85",
            "Name": "IIntegrationService.cs",
            "ParentId": "6ccf5398-9d3d-4a80-8a1c-88255987dbb3",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing ChatSupportIntegration.Models;\n\nnamespace ChatSupportIntegration.Services\n{\n    public interface IIntegrationService\n    {\n        Task<ChatMessage> SendMessageToExternalChatAsync(ChatMessage message);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "611cde7b-065b-4f1b-a61f-18249944c6d5",
            "Name": "IntegrationService.cs",
            "ParentId": "6ccf5398-9d3d-4a80-8a1c-88255987dbb3",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing ChatSupportIntegration.Models;\nusing ChatSupportIntegration.Infrastructure;\n\nnamespace ChatSupportIntegration.Services\n{\n    public class IntegrationService : IIntegrationService\n    {\n        private readonly IIntegrationAdapter _integrationAdapter;\n\n        public IntegrationService(IIntegrationAdapter integrationAdapter)\n        {\n            _integrationAdapter = integrationAdapter;\n        }\n\n        public async Task<ChatMessage> SendMessageToExternalChatAsync(ChatMessage message)\n        {\n            return await _integrationAdapter.SendChatMessageAsync(message);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "1e621a64-56df-4bcc-a388-1de6ece62a40",
        "Name": "Models",
        "ParentId": "2971c2af-5d7e-4446-a472-8ece588b072b",
        "Type": 0,
        "Items": [
          {
            "Id": "a8432559-9c7b-4aa5-9e35-bbce76026196",
            "Name": "ChatMessage.cs",
            "ParentId": "1e621a64-56df-4bcc-a388-1de6ece62a40",
            "Type": 1,
            "Text": "using System;\n\nnamespace ChatSupportIntegration.Models\n{\n    public class ChatMessage\n    {\n        public string MessageId { get; set; } = Guid.NewGuid().ToString();\n        public string SessionId { get; set; }\n        public string UserId { get; set; }\n        public string Content { get; set; }\n        public DateTime Timestamp { get; set; } = DateTime.UtcNow;\n    }\n}",
            "Language": 0
          },
          {
            "Id": "eaeedb94-aeb2-4554-8b33-584f57ee2068",
            "Name": "ChatSession.cs",
            "ParentId": "1e621a64-56df-4bcc-a388-1de6ece62a40",
            "Type": 1,
            "Text": "using System.Collections.Generic;\n\nnamespace ChatSupportIntegration.Models\n{\n    public class ChatSession\n    {\n        public string SessionId { get; set; }\n        public List<ChatMessage> Messages { get; set; } = new List<ChatMessage>();\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "7be10a41-404a-43d8-a02e-dacd4bf30545",
        "Name": "Infrastructure",
        "ParentId": "2971c2af-5d7e-4446-a472-8ece588b072b",
        "Type": 0,
        "Items": [
          {
            "Id": "dd148edf-b0b1-4dc6-8c8c-e1cc6776b689",
            "Name": "IChatLogger.cs",
            "ParentId": "7be10a41-404a-43d8-a02e-dacd4bf30545",
            "Type": 1,
            "Text": "using System;\n\nnamespace ChatSupportIntegration.Infrastructure\n{\n    public interface IChatLogger\n    {\n        void LogInfo(string message);\n        void LogError(string message, Exception ex);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "d16f7544-4246-4ee4-a308-63b7745e2305",
            "Name": "ChatLogger.cs",
            "ParentId": "7be10a41-404a-43d8-a02e-dacd4bf30545",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace ChatSupportIntegration.Infrastructure\n{\n    public class ChatLogger : IChatLogger\n    {\n        private readonly ILogger<ChatLogger> _logger;\n\n        public ChatLogger(ILogger<ChatLogger> logger)\n        {\n            _logger = logger;\n        }\n\n        public void LogInfo(string message)\n        {\n            _logger.LogInformation(message);\n        }\n\n        public void LogError(string message, Exception ex)\n        {\n            _logger.LogError(ex, message);\n        }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "ef157816-c540-4ad5-a0bb-f0e9c9ce7ea2",
            "Name": "IIntegrationAdapter.cs",
            "ParentId": "7be10a41-404a-43d8-a02e-dacd4bf30545",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing ChatSupportIntegration.Models;\n\nnamespace ChatSupportIntegration.Infrastructure\n{\n    public interface IIntegrationAdapter\n    {\n        Task<ChatMessage> SendChatMessageAsync(ChatMessage message);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "1c0ead96-f7d6-45b6-be8e-ec38390d02ab",
            "Name": "IntegrationAdapter.cs",
            "ParentId": "7be10a41-404a-43d8-a02e-dacd4bf30545",
            "Type": 1,
            "Text": "using System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing ChatSupportIntegration.Models;\n\nnamespace ChatSupportIntegration.Infrastructure\n{\n    public class IntegrationAdapter : IIntegrationAdapter\n    {\n        private readonly HttpClient _httpClient;\n\n        public IntegrationAdapter(IHttpClientFactory httpClientFactory)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n        }\n\n        public async Task<ChatMessage> SendChatMessageAsync(ChatMessage message)\n        {\n            string externalEndpoint = \"https://api.livechatprovider.com/v1/sendMessage\";\n            var payload = JsonSerializer.Serialize(message);\n            var content = new StringContent(payload, Encoding.UTF8, \"application/json\");\n            using var response = await _httpClient.PostAsync(externalEndpoint, content);\n            response.EnsureSuccessStatusCode();\n            var jsonResponse = await response.Content.ReadAsStringAsync();\n            return JsonSerializer.Deserialize<ChatMessage>(jsonResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n        }\n    }\n}",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "12db2329-424f-45d8-8c27-1d91eb600314",
    "Name": "VirtualAssistantService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "3e33e737-7980-46fa-af7a-12860640f16f",
        "Name": "Program.cs",
        "ParentId": "12db2329-424f-45d8-8c27-1d91eb600314",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace VirtualAssistantService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "864b476d-726c-41df-80fa-dbfee1d65f37",
        "Name": "Startup.cs",
        "ParentId": "12db2329-424f-45d8-8c27-1d91eb600314",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing VirtualAssistantService.Infrastructure;\nusing VirtualAssistantService.Services;\n\nnamespace VirtualAssistantService\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient();\n            services.AddSingleton<IVirtualAssistantService, VirtualAssistantService.Services.VirtualAssistantService>();\n            services.AddSingleton<IAiEngineAdapter, AiEngineAdapter>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "51558d0b-9952-4be6-a2d7-1b2a23984d4f",
        "Name": "Controllers",
        "ParentId": "12db2329-424f-45d8-8c27-1d91eb600314",
        "Type": 0,
        "Items": [
          {
            "Id": "d9983a82-7d71-4f2d-844e-d33c5d292ef3",
            "Name": "VirtualAssistantController.cs",
            "ParentId": "51558d0b-9952-4be6-a2d7-1b2a23984d4f",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing VirtualAssistantService.Models;\nusing VirtualAssistantService.Services;\n\nnamespace VirtualAssistantService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class VirtualAssistantController : ControllerBase\n    {\n        private readonly IVirtualAssistantService _assistantService;\n\n        public VirtualAssistantController(IVirtualAssistantService assistantService)\n        {\n            _assistantService = assistantService;\n        }\n\n        [HttpPost(\"inquiry\")]\n        public async Task<ActionResult<AssistantResponse>> PostInquiry([FromBody] Inquiry inquiry)\n        {\n            var response = await _assistantService.HandleInquiryAsync(inquiry);\n            if (response == null)\n            {\n                return BadRequest(\"Unable to process inquiry\");\n            }\n            return Ok(response);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "e49794d8-990e-4d77-8f2c-8960bcd6e9cd",
        "Name": "Services",
        "ParentId": "12db2329-424f-45d8-8c27-1d91eb600314",
        "Type": 0,
        "Items": [
          {
            "Id": "c63f805e-19de-4e00-b50b-7a810d00acdb",
            "Name": "IVirtualAssistantService.cs",
            "ParentId": "e49794d8-990e-4d77-8f2c-8960bcd6e9cd",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing VirtualAssistantService.Models;\n\nnamespace VirtualAssistantService.Services\n{\n    public interface IVirtualAssistantService\n    {\n        Task<AssistantResponse> HandleInquiryAsync(Inquiry inquiry);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "51e09d94-2b83-4abd-aa3d-dfa38371e122",
            "Name": "VirtualAssistantService.cs",
            "ParentId": "e49794d8-990e-4d77-8f2c-8960bcd6e9cd",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing VirtualAssistantService.Infrastructure;\nusing VirtualAssistantService.Models;\n\nnamespace VirtualAssistantService.Services\n{\n    public class VirtualAssistantService : IVirtualAssistantService\n    {\n        private readonly IAiEngineAdapter _aiEngineAdapter;\n\n        public VirtualAssistantService(IAiEngineAdapter aiEngineAdapter)\n        {\n            _aiEngineAdapter = aiEngineAdapter;\n        }\n\n        public async Task<AssistantResponse> HandleInquiryAsync(Inquiry inquiry)\n        {\n            if (string.IsNullOrWhiteSpace(inquiry.Question))\n            {\n                throw new ArgumentException(\"Inquiry question cannot be empty.\");\n            }\n            string aiResponse = await _aiEngineAdapter.GetAssistantResponseAsync(inquiry.Question, inquiry.CustomerId);\n            return new AssistantResponse\n            {\n                InquiryId = inquiry.InquiryId,\n                ResponseMessage = aiResponse,\n                ProcessedAt = DateTime.UtcNow\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "a5929ffb-05ee-4ccc-a28e-db74e72163b7",
        "Name": "Models",
        "ParentId": "12db2329-424f-45d8-8c27-1d91eb600314",
        "Type": 0,
        "Items": [
          {
            "Id": "39b5e29b-b956-4f76-99a5-c38c2c60316c",
            "Name": "Inquiry.cs",
            "ParentId": "a5929ffb-05ee-4ccc-a28e-db74e72163b7",
            "Type": 1,
            "Text": "using System;\n\nnamespace VirtualAssistantService.Models\n{\n    public class Inquiry\n    {\n        public string InquiryId { get; set; } = Guid.NewGuid().ToString();\n        public string CustomerId { get; set; }\n        public string Question { get; set; }\n        public DateTime SubmittedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e569a111-8f08-4868-b31a-8562a82d5c1d",
            "Name": "AssistantResponse.cs",
            "ParentId": "a5929ffb-05ee-4ccc-a28e-db74e72163b7",
            "Type": 1,
            "Text": "using System;\n\nnamespace VirtualAssistantService.Models\n{\n    public class AssistantResponse\n    {\n        public string InquiryId { get; set; }\n        public string ResponseMessage { get; set; }\n        public DateTime ProcessedAt { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "563c1d41-912d-479c-a3eb-399f8048ab3f",
        "Name": "Infrastructure",
        "ParentId": "12db2329-424f-45d8-8c27-1d91eb600314",
        "Type": 0,
        "Items": [
          {
            "Id": "44911568-60b9-47ea-9e6f-103aa4f8aead",
            "Name": "IAiEngineAdapter.cs",
            "ParentId": "563c1d41-912d-479c-a3eb-399f8048ab3f",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\n\nnamespace VirtualAssistantService.Infrastructure\n{\n    public interface IAiEngineAdapter\n    {\n        Task<string> GetAssistantResponseAsync(string question, string customerId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "34e813c0-aa81-404c-a292-df4eb4239053",
            "Name": "AiEngineAdapter.cs",
            "ParentId": "563c1d41-912d-479c-a3eb-399f8048ab3f",
            "Type": 1,
            "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace VirtualAssistantService.Infrastructure\n{\n    public class AiEngineAdapter : IAiEngineAdapter\n    {\n        private readonly HttpClient _httpClient;\n\n        public AiEngineAdapter(IHttpClientFactory httpClientFactory)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n        }\n\n        public async Task<string> GetAssistantResponseAsync(string question, string customerId)\n        {\n            var requestPayload = new\n            {\n                question = question,\n                customerId = customerId,\n                timestamp = DateTime.UtcNow\n            };\n\n            var json = JsonSerializer.Serialize(requestPayload);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n            \n            // Replace the URL with the actual endpoint of the AI engine service\n            var response = await _httpClient.PostAsync(\"https://api.aiengineprovider.com/process\", content);\n            response.EnsureSuccessStatusCode();\n\n            var responseContent = await response.Content.ReadAsStringAsync();\n            using (var document = JsonDocument.Parse(responseContent))\n            {\n                if (document.RootElement.TryGetProperty(\"answer\", out var answerElement))\n                {\n                    return answerElement.GetString();\n                }\n            }\n            throw new Exception(\"Invalid response from AI Engine service.\");\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "a10972b8-d190-450a-b627-1bbc12ce52ab",
    "Name": "InvestmentPortfolioManager",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "8d495e3c-a0c5-4f10-a3e1-45afdfc1a38f",
        "Name": "Program.cs",
        "ParentId": "a10972b8-d190-450a-b627-1bbc12ce52ab",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing InvestmentPortfolioManager.Services;\nusing InvestmentPortfolioManager.Data;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nbuilder.Services.AddSingleton<IPortfolioService, PortfolioService>();\nbuilder.Services.AddSingleton<IPortfolioRepository, PortfolioRepository>();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseRouting();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "e862412a-3ffc-4b48-aac2-ffc8755cd64f",
        "Name": "Controllers",
        "ParentId": "a10972b8-d190-450a-b627-1bbc12ce52ab",
        "Type": 0,
        "Items": [
          {
            "Id": "bf5eabe0-3d74-41ab-86c6-f860a69b7d2c",
            "Name": "PortfolioController.cs",
            "ParentId": "e862412a-3ffc-4b48-aac2-ffc8755cd64f",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.AspNetCore.Mvc;\nusing InvestmentPortfolioManager.Models;\nusing InvestmentPortfolioManager.Services;\n\nnamespace InvestmentPortfolioManager.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class PortfolioController : ControllerBase\n    {\n        private readonly IPortfolioService _portfolioService;\n\n        public PortfolioController(IPortfolioService portfolioService)\n        {\n            _portfolioService = portfolioService;\n        }\n\n        [HttpPost]\n        public ActionResult<Portfolio> CreatePortfolio([FromBody] PortfolioRequest request)\n        {\n            var portfolio = _portfolioService.CreatePortfolio(request);\n            return CreatedAtAction(nameof(GetPortfolio), new { id = portfolio.Id }, portfolio);\n        }\n\n        [HttpGet(\"{id}\")]\n        public ActionResult<Portfolio> GetPortfolio(Guid id)\n        {\n            var portfolio = _portfolioService.GetPortfolio(id);\n            if (portfolio == null)\n            {\n                return NotFound();\n            }\n            return Ok(portfolio);\n        }\n\n        [HttpPut(\"{id}\")]\n        public ActionResult<Portfolio> UpdatePortfolio(Guid id, [FromBody] PortfolioRequest request)\n        {\n            var portfolio = _portfolioService.UpdatePortfolio(id, request);\n            if (portfolio == null)\n            {\n                return NotFound();\n            }\n            return Ok(portfolio);\n        }\n\n        [HttpDelete(\"{id}\")]\n        public IActionResult DeletePortfolio(Guid id)\n        {\n            bool deleted = _portfolioService.DeletePortfolio(id);\n            if (!deleted)\n            {\n                return NotFound();\n            }\n            return NoContent();\n        }\n\n        [HttpGet(\"{id}/risk\")]\n        public ActionResult<double> GetRiskAssessment(Guid id)\n        {\n            var portfolio = _portfolioService.GetPortfolio(id);\n            if (portfolio == null)\n            {\n                return NotFound();\n            }\n            double risk = _portfolioService.CalculateRisk(portfolio);\n            return Ok(risk);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "a4db286c-7629-4a85-a667-6a19b8794476",
        "Name": "Services",
        "ParentId": "a10972b8-d190-450a-b627-1bbc12ce52ab",
        "Type": 0,
        "Items": [
          {
            "Id": "f730edd0-1725-423d-9993-b09504a74f38",
            "Name": "IPortfolioService.cs",
            "ParentId": "a4db286c-7629-4a85-a667-6a19b8794476",
            "Type": 1,
            "Text": "using System;\nusing InvestmentPortfolioManager.Models;\n\nnamespace InvestmentPortfolioManager.Services\n{\n    public interface IPortfolioService\n    {\n        Portfolio CreatePortfolio(PortfolioRequest request);\n        Portfolio GetPortfolio(Guid id);\n        Portfolio UpdatePortfolio(Guid id, PortfolioRequest request);\n        bool DeletePortfolio(Guid id);\n        double CalculateRisk(Portfolio portfolio);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e5dc086f-6dab-4ceb-9ef9-76bc315f8568",
            "Name": "PortfolioService.cs",
            "ParentId": "a4db286c-7629-4a85-a667-6a19b8794476",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing InvestmentPortfolioManager.Models;\nusing InvestmentPortfolioManager.Data;\nusing InvestmentPortfolioManager.Utils;\n\nnamespace InvestmentPortfolioManager.Services\n{\n    public class PortfolioService : IPortfolioService\n    {\n        private readonly IPortfolioRepository _repository;\n\n        public PortfolioService(IPortfolioRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public Portfolio CreatePortfolio(PortfolioRequest request)\n        {\n            var portfolio = new Portfolio\n            {\n                Id = Guid.NewGuid(),\n                OwnerId = request.OwnerId,\n                Allocations = new List<AssetAllocation>(),\n                CreatedAt = DateTime.UtcNow,\n                UpdatedAt = DateTime.UtcNow\n            };\n\n            if (request.Allocations != null)\n            {\n                foreach (var alloc in request.Allocations)\n                {\n                    portfolio.Allocations.Add(new AssetAllocation\n                    {\n                        Id = Guid.NewGuid(),\n                        AssetType = alloc.AssetType,\n                        Weight = alloc.Weight,\n                        Investment = alloc.Investment\n                    });\n                }\n            }\n\n            _repository.CreatePortfolio(portfolio);\n            return portfolio;\n        }\n\n        public Portfolio GetPortfolio(Guid id)\n        {\n            return _repository.GetPortfolio(id);\n        }\n\n        public Portfolio UpdatePortfolio(Guid id, PortfolioRequest request)\n        {\n            var existing = _repository.GetPortfolio(id);\n            if (existing == null)\n            {\n                return null;\n            }\n\n            existing.OwnerId = request.OwnerId;\n            existing.UpdatedAt = DateTime.UtcNow;\n            existing.Allocations.Clear();\n            if (request.Allocations != null)\n            {\n                foreach (var alloc in request.Allocations)\n                {\n                    existing.Allocations.Add(new AssetAllocation\n                    {\n                        Id = Guid.NewGuid(),\n                        AssetType = alloc.AssetType,\n                        Weight = alloc.Weight,\n                        Investment = alloc.Investment\n                    });\n                }\n            }\n\n            _repository.UpdatePortfolio(existing);\n            return existing;\n        }\n\n        public bool DeletePortfolio(Guid id)\n        {\n            return _repository.DeletePortfolio(id);\n        }\n\n        public double CalculateRisk(Portfolio portfolio)\n        {\n            return RiskCalculator.CalculateRisk(portfolio);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "42505adc-6d46-48f8-b64b-ca9d72421065",
        "Name": "Data",
        "ParentId": "a10972b8-d190-450a-b627-1bbc12ce52ab",
        "Type": 0,
        "Items": [
          {
            "Id": "a1edba30-e02a-4232-9edf-c0ecaeffa423",
            "Name": "IPortfolioRepository.cs",
            "ParentId": "42505adc-6d46-48f8-b64b-ca9d72421065",
            "Type": 1,
            "Text": "using System;\nusing InvestmentPortfolioManager.Models;\n\nnamespace InvestmentPortfolioManager.Data\n{\n    public interface IPortfolioRepository\n    {\n        void CreatePortfolio(Portfolio portfolio);\n        Portfolio GetPortfolio(Guid id);\n        void UpdatePortfolio(Portfolio portfolio);\n        bool DeletePortfolio(Guid id);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "93e646b0-4251-49ca-a732-4be0b553cdfc",
            "Name": "PortfolioRepository.cs",
            "ParentId": "42505adc-6d46-48f8-b64b-ca9d72421065",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Concurrent;\nusing InvestmentPortfolioManager.Models;\n\nnamespace InvestmentPortfolioManager.Data\n{\n    public class PortfolioRepository : IPortfolioRepository\n    {\n        private readonly ConcurrentDictionary<Guid, Portfolio> _store = new ConcurrentDictionary<Guid, Portfolio>();\n\n        public void CreatePortfolio(Portfolio portfolio)\n        {\n            _store[portfolio.Id] = portfolio;\n        }\n\n        public Portfolio GetPortfolio(Guid id)\n        {\n            _store.TryGetValue(id, out Portfolio portfolio);\n            return portfolio;\n        }\n\n        public void UpdatePortfolio(Portfolio portfolio)\n        {\n            _store[portfolio.Id] = portfolio;\n        }\n\n        public bool DeletePortfolio(Guid id)\n        {\n            return _store.TryRemove(id, out _);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "0ff17eb5-db8c-477f-8cd1-407c9fb3c73a",
        "Name": "Models",
        "ParentId": "a10972b8-d190-450a-b627-1bbc12ce52ab",
        "Type": 0,
        "Items": [
          {
            "Id": "b7743ead-db74-440e-933a-2e1176f9d272",
            "Name": "Portfolio.cs",
            "ParentId": "0ff17eb5-db8c-477f-8cd1-407c9fb3c73a",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\n\nnamespace InvestmentPortfolioManager.Models\n{\n    public class Portfolio\n    {\n        public Guid Id { get; set; }\n        public string OwnerId { get; set; }\n        public List<AssetAllocation> Allocations { get; set; } = new List<AssetAllocation>();\n        public DateTime CreatedAt { get; set; }\n        public DateTime UpdatedAt { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e7dff568-ba6e-4798-bbca-db4e0da802db",
            "Name": "AssetAllocation.cs",
            "ParentId": "0ff17eb5-db8c-477f-8cd1-407c9fb3c73a",
            "Type": 1,
            "Text": "using System;\n\nnamespace InvestmentPortfolioManager.Models\n{\n    public class AssetAllocation\n    {\n        public Guid Id { get; set; }\n        public string AssetType { get; set; }\n        public decimal Weight { get; set; }\n        public double Investment { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "059280ee-0fbf-47a6-87eb-cc5300b43705",
            "Name": "PortfolioRequest.cs",
            "ParentId": "0ff17eb5-db8c-477f-8cd1-407c9fb3c73a",
            "Type": 1,
            "Text": "using System.Collections.Generic;\n\nnamespace InvestmentPortfolioManager.Models\n{\n    public class PortfolioRequest\n    {\n        public string OwnerId { get; set; }\n        public List<AssetAllocationRequest> Allocations { get; set; } = new List<AssetAllocationRequest>();\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "32e31095-051f-406b-81e6-ec7a262a79cc",
            "Name": "AssetAllocationRequest.cs",
            "ParentId": "0ff17eb5-db8c-477f-8cd1-407c9fb3c73a",
            "Type": 1,
            "Text": "namespace InvestmentPortfolioManager.Models\n{\n    public class AssetAllocationRequest\n    {\n        public string AssetType { get; set; }\n        public decimal Weight { get; set; }\n        public double Investment { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "6777b210-56ff-46c9-bbfb-d0fed3a82ebf",
            "Name": "PortfolioResponse.cs",
            "ParentId": "0ff17eb5-db8c-477f-8cd1-407c9fb3c73a",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\n\nnamespace InvestmentPortfolioManager.Models\n{\n    public class PortfolioResponse\n    {\n        public Guid Id { get; set; }\n        public string OwnerId { get; set; }\n        public List<AssetAllocation> Allocations { get; set; } = new List<AssetAllocation>();\n        public DateTime CreatedAt { get; set; }\n        public DateTime UpdatedAt { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "e960d1d2-47a2-4c33-af04-3fa0740211b7",
        "Name": "Utils",
        "ParentId": "a10972b8-d190-450a-b627-1bbc12ce52ab",
        "Type": 0,
        "Items": [
          {
            "Id": "1b233e56-18ef-48ab-b0a8-a53cf4ab3304",
            "Name": "RiskCalculator.cs",
            "ParentId": "e960d1d2-47a2-4c33-af04-3fa0740211b7",
            "Type": 1,
            "Text": "using System.Linq;\nusing System.Collections.Generic;\nusing InvestmentPortfolioManager.Models;\n\nnamespace InvestmentPortfolioManager.Utils\n{\n    public static class RiskCalculator\n    {\n        public static double CalculateRisk(Portfolio portfolio)\n        {\n            double totalInvestment = portfolio.Allocations.Sum(a => a.Investment);\n            if (totalInvestment == 0)\n            {\n                return 0;\n            }\n\n            double riskSum = 0;\n            foreach (var allocation in portfolio.Allocations)\n            {\n                double factor = GetRiskFactor(allocation.AssetType);\n                riskSum += allocation.Investment * factor;\n            }\n\n            return riskSum / totalInvestment;\n        }\n\n        private static double GetRiskFactor(string assetType)\n        {\n            var factors = new Dictionary<string, double>(System.StringComparer.OrdinalIgnoreCase)\n            {\n                { \"Equity\", 1.2 },\n                { \"Bond\", 0.8 },\n                { \"RealEstate\", 1.0 }\n            };\n\n            if (factors.ContainsKey(assetType))\n            {\n                return factors[assetType];\n            }\n            return 1.0;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "2d830f2a-77b3-429b-bb83-c36fd4a65221",
    "Name": "LoanProcessingEngine",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "d052b2fd-8358-40b7-9d1f-a3f521a0782b",
        "Name": "Program.cs",
        "ParentId": "2d830f2a-77b3-429b-bb83-c36fd4a65221",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace LoanProcessingEngine\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "277267d4-6060-4b53-a2ce-fd79bf026515",
        "Name": "Startup.cs",
        "ParentId": "2d830f2a-77b3-429b-bb83-c36fd4a65221",
        "Type": 1,
        "Text": "using LoanProcessingEngine.Controllers;\nusing LoanProcessingEngine.Repositories;\nusing LoanProcessingEngine.Services;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace LoanProcessingEngine\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<ILoanService, LoanService>();\n            services.AddSingleton<ILoanRepository, LoanRepository>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "76b93c34-f4ca-4fb1-9aa9-cd9a34ed60f9",
        "Name": "Controllers",
        "ParentId": "2d830f2a-77b3-429b-bb83-c36fd4a65221",
        "Type": 0,
        "Items": [
          {
            "Id": "7fefb7ca-29a0-4b48-9e22-ac4959cd7830",
            "Name": "LoanController.cs",
            "ParentId": "76b93c34-f4ca-4fb1-9aa9-cd9a34ed60f9",
            "Type": 1,
            "Text": "using LoanProcessingEngine.Models;\nusing LoanProcessingEngine.Services;\nusing Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace LoanProcessingEngine.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class LoanController : ControllerBase\n    {\n        private readonly ILoanService _loanService;\n\n        public LoanController(ILoanService loanService)\n        {\n            _loanService = loanService;\n        }\n\n        [HttpPost(\"apply\")]\n        public async Task<IActionResult> Apply([FromBody] LoanApplication application)\n        {\n            if (application == null || string.IsNullOrWhiteSpace(application.CustomerId))\n            {\n                return BadRequest(\"Invalid loan application data.\");\n            }\n\n            try\n            {\n                LoanDecision decision = await _loanService.SubmitApplication(application);\n                return Ok(decision);\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, $\"An error occurred while processing the loan application: {ex.Message}\");\n            }\n        }\n\n        [HttpGet(\"status/{applicationId}\")]\n        public async Task<IActionResult> GetStatus(string applicationId)\n        {\n            if (string.IsNullOrWhiteSpace(applicationId))\n            {\n                return BadRequest(\"Application ID is required.\");\n            }\n\n            try\n            {\n                LoanDecision decision = await _loanService.GetLoanDecision(applicationId);\n                if (decision == null)\n                {\n                    return NotFound(\"Loan decision not found.\");\n                }\n                return Ok(decision);\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, $\"An error occurred while retrieving the loan decision: {ex.Message}\");\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "52c5bb1f-153f-4035-a2db-e01912060ce0",
        "Name": "Services",
        "ParentId": "2d830f2a-77b3-429b-bb83-c36fd4a65221",
        "Type": 0,
        "Items": [
          {
            "Id": "4e3fe867-416d-4a17-8ae8-6002d758e2cd",
            "Name": "ILoanService.cs",
            "ParentId": "52c5bb1f-153f-4035-a2db-e01912060ce0",
            "Type": 1,
            "Text": "using LoanProcessingEngine.Models;\nusing System.Threading.Tasks;\n\nnamespace LoanProcessingEngine.Services\n{\n    public interface ILoanService\n    {\n        Task<LoanDecision> SubmitApplication(LoanApplication application);\n        Task<LoanDecision> GetLoanDecision(string applicationId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "4f8f592e-c484-4e9f-88f3-2da9b13c113d",
            "Name": "LoanService.cs",
            "ParentId": "52c5bb1f-153f-4035-a2db-e01912060ce0",
            "Type": 1,
            "Text": "using LoanProcessingEngine.Infrastructure;\nusing LoanProcessingEngine.Models;\nusing LoanProcessingEngine.Repositories;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace LoanProcessingEngine.Services\n{\n    public class LoanService : ILoanService\n    {\n        private readonly ILoanRepository _loanRepository;\n\n        public LoanService(ILoanRepository loanRepository)\n        {\n            _loanRepository = loanRepository;\n        }\n\n        public async Task<LoanDecision> SubmitApplication(LoanApplication application)\n        {\n            if (string.IsNullOrWhiteSpace(application.ApplicationId))\n            {\n                application.ApplicationId = Guid.NewGuid().ToString();\n            }\n\n            LoanDecision decision = LoanEvaluator.Evaluate(application);\n\n            _loanRepository.SaveDecision(decision);\n\n            return await Task.FromResult(decision);\n        }\n\n        public async Task<LoanDecision> GetLoanDecision(string applicationId)\n        {\n            LoanDecision decision = _loanRepository.GetDecision(applicationId);\n            return await Task.FromResult(decision);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "5c9634a2-3660-4d84-b4c7-a30230267e4c",
        "Name": "Models",
        "ParentId": "2d830f2a-77b3-429b-bb83-c36fd4a65221",
        "Type": 0,
        "Items": [
          {
            "Id": "23bc5005-0948-4b7b-84dd-920b93e8a5aa",
            "Name": "LoanApplication.cs",
            "ParentId": "5c9634a2-3660-4d84-b4c7-a30230267e4c",
            "Type": 1,
            "Text": "using System;\n\nnamespace LoanProcessingEngine.Models\n{\n    public class LoanApplication\n    {\n        public string ApplicationId { get; set; } = Guid.NewGuid().ToString();\n        public string CustomerId { get; set; }\n        public decimal LoanAmount { get; set; }\n        public decimal AnnualIncome { get; set; }\n        public int CreditScore { get; set; }\n        public DateTime SubmittedDate { get; set; } = DateTime.UtcNow;\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "90b6514e-f6fa-483d-8ee4-eb56c846d552",
            "Name": "LoanDecision.cs",
            "ParentId": "5c9634a2-3660-4d84-b4c7-a30230267e4c",
            "Type": 1,
            "Text": "using System;\n\nnamespace LoanProcessingEngine.Models\n{\n    public class LoanDecision\n    {\n        public string ApplicationId { get; set; }\n        public bool Approved { get; set; }\n        public string DecisionReason { get; set; }\n        public DateTime DecisionDate { get; set; } = DateTime.UtcNow;\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "7c836039-c93b-473e-ad2e-75725d20d947",
        "Name": "Repositories",
        "ParentId": "2d830f2a-77b3-429b-bb83-c36fd4a65221",
        "Type": 0,
        "Items": [
          {
            "Id": "19022ac8-460f-453d-9c7f-c55f46b873a5",
            "Name": "ILoanRepository.cs",
            "ParentId": "7c836039-c93b-473e-ad2e-75725d20d947",
            "Type": 1,
            "Text": "using LoanProcessingEngine.Models;\n\nnamespace LoanProcessingEngine.Repositories\n{\n    public interface ILoanRepository\n    {\n        void SaveDecision(LoanDecision decision);\n        LoanDecision GetDecision(string applicationId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "2897d3fa-b095-400b-bef3-a2e233f720f7",
            "Name": "LoanRepository.cs",
            "ParentId": "7c836039-c93b-473e-ad2e-75725d20d947",
            "Type": 1,
            "Text": "using LoanProcessingEngine.Models;\nusing System.Collections.Concurrent;\n\nnamespace LoanProcessingEngine.Repositories\n{\n    public class LoanRepository : ILoanRepository\n    {\n        private readonly ConcurrentDictionary<string, LoanDecision> _decisions = new ConcurrentDictionary<string, LoanDecision>();\n\n        public void SaveDecision(LoanDecision decision)\n        {\n            _decisions[decision.ApplicationId] = decision;\n        }\n\n        public LoanDecision GetDecision(string applicationId)\n        {\n            _decisions.TryGetValue(applicationId, out LoanDecision decision);\n            return decision;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "86e18ef2-b31f-4f26-8798-c4fd302bb65e",
        "Name": "Infrastructure",
        "ParentId": "2d830f2a-77b3-429b-bb83-c36fd4a65221",
        "Type": 0,
        "Items": [
          {
            "Id": "fb402af2-3925-4fab-9ebe-a15497d00f05",
            "Name": "LoanEvaluator.cs",
            "ParentId": "86e18ef2-b31f-4f26-8798-c4fd302bb65e",
            "Type": 1,
            "Text": "using LoanProcessingEngine.Models;\nusing System;\n\nnamespace LoanProcessingEngine.Infrastructure\n{\n    public static class LoanEvaluator\n    {\n        public static LoanDecision Evaluate(LoanApplication application)\n        {\n            var decision = new LoanDecision\n            {\n                ApplicationId = application.ApplicationId,\n                DecisionDate = DateTime.UtcNow\n            };\n\n            // Evaluate credit score\n            if (application.CreditScore < 600)\n            {\n                decision.Approved = false;\n                decision.DecisionReason = \"Loan denied due to low credit score.\";\n                return decision;\n            }\n\n            // Evaluate debt-to-income ratio\n            if (application.LoanAmount > application.AnnualIncome * 5)\n            {\n                decision.Approved = false;\n                decision.DecisionReason = \"Loan denied due to high loan amount relative to annual income.\";\n                return decision;\n            }\n\n            // If evaluations pass, approve the loan\n            decision.Approved = true;\n            decision.DecisionReason = \"Loan approved based on current financial profile.\";\n            return decision;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "550f4486-1d5f-4d61-bf9e-0e1217117631",
    "Name": "MortgageCalculationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "7f287530-3ff1-4c2d-9850-adc66c8e8bee",
        "Name": "Program.cs",
        "ParentId": "550f4486-1d5f-4d61-bf9e-0e1217117631",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace MortgageCalculationService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "5e6b7080-2d45-484e-a477-ca9f6f813ddb",
        "Name": "Startup.cs",
        "ParentId": "550f4486-1d5f-4d61-bf9e-0e1217117631",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing MortgageCalculationService.Services;\n\nnamespace MortgageCalculationService\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddScoped<IMortgageService, MortgageService>();\n            services.AddLogging();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            \n            app.UseRouting();\n            \n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "57dc6335-e00a-4ae1-9999-2fb149e1f8b3",
        "Name": "Controllers",
        "ParentId": "550f4486-1d5f-4d61-bf9e-0e1217117631",
        "Type": 0,
        "Items": [
          {
            "Id": "02eaef2b-ca6a-44c8-a4da-4b131ca9087c",
            "Name": "MortgageController.cs",
            "ParentId": "57dc6335-e00a-4ae1-9999-2fb149e1f8b3",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing MortgageCalculationService.Models;\nusing MortgageCalculationService.Services;\n\nnamespace MortgageCalculationService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class MortgageController : ControllerBase\n    {\n        private readonly IMortgageService _mortgageService;\n\n        public MortgageController(IMortgageService mortgageService)\n        {\n            _mortgageService = mortgageService;\n        }\n\n        [HttpPost(\"calculate\")]\n        public ActionResult<MortgageResponse> CalculateMortgage([FromBody] MortgageRequest request)\n        {\n            if (request == null || request.Principal <= 0 || request.AnnualInterestRate <= 0 || request.TermYears <= 0)\n            {\n                return BadRequest(\"Invalid mortgage parameters provided.\");\n            }\n\n            var response = _mortgageService.CalculateMortgage(request);\n            return Ok(response);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "76de9479-3ffa-4731-ac6e-c45ae39e5831",
        "Name": "Services",
        "ParentId": "550f4486-1d5f-4d61-bf9e-0e1217117631",
        "Type": 0,
        "Items": [
          {
            "Id": "e592c0fa-4207-4d89-bc49-77eed20b902a",
            "Name": "IMortgageService.cs",
            "ParentId": "76de9479-3ffa-4731-ac6e-c45ae39e5831",
            "Type": 1,
            "Text": "using MortgageCalculationService.Models;\n\nnamespace MortgageCalculationService.Services\n{\n    public interface IMortgageService\n    {\n        MortgageResponse CalculateMortgage(MortgageRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "853610c4-b225-4d06-85b6-e25bbad8e545",
            "Name": "MortgageService.cs",
            "ParentId": "76de9479-3ffa-4731-ac6e-c45ae39e5831",
            "Type": 1,
            "Text": "using System;\nusing MortgageCalculationService.Models;\n\nnamespace MortgageCalculationService.Services\n{\n    public class MortgageService : IMortgageService\n    {\n        public MortgageResponse CalculateMortgage(MortgageRequest request)\n        {\n            // Calculate monthly payment using the formula:\n            // Monthly Payment = [P * r(1 + r)^n] / [(1 + r)^n - 1]\n            // where P = principal, r = monthly interest rate, n = total number of payments\n\n            decimal principal = request.Principal;\n            decimal monthlyInterestRate = request.AnnualInterestRate / 100 / 12;\n            int numberOfPayments = request.TermYears * 12;\n\n            decimal monthlyPayment;\n            if (monthlyInterestRate == 0)\n            {\n                monthlyPayment = principal / numberOfPayments;\n            }\n            else\n            {\n                // Use Math.Pow for exponential calculation with double conversion\n                double r = Convert.ToDouble(monthlyInterestRate);\n                double P = Convert.ToDouble(principal);\n                int n = numberOfPayments;\n                double numerator = P * r * Math.Pow(1 + r, n);\n                double denominator = Math.Pow(1 + r, n) - 1;\n                monthlyPayment = Convert.ToDecimal(numerator / denominator);\n            }\n\n            decimal totalPayment = monthlyPayment * numberOfPayments;\n            decimal totalInterest = totalPayment - principal;\n\n            return new MortgageResponse\n            {\n                MonthlyPayment = Math.Round(monthlyPayment, 2),\n                TotalPayment = Math.Round(totalPayment, 2),\n                TotalInterest = Math.Round(totalInterest, 2)\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "1bc8c9c2-2aa2-407e-b823-bd9321d69025",
        "Name": "Models",
        "ParentId": "550f4486-1d5f-4d61-bf9e-0e1217117631",
        "Type": 0,
        "Items": [
          {
            "Id": "8393fe1b-405c-4c04-9c61-173d1a6617f9",
            "Name": "MortgageRequest.cs",
            "ParentId": "1bc8c9c2-2aa2-407e-b823-bd9321d69025",
            "Type": 1,
            "Text": "namespace MortgageCalculationService.Models\n{\n    public class MortgageRequest\n    {\n        public decimal Principal { get; set; }\n        public decimal AnnualInterestRate { get; set; }\n        public int TermYears { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "9f0b79e2-b9da-4fb3-a91e-5281d000633c",
            "Name": "MortgageResponse.cs",
            "ParentId": "1bc8c9c2-2aa2-407e-b823-bd9321d69025",
            "Type": 1,
            "Text": "namespace MortgageCalculationService.Models\n{\n    public class MortgageResponse\n    {\n        public decimal MonthlyPayment { get; set; }\n        public decimal TotalPayment { get; set; }\n        public decimal TotalInterest { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "e28ce868-4575-487c-b499-75ccd08a53fd",
    "Name": "InsuranceQuoteGenerator",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "beadb0e4-e65a-4214-9943-36b9aef5e065",
        "Name": "Program.cs",
        "ParentId": "e28ce868-4575-487c-b499-75ccd08a53fd",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing InsuranceQuoteGenerator.Services;\nusing InsuranceQuoteGenerator.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddScoped<IQuoteService, QuoteService>();\nbuilder.Services.AddScoped<IQuoteCalculator, QuoteCalculator>();\n\nvar app = builder.Build();\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "0a23b596-8a4f-4137-a61d-8de199894ea7",
        "Name": "Controllers",
        "ParentId": "e28ce868-4575-487c-b499-75ccd08a53fd",
        "Type": 0,
        "Items": [
          {
            "Id": "e709756a-8586-4be3-8c62-3ec776d0204b",
            "Name": "QuoteController.cs",
            "ParentId": "0a23b596-8a4f-4137-a61d-8de199894ea7",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing InsuranceQuoteGenerator.Models;\nusing InsuranceQuoteGenerator.Services;\n\nnamespace InsuranceQuoteGenerator.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class QuoteController : ControllerBase\n    {\n        private readonly IQuoteService _quoteService;\n        \n        public QuoteController(IQuoteService quoteService)\n        {\n            _quoteService = quoteService;\n        }\n        \n        [HttpPost(\"generate\")]\n        public async Task<IActionResult> GenerateQuote([FromBody] QuoteRequest request)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(ModelState);\n            }\n            \n            var quote = await _quoteService.GenerateQuoteAsync(request);\n            return Ok(quote);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "bfb00650-5196-4bfa-8630-fb358321b903",
        "Name": "Services",
        "ParentId": "e28ce868-4575-487c-b499-75ccd08a53fd",
        "Type": 0,
        "Items": [
          {
            "Id": "1c879327-7112-46d8-83fb-733a8f9f5969",
            "Name": "IQuoteService.cs",
            "ParentId": "bfb00650-5196-4bfa-8630-fb358321b903",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing InsuranceQuoteGenerator.Models;\n\nnamespace InsuranceQuoteGenerator.Services\n{\n    public interface IQuoteService\n    {\n        Task<InsuranceQuote> GenerateQuoteAsync(QuoteRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "81c6f859-166c-43f9-83dc-4ffcb448a4fc",
            "Name": "QuoteService.cs",
            "ParentId": "bfb00650-5196-4bfa-8630-fb358321b903",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing InsuranceQuoteGenerator.Infrastructure;\nusing InsuranceQuoteGenerator.Models;\n\nnamespace InsuranceQuoteGenerator.Services\n{\n    public class QuoteService : IQuoteService\n    {\n        private readonly IQuoteCalculator _quoteCalculator;\n\n        public QuoteService(IQuoteCalculator quoteCalculator)\n        {\n            _quoteCalculator = quoteCalculator;\n        }\n\n        public async Task<InsuranceQuote> GenerateQuoteAsync(QuoteRequest request)\n        {\n            if (request == null)\n            {\n                throw new ArgumentNullException(nameof(request));\n            }\n            \n            if (request.CoverageAmount <= 0 || request.ApplicantAge <= 0)\n            {\n                throw new ArgumentException(\"Invalid request parameters.\");\n            }\n            \n            var quote = await _quoteCalculator.CalculateQuoteAsync(request);\n            return quote;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "c6895262-b372-4a3d-8028-91db46b015c4",
        "Name": "Infrastructure",
        "ParentId": "e28ce868-4575-487c-b499-75ccd08a53fd",
        "Type": 0,
        "Items": [
          {
            "Id": "9d46a6ec-2a50-4169-87ec-b01ae72a432d",
            "Name": "QuoteCalculator.cs",
            "ParentId": "c6895262-b372-4a3d-8028-91db46b015c4",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing InsuranceQuoteGenerator.Models;\n\nnamespace InsuranceQuoteGenerator.Infrastructure\n{\n    public interface IQuoteCalculator\n    {\n        Task<InsuranceQuote> CalculateQuoteAsync(QuoteRequest request);\n    }\n\n    public class QuoteCalculator : IQuoteCalculator\n    {\n        public Task<InsuranceQuote> CalculateQuoteAsync(QuoteRequest request)\n        {\n            decimal baseMultiplier = request.InsuranceProduct.ToLower() switch\n            {\n                \"auto\" => 0.03m,\n                \"home\" => 0.02m,\n                \"life\" => 0.04m,\n                _ => 0.025m\n            };\n\n            decimal ageFactor = request.ApplicantAge < 25 ? 1.5m :\n                                request.ApplicantAge > 60 ? 1.3m : 1.0m;\n\n            decimal claimFactor = request.HasPreviousClaims ? 1.2m : 1.0m;\n\n            decimal premium = request.CoverageAmount * baseMultiplier * ageFactor * claimFactor;\n\n            var insuranceQuote = new InsuranceQuote\n            {\n                InsuranceProduct = request.InsuranceProduct,\n                Premium = Math.Round(premium, 2),\n                Currency = \"USD\"\n            };\n\n            return Task.FromResult(insuranceQuote);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "b6cf90be-dcfb-4bdc-8f2a-306bac923150",
        "Name": "Models",
        "ParentId": "e28ce868-4575-487c-b499-75ccd08a53fd",
        "Type": 0,
        "Items": [
          {
            "Id": "a3240685-182c-460a-8541-6ab5aad770e6",
            "Name": "QuoteRequest.cs",
            "ParentId": "b6cf90be-dcfb-4bdc-8f2a-306bac923150",
            "Type": 1,
            "Text": "namespace InsuranceQuoteGenerator.Models\n{\n    public class QuoteRequest\n    {\n        public string InsuranceProduct { get; set; }\n        public decimal CoverageAmount { get; set; }\n        public int ApplicantAge { get; set; }\n        public bool HasPreviousClaims { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "5fe7d491-a886-4699-a87b-0b05f1f6ae19",
            "Name": "InsuranceQuote.cs",
            "ParentId": "b6cf90be-dcfb-4bdc-8f2a-306bac923150",
            "Type": 1,
            "Text": "namespace InsuranceQuoteGenerator.Models\n{\n    public class InsuranceQuote\n    {\n        public string InsuranceProduct { get; set; }\n        public decimal Premium { get; set; }\n        public string Currency { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "f9febb63-43be-4bfe-8f80-24459459ebee",
    "Name": "DigitalSignatureService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "536db21c-59bf-4ef6-8644-6431af2d800f",
        "Name": "Program.cs",
        "ParentId": "f9febb63-43be-4bfe-8f80-24459459ebee",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing DigitalSignatureService.Services;\nusing DigitalSignatureService.Infrastructure;\n\nnamespace DigitalSignatureService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = WebApplication.CreateBuilder(args);\n            builder.Services.AddControllers();\n            builder.Services.AddSingleton<IDigitalSignatureService, DigitalSignatureService.Services.DigitalSignatureService>();\n            builder.Services.AddSingleton<ISignatureHelper, SignatureHelper>();\n            \n            var app = builder.Build();\n            \n            if (app.Environment.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            \n            app.UseRouting();\n            \n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n            \n            app.Run();\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "ad07a406-9991-4062-8eae-8c453e7f1934",
        "Name": "Controllers",
        "ParentId": "f9febb63-43be-4bfe-8f80-24459459ebee",
        "Type": 0,
        "Items": [
          {
            "Id": "672a5fad-c8ad-4397-939b-5bb16faf19f3",
            "Name": "DigitalSignatureController.cs",
            "ParentId": "ad07a406-9991-4062-8eae-8c453e7f1934",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing DigitalSignatureService.Models;\nusing DigitalSignatureService.Services;\n\nnamespace DigitalSignatureService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class DigitalSignatureController : ControllerBase\n    {\n        private readonly IDigitalSignatureService _signatureService;\n\n        public DigitalSignatureController(IDigitalSignatureService signatureService)\n        {\n            _signatureService = signatureService;\n        }\n\n        [HttpPost(\"sign\")]\n        public ActionResult<SignatureResult> SignDocument([FromBody] Document document)\n        {\n            if (document == null || string.IsNullOrEmpty(document.Content))\n            {\n                return BadRequest(\"Invalid document content.\");\n            }\n            try\n            {\n                var signatureResult = _signatureService.SignDocument(document);\n                return Ok(signatureResult);\n            }\n            catch (System.Exception ex)\n            {\n                return StatusCode(500, ex.Message);\n            }\n        }\n\n        [HttpPost(\"verify\")]\n        public ActionResult<bool> VerifyDocumentSignature([FromBody] VerificationRequest request)\n        {\n            if (request == null || request.Document == null || string.IsNullOrEmpty(request.Signature))\n            {\n                return BadRequest(\"Invalid verification request.\");\n            }\n            try\n            {\n                var isValid = _signatureService.VerifySignature(request.Document, request.Signature);\n                return Ok(isValid);\n            }\n            catch (System.Exception ex)\n            {\n                return StatusCode(500, ex.Message);\n            }\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "fbb55c80-6070-4437-b041-aaac2ed992d3",
        "Name": "Services",
        "ParentId": "f9febb63-43be-4bfe-8f80-24459459ebee",
        "Type": 0,
        "Items": [
          {
            "Id": "9565da77-6876-47fd-9bc7-e4af963270df",
            "Name": "IDigitalSignatureService.cs",
            "ParentId": "fbb55c80-6070-4437-b041-aaac2ed992d3",
            "Type": 1,
            "Text": "using DigitalSignatureService.Models;\n\nnamespace DigitalSignatureService.Services\n{\n    public interface IDigitalSignatureService\n    {\n        SignatureResult SignDocument(Document document);\n        bool VerifySignature(Document document, string signature);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "d28e17ee-f667-434c-9e1f-dced1a03dde7",
            "Name": "DigitalSignatureService.cs",
            "ParentId": "fbb55c80-6070-4437-b041-aaac2ed992d3",
            "Type": 1,
            "Text": "using System;\nusing DigitalSignatureService.Models;\nusing DigitalSignatureService.Infrastructure;\n\nnamespace DigitalSignatureService.Services\n{\n    public class DigitalSignatureService : IDigitalSignatureService\n    {\n        private readonly ISignatureHelper _signatureHelper;\n\n        public DigitalSignatureService(ISignatureHelper signatureHelper)\n        {\n            _signatureHelper = signatureHelper;\n        }\n\n        public SignatureResult SignDocument(Document document)\n        {\n            if (document == null || string.IsNullOrEmpty(document.Content))\n                throw new ArgumentException(\"Document content cannot be null or empty.\");\n            \n            var signature = _signatureHelper.SignData(document.Content);\n            var publicKey = _signatureHelper.GetPublicKey();\n\n            return new SignatureResult\n            {\n                Signature = signature,\n                PublicKey = publicKey\n            };\n        }\n\n        public bool VerifySignature(Document document, string signature)\n        {\n            if (document == null || string.IsNullOrEmpty(document.Content))\n                throw new ArgumentException(\"Document content cannot be null or empty.\");\n            \n            return _signatureHelper.VerifyData(document.Content, signature);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "a4eb39e8-035a-4424-93d1-da73586eeb1d",
        "Name": "Models",
        "ParentId": "f9febb63-43be-4bfe-8f80-24459459ebee",
        "Type": 0,
        "Items": [
          {
            "Id": "59b6bfaa-4324-4530-88a4-678e55355c87",
            "Name": "Document.cs",
            "ParentId": "a4eb39e8-035a-4424-93d1-da73586eeb1d",
            "Type": 1,
            "Text": "namespace DigitalSignatureService.Models\n{\n    public class Document\n    {\n        public string Id { get; set; }\n        public string Content { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "52f8c109-5eaa-41a4-9f62-c121a2610a30",
            "Name": "SignatureResult.cs",
            "ParentId": "a4eb39e8-035a-4424-93d1-da73586eeb1d",
            "Type": 1,
            "Text": "namespace DigitalSignatureService.Models\n{\n    public class SignatureResult\n    {\n        public string Signature { get; set; }\n        public string PublicKey { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "8acb476b-4e90-47f1-bc79-1f8e59f72295",
            "Name": "VerificationRequest.cs",
            "ParentId": "a4eb39e8-035a-4424-93d1-da73586eeb1d",
            "Type": 1,
            "Text": "namespace DigitalSignatureService.Models\n{\n    public class VerificationRequest\n    {\n        public Document Document { get; set; }\n        public string Signature { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "fd032ccf-53e8-49ca-a701-621b1ca771e4",
        "Name": "Infrastructure",
        "ParentId": "f9febb63-43be-4bfe-8f80-24459459ebee",
        "Type": 0,
        "Items": [
          {
            "Id": "11c931ff-6a30-44d0-91d7-05d02c575cde",
            "Name": "ISignatureHelper.cs",
            "ParentId": "fd032ccf-53e8-49ca-a701-621b1ca771e4",
            "Type": 1,
            "Text": "namespace DigitalSignatureService.Infrastructure\n{\n    public interface ISignatureHelper\n    {\n        string SignData(string data);\n        bool VerifyData(string data, string signature);\n        string GetPublicKey();\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "c60e4ff5-b56b-4d61-bbdb-93a4170677ec",
            "Name": "SignatureHelper.cs",
            "ParentId": "fd032ccf-53e8-49ca-a701-621b1ca771e4",
            "Type": 1,
            "Text": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace DigitalSignatureService.Infrastructure\n{\n    public class SignatureHelper : ISignatureHelper\n    {\n        private readonly RSA _rsa;\n\n        public SignatureHelper()\n        {\n            // In a production environment, load the RSA keys from a secure store or certificate\n            // For this implementation, a new key pair is generated at startup.\n            _rsa = RSA.Create(2048);\n        }\n\n        public string SignData(string data)\n        {\n            if (string.IsNullOrEmpty(data))\n                throw new ArgumentException(\"Data to sign cannot be null or empty.\");\n\n            byte[] dataBytes = Encoding.UTF8.GetBytes(data);\n            byte[] signatureBytes = _rsa.SignData(dataBytes, HashAlgorithmName.SHA256, RSASignaturePadding.Pkcs1);\n            return Convert.ToBase64String(signatureBytes);\n        }\n\n        public bool VerifyData(string data, string signature)\n        {\n            if (string.IsNullOrEmpty(data) || string.IsNullOrEmpty(signature))\n                throw new ArgumentException(\"Invalid data or signature for verification.\");\n\n            byte[] dataBytes = Encoding.UTF8.GetBytes(data);\n            byte[] signatureBytes = Convert.FromBase64String(signature);\n            return _rsa.VerifyData(dataBytes, signatureBytes, HashAlgorithmName.SHA256, RSASignaturePadding.Pkcs1);\n        }\n\n        public string GetPublicKey()\n        {\n            // Export the public key in XML format. In production, use a standard format as required.\n            return _rsa.ToXmlString(false);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "34e4b09d-0526-4dd6-8856-0f7a5ca8ee1a",
    "Name": "DocumentManagementSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "a6c11172-2542-4919-9fac-f95aaccd671c",
        "Name": "Program.cs",
        "ParentId": "34e4b09d-0526-4dd6-8856-0f7a5ca8ee1a",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace DocumentManagementSystem\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "bf2cc287-0329-4c62-80a7-38578cb9bf97",
        "Name": "Startup.cs",
        "ParentId": "34e4b09d-0526-4dd6-8856-0f7a5ca8ee1a",
        "Type": 1,
        "Text": "using DocumentManagementSystem.Data;\nusing DocumentManagementSystem.Services;\nusing DocumentManagementSystem.Utils;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace DocumentManagementSystem\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IDocumentService, DocumentService>();\n            services.AddSingleton<IDocumentRepository, DocumentRepository>();\n            services.AddSingleton<IEncryptionHelper, EncryptionHelper>();\n            services.AddLogging();\n            // Configure authentication and authorization as required for secure access\n            services.AddAuthentication(\"Bearer\")\n                    .AddJwtBearer(\"Bearer\", options =>\n                    {\n                        options.Authority = \"https://your.identityserver.com\";\n                        options.Audience = \"document_api\";\n                    });\n            services.AddAuthorization();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseAuthentication();\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a524c240-b333-4d0e-b91a-746867aa1937",
        "Name": "Controllers",
        "ParentId": "34e4b09d-0526-4dd6-8856-0f7a5ca8ee1a",
        "Type": 0,
        "Items": [
          {
            "Id": "daa84d15-63b8-4017-8d25-a2e7ce2b6ddc",
            "Name": "DocumentController.cs",
            "ParentId": "a524c240-b333-4d0e-b91a-746867aa1937",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing DocumentManagementSystem.Models;\nusing DocumentManagementSystem.Services;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace DocumentManagementSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class DocumentController : ControllerBase\n    {\n        private readonly IDocumentService _documentService;\n\n        public DocumentController(IDocumentService documentService)\n        {\n            _documentService = documentService;\n        }\n\n        [HttpPost(\"upload\")]\n        public async Task<IActionResult> UploadDocument([FromForm] DocumentUploadRequest request)\n        {\n            var document = await _documentService.UploadDocumentAsync(request);\n            return Ok(new DocumentResponse { DocumentId = document.DocumentId, FileName = document.FileName });\n        }\n\n        [HttpGet(\"{documentId}\")]\n        public async Task<IActionResult> GetDocument(string documentId)\n        {\n            var document = await _documentService.GetDocumentAsync(documentId);\n            if (document == null)\n                return NotFound();\n            return File(document.Data, document.ContentType, document.FileName);\n        }\n\n        [HttpDelete(\"{documentId}\")]\n        public async Task<IActionResult> DeleteDocument(string documentId)\n        {\n            bool result = await _documentService.DeleteDocumentAsync(documentId);\n            if (!result)\n                return NotFound();\n            return NoContent();\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "ac8b0d5e-4f9b-4776-94e4-1ed0d7f8b1ae",
        "Name": "Services",
        "ParentId": "34e4b09d-0526-4dd6-8856-0f7a5ca8ee1a",
        "Type": 0,
        "Items": [
          {
            "Id": "254222d9-4ced-4a6f-9db2-b5a593ce5e11",
            "Name": "IDocumentService.cs",
            "ParentId": "ac8b0d5e-4f9b-4776-94e4-1ed0d7f8b1ae",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing DocumentManagementSystem.Models;\n\nnamespace DocumentManagementSystem.Services\n{\n    public interface IDocumentService\n    {\n        Task<Document> UploadDocumentAsync(DocumentUploadRequest request);\n        Task<Document> GetDocumentAsync(string documentId);\n        Task<bool> DeleteDocumentAsync(string documentId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "eeb1ab84-db15-419b-9247-aeeb4783b276",
            "Name": "DocumentService.cs",
            "ParentId": "ac8b0d5e-4f9b-4776-94e4-1ed0d7f8b1ae",
            "Type": 1,
            "Text": "using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing DocumentManagementSystem.Data;\nusing DocumentManagementSystem.Models;\nusing DocumentManagementSystem.Utils;\n\nnamespace DocumentManagementSystem.Services\n{\n    public class DocumentService : IDocumentService\n    {\n        private readonly IDocumentRepository _repository;\n        private readonly IEncryptionHelper _encryptionHelper;\n\n        public DocumentService(IDocumentRepository repository, IEncryptionHelper encryptionHelper)\n        {\n            _repository = repository;\n            _encryptionHelper = encryptionHelper;\n        }\n\n        public async Task<Document> UploadDocumentAsync(DocumentUploadRequest request)\n        {\n            using (var ms = new MemoryStream())\n            {\n                await request.File.CopyToAsync(ms);\n                var fileData = ms.ToArray();\n                // Encrypt the file data before storage\n                var encryptedData = _encryptionHelper.Encrypt(fileData);\n\n                var document = new Document\n                {\n                    DocumentId = Guid.NewGuid().ToString(),\n                    FileName = request.File.FileName,\n                    ContentType = request.File.ContentType,\n                    Data = encryptedData,\n                    UploadedAt = DateTime.UtcNow\n                };\n\n                await _repository.SaveDocumentAsync(document);\n                return document;\n            }\n        }\n\n        public async Task<Document> GetDocumentAsync(string documentId)\n        {\n            var document = await _repository.GetDocumentAsync(documentId);\n            if (document != null)\n            {\n                // Decrypt the document data before returning\n                document.Data = _encryptionHelper.Decrypt(document.Data);\n            }\n            return document;\n        }\n\n        public async Task<bool> DeleteDocumentAsync(string documentId)\n        {\n            return await _repository.DeleteDocumentAsync(documentId);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "a46f0c6c-c3b9-4dac-9dc8-52fd6642e308",
        "Name": "Models",
        "ParentId": "34e4b09d-0526-4dd6-8856-0f7a5ca8ee1a",
        "Type": 0,
        "Items": [
          {
            "Id": "da915c59-ae10-4974-a59e-774a0a6652cc",
            "Name": "Document.cs",
            "ParentId": "a46f0c6c-c3b9-4dac-9dc8-52fd6642e308",
            "Type": 1,
            "Text": "using System;\n\nnamespace DocumentManagementSystem.Models\n{\n    public class Document\n    {\n        public string DocumentId { get; set; }\n        public string FileName { get; set; }\n        public string ContentType { get; set; }\n        public byte[] Data { get; set; }\n        public DateTime UploadedAt { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "fb87b320-362e-4750-aa51-729eaf992db1",
            "Name": "DocumentUploadRequest.cs",
            "ParentId": "a46f0c6c-c3b9-4dac-9dc8-52fd6642e308",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Http;\n\nnamespace DocumentManagementSystem.Models\n{\n    public class DocumentUploadRequest\n    {\n        public IFormFile File { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "68b0033c-fb5a-41e4-a84d-aff6662cd3c4",
            "Name": "DocumentResponse.cs",
            "ParentId": "a46f0c6c-c3b9-4dac-9dc8-52fd6642e308",
            "Type": 1,
            "Text": "namespace DocumentManagementSystem.Models\n{\n    public class DocumentResponse\n    {\n        public string DocumentId { get; set; }\n        public string FileName { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "f272a486-b05f-4ae8-9fcb-59e92a4cac16",
        "Name": "Data",
        "ParentId": "34e4b09d-0526-4dd6-8856-0f7a5ca8ee1a",
        "Type": 0,
        "Items": [
          {
            "Id": "65b55e50-8c19-4b0a-943d-820266878c45",
            "Name": "IDocumentRepository.cs",
            "ParentId": "f272a486-b05f-4ae8-9fcb-59e92a4cac16",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing DocumentManagementSystem.Models;\n\nnamespace DocumentManagementSystem.Data\n{\n    public interface IDocumentRepository\n    {\n        Task SaveDocumentAsync(Document document);\n        Task<Document> GetDocumentAsync(string documentId);\n        Task<bool> DeleteDocumentAsync(string documentId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "c6e64494-15a2-4d29-8b6e-f91a6d99e76c",
            "Name": "DocumentRepository.cs",
            "ParentId": "f272a486-b05f-4ae8-9fcb-59e92a4cac16",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing System.Threading.Tasks;\nusing DocumentManagementSystem.Models;\n\nnamespace DocumentManagementSystem.Data\n{\n    public class DocumentRepository : IDocumentRepository\n    {\n        // In a production system, replace this in-memory store with a persistent storage mechanism\n        private readonly ConcurrentDictionary<string, Document> _documents = new ConcurrentDictionary<string, Document>();\n\n        public Task SaveDocumentAsync(Document document)\n        {\n            _documents[document.DocumentId] = document;\n            return Task.CompletedTask;\n        }\n\n        public Task<Document> GetDocumentAsync(string documentId)\n        {\n            _documents.TryGetValue(documentId, out Document document);\n            return Task.FromResult(document);\n        }\n\n        public Task<bool> DeleteDocumentAsync(string documentId)\n        {\n            bool removed = _documents.TryRemove(documentId, out _);\n            return Task.FromResult(removed);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "7fcc484d-a516-4e1c-9b2b-a048ab63a76a",
        "Name": "Utils",
        "ParentId": "34e4b09d-0526-4dd6-8856-0f7a5ca8ee1a",
        "Type": 0,
        "Items": [
          {
            "Id": "4c293adf-42f1-4d5a-b425-ed4a1efa3155",
            "Name": "EncryptionHelper.cs",
            "ParentId": "7fcc484d-a516-4e1c-9b2b-a048ab63a76a",
            "Type": 1,
            "Text": "using System;\nusing System.IO;\nusing System.Security.Cryptography;\n\nnamespace DocumentManagementSystem.Utils\n{\n    public interface IEncryptionHelper\n    {\n        byte[] Encrypt(byte[] data);\n        byte[] Decrypt(byte[] data);\n    }\n\n    public class EncryptionHelper : IEncryptionHelper\n    {\n        private readonly byte[] Key;\n        private readonly byte[] IV;\n\n        public EncryptionHelper()\n        {\n            // In production, use a secure key management system\n            Key = Convert.FromBase64String(\"u5j1wJ7zWx5UoSe3uszFuIaF8kCkzW5zX2Uo8upwKTA=\"); // 32 bytes key\n            IV = Convert.FromBase64String(\"w7v3z1bXH4r8/n9VTx0jvw==\"); // 16 bytes IV\n        }\n\n        public byte[] Encrypt(byte[] data)\n        {\n            using (Aes aes = Aes.Create())\n            {\n                aes.Key = Key;\n                aes.IV = IV;\n                using (var ms = new MemoryStream())\n                using (var cs = new CryptoStream(ms, aes.CreateEncryptor(), CryptoStreamMode.Write))\n                {\n                    cs.Write(data, 0, data.Length);\n                    cs.FlushFinalBlock();\n                    return ms.ToArray();\n                }\n            }\n        }\n\n        public byte[] Decrypt(byte[] data)\n        {\n            using (Aes aes = Aes.Create())\n            {\n                aes.Key = Key;\n                aes.IV = IV;\n                using (var ms = new MemoryStream(data))\n                using (var cs = new CryptoStream(ms, aes.CreateDecryptor(), CryptoStreamMode.Read))\n                using (var original = new MemoryStream())\n                {\n                    cs.CopyTo(original);\n                    return original.ToArray();\n                }\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "31116afa-4a91-4d86-8dce-15601955d226",
    "Name": "ElectronicStatementGenerator",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "46f48c66-fae7-41d5-ad81-b88cb8a395d9",
        "Name": "Program.cs",
        "ParentId": "31116afa-4a91-4d86-8dce-15601955d226",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ElectronicStatementGenerator\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "ff73b3a3-1639-4846-bc42-8aad92fd8fc4",
        "Name": "Startup.cs",
        "ParentId": "31116afa-4a91-4d86-8dce-15601955d226",
        "Type": 1,
        "Text": "using ElectronicStatementGenerator.Controllers;\nusing ElectronicStatementGenerator.Data;\nusing ElectronicStatementGenerator.Services;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ElectronicStatementGenerator\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IStatementService, StatementService>();\n            services.AddSingleton<IAccountRepository, AccountRepository>();\n\n            services.AddLogging();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            else\n            {\n                app.UseExceptionHandler(\"/error\");\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "475432b8-f24b-4fe5-940e-10e4e3ade8b1",
        "Name": "Controllers",
        "ParentId": "31116afa-4a91-4d86-8dce-15601955d226",
        "Type": 0,
        "Items": [
          {
            "Id": "1053bd8c-c801-4b4f-93e9-3403c7b842cd",
            "Name": "StatementController.cs",
            "ParentId": "475432b8-f24b-4fe5-940e-10e4e3ade8b1",
            "Type": 1,
            "Text": "using ElectronicStatementGenerator.Models;\nusing ElectronicStatementGenerator.Services;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace ElectronicStatementGenerator.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class StatementController : ControllerBase\n    {\n        private readonly IStatementService _statementService;\n\n        public StatementController(IStatementService statementService)\n        {\n            _statementService = statementService;\n        }\n\n        [HttpPost(\"generate\")]\n        public IActionResult GenerateStatement([FromBody] StatementRequest request)\n        {\n            if (request == null || string.IsNullOrWhiteSpace(request.AccountId))\n            {\n                return BadRequest(\"Invalid statement request.\");\n            }\n\n            try\n            {\n                StatementResponse response = _statementService.GenerateStatement(request);\n                if (response == null)\n                {\n                    return NotFound(\"No transactions found for the provided account and period.\");\n                }\n                return Ok(response);\n            }\n            catch (System.Exception ex)\n            {\n                return StatusCode(500, $\"An error occurred while generating the statement: {ex.Message}\");\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "9b8ed5a5-4777-412e-b5e2-f92bfdeebb1d",
        "Name": "Services",
        "ParentId": "31116afa-4a91-4d86-8dce-15601955d226",
        "Type": 0,
        "Items": [
          {
            "Id": "1dd91027-3025-47e9-a059-b07e9737fb43",
            "Name": "IStatementService.cs",
            "ParentId": "9b8ed5a5-4777-412e-b5e2-f92bfdeebb1d",
            "Type": 1,
            "Text": "using ElectronicStatementGenerator.Models;\n\nnamespace ElectronicStatementGenerator.Services\n{\n    public interface IStatementService\n    {\n        StatementResponse GenerateStatement(StatementRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "17219428-da42-4f70-81f2-53e5ab0aae67",
            "Name": "StatementService.cs",
            "ParentId": "9b8ed5a5-4777-412e-b5e2-f92bfdeebb1d",
            "Type": 1,
            "Text": "using ElectronicStatementGenerator.Data;\nusing ElectronicStatementGenerator.Models;\nusing ElectronicStatementGenerator.Utils;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace ElectronicStatementGenerator.Services\n{\n    public class StatementService : IStatementService\n    {\n        private readonly IAccountRepository _accountRepository;\n\n        public StatementService(IAccountRepository accountRepository)\n        {\n            _accountRepository = accountRepository;\n        }\n\n        public StatementResponse GenerateStatement(StatementRequest request)\n        {\n            if (request == null || string.IsNullOrWhiteSpace(request.AccountId))\n            {\n                throw new ArgumentException(\"Invalid request data.\");\n            }\n\n            IEnumerable<Transaction> transactions = _accountRepository.GetTransactions(request.AccountId, request.Month, request.Year);\n            if (transactions == null || !transactions.Any())\n            {\n                return null; // or throw exception if account not found\n            }\n\n            decimal totalAmount = transactions.Sum(t => t.Amount);\n            \n            Statement statement = new Statement\n            {\n                AccountId = request.AccountId,\n                Month = request.Month,\n                Year = request.Year,\n                Transactions = transactions.ToList(),\n                TotalAmount = totalAmount\n            };\n\n            // Generate the electronic statement document as a formatted string\n            string documentContent = StatementFormatter.FormatStatement(statement);\n\n            return new StatementResponse\n            {\n                Success = true,\n                DocumentContent = documentContent\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "25e75b98-efa9-42e3-ac29-56f4509d3c26",
        "Name": "Models",
        "ParentId": "31116afa-4a91-4d86-8dce-15601955d226",
        "Type": 0,
        "Items": [
          {
            "Id": "62c51e89-ba5f-4151-b75a-be85ed1e1c12",
            "Name": "StatementRequest.cs",
            "ParentId": "25e75b98-efa9-42e3-ac29-56f4509d3c26",
            "Type": 1,
            "Text": "namespace ElectronicStatementGenerator.Models\n{\n    public class StatementRequest\n    {\n        public string AccountId { get; set; }\n        public int Month { get; set; }\n        public int Year { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "974a1778-2c98-41e5-9a06-7beaf22721ef",
            "Name": "StatementResponse.cs",
            "ParentId": "25e75b98-efa9-42e3-ac29-56f4509d3c26",
            "Type": 1,
            "Text": "namespace ElectronicStatementGenerator.Models\n{\n    public class StatementResponse\n    {\n        public bool Success { get; set; }\n        public string DocumentContent { get; set; }\n        public string ErrorMessage { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "345f9918-f9dc-4f82-9471-8a12cd3643d7",
            "Name": "Statement.cs",
            "ParentId": "25e75b98-efa9-42e3-ac29-56f4509d3c26",
            "Type": 1,
            "Text": "using System.Collections.Generic;\n\nnamespace ElectronicStatementGenerator.Models\n{\n    public class Statement\n    {\n        public string AccountId { get; set; }\n        public int Month { get; set; }\n        public int Year { get; set; }\n        public List<Transaction> Transactions { get; set; }\n        public decimal TotalAmount { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "08d6ec6e-8e36-4725-8efc-23e5ecb92449",
            "Name": "Transaction.cs",
            "ParentId": "25e75b98-efa9-42e3-ac29-56f4509d3c26",
            "Type": 1,
            "Text": "using System;\n\nnamespace ElectronicStatementGenerator.Models\n{\n    public class Transaction\n    {\n        public string TransactionId { get; set; }\n        public string AccountId { get; set; }\n        public System.DateTime Date { get; set; }\n        public string Description { get; set; }\n        public decimal Amount { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "aa4dbf9b-aa2f-4809-b358-c7df59d086db",
            "Name": "Account.cs",
            "ParentId": "25e75b98-efa9-42e3-ac29-56f4509d3c26",
            "Type": 1,
            "Text": "namespace ElectronicStatementGenerator.Models\n{\n    public class Account\n    {\n        public string AccountId { get; set; }\n        public string AccountHolderName { get; set; }\n        public string Email { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "924dce53-21e8-48e8-be8e-09c2f5c678ed",
        "Name": "Data",
        "ParentId": "31116afa-4a91-4d86-8dce-15601955d226",
        "Type": 0,
        "Items": [
          {
            "Id": "38c079aa-0dca-4e9f-bc38-98461654f62e",
            "Name": "IAccountRepository.cs",
            "ParentId": "924dce53-21e8-48e8-be8e-09c2f5c678ed",
            "Type": 1,
            "Text": "using ElectronicStatementGenerator.Models;\nusing System.Collections.Generic;\n\nnamespace ElectronicStatementGenerator.Data\n{\n    public interface IAccountRepository\n    {\n        IEnumerable<Transaction> GetTransactions(string accountId, int month, int year);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "7bc9568e-0b58-4668-9eab-f54570cdf552",
            "Name": "AccountRepository.cs",
            "ParentId": "924dce53-21e8-48e8-be8e-09c2f5c678ed",
            "Type": 1,
            "Text": "using ElectronicStatementGenerator.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace ElectronicStatementGenerator.Data\n{\n    public class AccountRepository : IAccountRepository\n    {\n        private readonly List<Transaction> _transactions;\n\n        public AccountRepository()\n        {\n            // In a production environment, this data would come from a database.\n            // This static list simulates transaction records for multiple accounts.\n            _transactions = new List<Transaction>\n            {\n                new Transaction { TransactionId = \"T001\", AccountId = \"ACC123\", Date = new DateTime(2023, 8, 5), Description = \"Debit Purchase\", Amount = -50.75m },\n                new Transaction { TransactionId = \"T002\", AccountId = \"ACC123\", Date = new DateTime(2023, 8, 15), Description = \"Credit Refund\", Amount = 20.00m },\n                new Transaction { TransactionId = \"T003\", AccountId = \"ACC123\", Date = new DateTime(2023, 8, 20), Description = \"Direct Deposit\", Amount = 1500.00m },\n                new Transaction { TransactionId = \"T004\", AccountId = \"ACC456\", Date = new DateTime(2023, 8, 10), Description = \"ATM Withdrawal\", Amount = -200.00m },\n                new Transaction { TransactionId = \"T005\", AccountId = \"ACC456\", Date = new DateTime(2023, 8, 22), Description = \"Salary Credit\", Amount = 2500.00m }\n            };\n        }\n\n        public IEnumerable<Transaction> GetTransactions(string accountId, int month, int year)\n        {\n            return _transactions.Where(t => t.AccountId == accountId && t.Date.Month == month && t.Date.Year == year);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "cb8f9b4f-7017-47c0-8088-72dbd5518259",
        "Name": "Utils",
        "ParentId": "31116afa-4a91-4d86-8dce-15601955d226",
        "Type": 0,
        "Items": [
          {
            "Id": "f2ddbaf1-32ef-40c9-958e-32b63ffe23e8",
            "Name": "StatementFormatter.cs",
            "ParentId": "cb8f9b4f-7017-47c0-8088-72dbd5518259",
            "Type": 1,
            "Text": "using ElectronicStatementGenerator.Models;\nusing System;\nusing System.Globalization;\nusing System.Text;\n\nnamespace ElectronicStatementGenerator.Utils\n{\n    public static class StatementFormatter\n    {\n        public static string FormatStatement(Statement statement)\n        {\n            if (statement == null)\n                throw new ArgumentNullException(nameof(statement));\n\n            StringBuilder sb = new StringBuilder();\n            sb.AppendLine(\"==============================\");\n            sb.AppendLine(\"Electronic Account Statement\");\n            sb.AppendLine(\"==============================\");\n            sb.AppendLine($\"Account ID: {statement.AccountId}\");\n            sb.AppendLine($\"Statement Period: {CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(statement.Month)} {statement.Year}\");\n            sb.AppendLine(\"------------------------------\");\n            sb.AppendLine(\"Transactions:\");\n            sb.AppendLine(\"ID\\tDate\\t\\tDescription\\tAmount\");\n\n            foreach (var txn in statement.Transactions)\n            {\n                sb.AppendLine($\"{txn.TransactionId}\\t{txn.Date.ToString(\"d\")}\\t{txn.Description}\\t{txn.Amount.ToString(\"C\")}\");\n            }\n\n            sb.AppendLine(\"------------------------------\");\n            sb.AppendLine($\"Total Amount: {statement.TotalAmount.ToString(\"C\")}\");\n            sb.AppendLine(\"==============================\");\n            return sb.ToString();\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "faf4d3fe-43f9-4f77-b27d-f3bd4b551abd",
    "Name": "ATMIntegrationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "5ca9ffac-c6a4-4b55-a57d-7ba50c5e47f0",
        "Name": "Program.cs",
        "ParentId": "faf4d3fe-43f9-4f77-b27d-f3bd4b551abd",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ATMIntegrationService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3cd90610-4a3b-460b-8945-4fb9edfcd8d7",
        "Name": "Startup.cs",
        "ParentId": "faf4d3fe-43f9-4f77-b27d-f3bd4b551abd",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing ATMIntegrationService.Services;\nusing ATMIntegrationService.Infrastructure;\n\nnamespace ATMIntegrationService\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient();\n            services.AddSingleton<IATMService, ATMService>();\n            services.AddSingleton<ICoreBankingAdapter, CoreBankingAdapter>();\n            services.AddSingleton<IATMLogger, ATMLogger>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "ee2d6bd2-bc2e-4d43-a209-c31f11d79af2",
        "Name": "Controllers",
        "ParentId": "faf4d3fe-43f9-4f77-b27d-f3bd4b551abd",
        "Type": 0,
        "Items": [
          {
            "Id": "95859cb6-d92e-45b9-b125-575549fac238",
            "Name": "ATMController.cs",
            "ParentId": "ee2d6bd2-bc2e-4d43-a209-c31f11d79af2",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing ATMIntegrationService.Services;\nusing ATMIntegrationService.Models;\n\nnamespace ATMIntegrationService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ATMController : ControllerBase\n    {\n        private readonly IATMService _atmService;\n\n        public ATMController(IATMService atmService)\n        {\n            _atmService = atmService;\n        }\n\n        [HttpPost(\"transaction\")]\n        public async Task<IActionResult> ProcessTransaction([FromBody] ATMTransactionRequest request)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(ModelState);\n            }\n\n            ATMTransactionResponse response = await _atmService.ProcessTransaction(request);\n            if (response.Success)\n            {\n                return Ok(response);\n            }\n            else\n            {\n                return BadRequest(response);\n            }\n        }\n\n        [HttpGet(\"status/{atmId}\")]\n        public async Task<IActionResult> GetATMStatus(string atmId)\n        {\n            ATMStatus status = await _atmService.GetATMStatus(atmId);\n            return Ok(status);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "09ee253d-1706-457d-8e3f-12f2efae0893",
        "Name": "Services",
        "ParentId": "faf4d3fe-43f9-4f77-b27d-f3bd4b551abd",
        "Type": 0,
        "Items": [
          {
            "Id": "fbf7cd2d-781d-487a-98bb-77bca4d7257b",
            "Name": "IATMService.cs",
            "ParentId": "09ee253d-1706-457d-8e3f-12f2efae0893",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing ATMIntegrationService.Models;\n\nnamespace ATMIntegrationService.Services\n{\n    public interface IATMService\n    {\n        Task<ATMTransactionResponse> ProcessTransaction(ATMTransactionRequest request);\n        Task<ATMStatus> GetATMStatus(string atmId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "dc4cc020-0cac-4393-aead-78205cd491b2",
            "Name": "ATMService.cs",
            "ParentId": "09ee253d-1706-457d-8e3f-12f2efae0893",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing ATMIntegrationService.Models;\nusing ATMIntegrationService.Infrastructure;\n\nnamespace ATMIntegrationService.Services\n{\n    public class ATMService : IATMService\n    {\n        private readonly ICoreBankingAdapter _bankingAdapter;\n        private readonly IATMLogger _logger;\n\n        public ATMService(ICoreBankingAdapter bankingAdapter, IATMLogger logger)\n        {\n            _bankingAdapter = bankingAdapter;\n            _logger = logger;\n        }\n\n        public async Task<ATMTransactionResponse> ProcessTransaction(ATMTransactionRequest request)\n        {\n            try\n            {\n                if (string.IsNullOrEmpty(request.ATMId) || string.IsNullOrEmpty(request.TransactionType))\n                {\n                    return new ATMTransactionResponse { Success = false, Message = \"Invalid request parameters\" };\n                }\n\n                var transactionResult = await _bankingAdapter.SendTransactionRequest(request);\n                _logger.LogInfo($\"Processed transaction for ATM {request.ATMId} with type {request.TransactionType}\");\n\n                return new ATMTransactionResponse\n                {\n                    Success = transactionResult.Success,\n                    Message = transactionResult.Message,\n                    TransactionId = transactionResult.TransactionId\n                };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"Error processing transaction\", ex);\n                return new ATMTransactionResponse { Success = false, Message = $\"Error: {ex.Message}\" };\n            }\n        }\n\n        public async Task<ATMStatus> GetATMStatus(string atmId)\n        {\n            var status = await _bankingAdapter.GetATMStatus(atmId);\n            _logger.LogInfo($\"Retrieved status for ATM {atmId}\");\n            return status;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "af9adb57-570d-4b54-8f5a-fc49d95f06b3",
        "Name": "Models",
        "ParentId": "faf4d3fe-43f9-4f77-b27d-f3bd4b551abd",
        "Type": 0,
        "Items": [
          {
            "Id": "c1f137fd-12ff-4a25-a31a-de6f6e9ef187",
            "Name": "ATMTransactionRequest.cs",
            "ParentId": "af9adb57-570d-4b54-8f5a-fc49d95f06b3",
            "Type": 1,
            "Text": "namespace ATMIntegrationService.Models\n{\n    public class ATMTransactionRequest\n    {\n        public string ATMId { get; set; }\n        public string TransactionType { get; set; } // e.g., \"Withdrawal\", \"Deposit\", \"BalanceInquiry\"\n        public decimal Amount { get; set; }\n        public string AccountNumber { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "47a0ba66-7325-42e3-b39d-4d6c6f41e4a7",
            "Name": "ATMTransactionResponse.cs",
            "ParentId": "af9adb57-570d-4b54-8f5a-fc49d95f06b3",
            "Type": 1,
            "Text": "namespace ATMIntegrationService.Models\n{\n    public class ATMTransactionResponse\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n        public string TransactionId { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "56b64483-54b7-48e2-9288-c8fcaf17da3e",
            "Name": "ATMStatus.cs",
            "ParentId": "af9adb57-570d-4b54-8f5a-fc49d95f06b3",
            "Type": 1,
            "Text": "namespace ATMIntegrationService.Models\n{\n    public class ATMStatus\n    {\n        public string ATMId { get; set; }\n        public bool IsOperational { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "6d5b7477-7544-416e-9646-80e2f2a0ca5b",
        "Name": "Infrastructure",
        "ParentId": "faf4d3fe-43f9-4f77-b27d-f3bd4b551abd",
        "Type": 0,
        "Items": [
          {
            "Id": "a9c3e0cc-0258-4987-8fd2-99f9eb1d5ad5",
            "Name": "ICoreBankingAdapter.cs",
            "ParentId": "6d5b7477-7544-416e-9646-80e2f2a0ca5b",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing ATMIntegrationService.Models;\n\nnamespace ATMIntegrationService.Infrastructure\n{\n    public interface ICoreBankingAdapter\n    {\n        Task<ATMTransactionResponse> SendTransactionRequest(ATMTransactionRequest request);\n        Task<ATMStatus> GetATMStatus(string atmId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "03f87f47-86b5-4609-89c7-2ae540ddf83d",
            "Name": "CoreBankingAdapter.cs",
            "ParentId": "6d5b7477-7544-416e-9646-80e2f2a0ca5b",
            "Type": 1,
            "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing ATMIntegrationService.Models;\nusing Microsoft.Extensions.Configuration;\n\nnamespace ATMIntegrationService.Infrastructure\n{\n    public class CoreBankingAdapter : ICoreBankingAdapter\n    {\n        private readonly HttpClient _httpClient;\n        private readonly IConfiguration _configuration;\n\n        public CoreBankingAdapter(IHttpClientFactory httpClientFactory, IConfiguration configuration)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n            _configuration = configuration;\n        }\n\n        public async Task<ATMTransactionResponse> SendTransactionRequest(ATMTransactionRequest request)\n        {\n            string endpoint = _configuration[\"CoreBanking:TransactionEndpoint\"];\n            if (string.IsNullOrEmpty(endpoint))\n            {\n                throw new Exception(\"Core Banking Transaction Endpoint not configured\");\n            }\n\n            var jsonRequest = JsonSerializer.Serialize(request);\n            var content = new StringContent(jsonRequest, Encoding.UTF8, \"application/json\");\n            HttpResponseMessage response = await _httpClient.PostAsync(endpoint, content);\n            response.EnsureSuccessStatusCode();\n            string jsonResponse = await response.Content.ReadAsStringAsync();\n            var result = JsonSerializer.Deserialize<ATMTransactionResponse>(jsonResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n            return result;\n        }\n\n        public async Task<ATMStatus> GetATMStatus(string atmId)\n        {\n            string endpoint = _configuration[\"CoreBanking:StatusEndpoint\"];\n            if (string.IsNullOrEmpty(endpoint))\n            {\n                throw new Exception(\"Core Banking Status Endpoint not configured\");\n            }\n\n            string requestUrl = $\"{endpoint}?atmId={atmId}\";\n            HttpResponseMessage response = await _httpClient.GetAsync(requestUrl);\n            response.EnsureSuccessStatusCode();\n            string jsonResponse = await response.Content.ReadAsStringAsync();\n            var status = JsonSerializer.Deserialize<ATMStatus>(jsonResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n            return status;\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "b489225b-b193-494b-8564-da9686b9f683",
            "Name": "IATMLogger.cs",
            "ParentId": "6d5b7477-7544-416e-9646-80e2f2a0ca5b",
            "Type": 1,
            "Text": "using System;\n\nnamespace ATMIntegrationService.Infrastructure\n{\n    public interface IATMLogger\n    {\n        void LogInfo(string message);\n        void LogError(string message, Exception ex);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "eafa2d54-76ab-41f8-947b-3bc4c713ab54",
            "Name": "ATMLogger.cs",
            "ParentId": "6d5b7477-7544-416e-9646-80e2f2a0ca5b",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace ATMIntegrationService.Infrastructure\n{\n    public class ATMLogger : IATMLogger\n    {\n        private readonly ILogger<ATMLogger> _logger;\n\n        public ATMLogger(ILogger<ATMLogger> logger)\n        {\n            _logger = logger;\n        }\n\n        public void LogInfo(string message)\n        {\n            _logger.LogInformation(message);\n        }\n\n        public void LogError(string message, Exception ex)\n        {\n            _logger.LogError(ex, message);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "d853730e-cdbe-496c-b284-014ddbac18e2",
    "Name": "BranchLocatorTool",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "c81cc3ae-999f-4fe7-827f-036b677cfc0e",
        "Name": "Program.cs",
        "ParentId": "d853730e-cdbe-496c-b284-014ddbac18e2",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace BranchLocatorTool\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "c464eb76-97e2-4018-9748-08198abeb682",
        "Name": "Startup.cs",
        "ParentId": "d853730e-cdbe-496c-b284-014ddbac18e2",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing BranchLocatorTool.Services;\nusing BranchLocatorTool.Infrastructure;\n\nnamespace BranchLocatorTool\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient();\n            services.AddSingleton<ILocatorService, LocatorService>();\n            services.AddSingleton<IGeoLocationAdapter, GeoLocationAdapter>();\n        }\n\n        public void Configure(IApplicationBuilder app, IHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "223d1ebf-68d3-4592-b75e-7fa62d862542",
        "Name": "Controllers",
        "ParentId": "d853730e-cdbe-496c-b284-014ddbac18e2",
        "Type": 0,
        "Items": [
          {
            "Id": "7c9fdf78-1f73-436b-adff-a83560df7730",
            "Name": "LocatorController.cs",
            "ParentId": "223d1ebf-68d3-4592-b75e-7fa62d862542",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing BranchLocatorTool.Services;\nusing BranchLocatorTool.Models;\nusing System.Threading.Tasks;\n\nnamespace BranchLocatorTool.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class LocatorController : ControllerBase\n    {\n        private readonly ILocatorService _locatorService;\n\n        public LocatorController(ILocatorService locatorService)\n        {\n            _locatorService = locatorService;\n        }\n\n        [HttpPost(\"find\")]\n        public async Task<ActionResult<LocatorResponse>> FindLocations([FromBody] LocationRequest request)\n        {\n            var result = await _locatorService.FindNearbyLocationsAsync(request);\n            if (result == null)\n            {\n                return NotFound();\n            }\n            return Ok(result);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "41e725c2-fd18-47c8-bb8c-17745a4a595b",
        "Name": "Services",
        "ParentId": "d853730e-cdbe-496c-b284-014ddbac18e2",
        "Type": 0,
        "Items": [
          {
            "Id": "8904a99b-68eb-47dc-8a07-cba105b21463",
            "Name": "ILocatorService.cs",
            "ParentId": "41e725c2-fd18-47c8-bb8c-17745a4a595b",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing BranchLocatorTool.Models;\n\nnamespace BranchLocatorTool.Services\n{\n    public interface ILocatorService\n    {\n        Task<LocatorResponse> FindNearbyLocationsAsync(LocationRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "8bb02dd6-11fd-46f1-bc55-c7f660817da5",
            "Name": "LocatorService.cs",
            "ParentId": "41e725c2-fd18-47c8-bb8c-17745a4a595b",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing BranchLocatorTool.Models;\nusing BranchLocatorTool.Infrastructure;\nusing Microsoft.Extensions.Logging;\n\nnamespace BranchLocatorTool.Services\n{\n    public class LocatorService : ILocatorService\n    {\n        private readonly IGeoLocationAdapter _geoLocationAdapter;\n        private readonly ILogger<LocatorService> _logger;\n\n        public LocatorService(IGeoLocationAdapter geoLocationAdapter, ILogger<LocatorService> logger)\n        {\n            _geoLocationAdapter = geoLocationAdapter;\n            _logger = logger;\n        }\n\n        public async Task<LocatorResponse> FindNearbyLocationsAsync(LocationRequest request)\n        {\n            _logger.LogInformation(\"Finding nearby locations for Latitude: {Latitude}, Longitude: {Longitude}\", request.Latitude, request.Longitude);\n            var branches = await _geoLocationAdapter.GetNearbyBranchesAsync(request.Latitude, request.Longitude, request.Radius);\n            var atms = await _geoLocationAdapter.GetNearbyAtmsAsync(request.Latitude, request.Longitude, request.Radius);\n\n            return new LocatorResponse\n            {\n                Branches = branches,\n                Atms = atms\n            };\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "02490e68-cca5-4931-a49a-4878e59e5702",
        "Name": "Models",
        "ParentId": "d853730e-cdbe-496c-b284-014ddbac18e2",
        "Type": 0,
        "Items": [
          {
            "Id": "7f11c6cd-cae1-48ab-a29b-6f9dd96a0a34",
            "Name": "Branch.cs",
            "ParentId": "02490e68-cca5-4931-a49a-4878e59e5702",
            "Type": 1,
            "Text": "namespace BranchLocatorTool.Models\n{\n    public class Branch\n    {\n        public string BranchId { get; set; }\n        public string Name { get; set; }\n        public string Address { get; set; }\n        public double Latitude { get; set; }\n        public double Longitude { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "8ec98c55-1e6b-44a2-a383-2343fcf33ab4",
            "Name": "Atm.cs",
            "ParentId": "02490e68-cca5-4931-a49a-4878e59e5702",
            "Type": 1,
            "Text": "namespace BranchLocatorTool.Models\n{\n    public class Atm\n    {\n        public string AtmId { get; set; }\n        public string LocationName { get; set; }\n        public string Address { get; set; }\n        public double Latitude { get; set; }\n        public double Longitude { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "d4830e9a-b76c-4ce3-b7e5-797ad89799d4",
            "Name": "LocationRequest.cs",
            "ParentId": "02490e68-cca5-4931-a49a-4878e59e5702",
            "Type": 1,
            "Text": "namespace BranchLocatorTool.Models\n{\n    public class LocationRequest\n    {\n        public double Latitude { get; set; }\n        public double Longitude { get; set; }\n        public double Radius { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "dff15129-3b3b-4653-8a72-c5d5f25fce7f",
            "Name": "LocatorResponse.cs",
            "ParentId": "02490e68-cca5-4931-a49a-4878e59e5702",
            "Type": 1,
            "Text": "using System.Collections.Generic;\n\nnamespace BranchLocatorTool.Models\n{\n    public class LocatorResponse\n    {\n        public List<Branch> Branches { get; set; }\n        public List<Atm> Atms { get; set; }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "5f589338-fe82-48f6-81e2-9c2d25a419f8",
        "Name": "Infrastructure",
        "ParentId": "d853730e-cdbe-496c-b284-014ddbac18e2",
        "Type": 0,
        "Items": [
          {
            "Id": "1a0ee30e-e2b3-466b-9804-517c2ad6dba5",
            "Name": "IGeoLocationAdapter.cs",
            "ParentId": "5f589338-fe82-48f6-81e2-9c2d25a419f8",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing BranchLocatorTool.Models;\n\nnamespace BranchLocatorTool.Infrastructure\n{\n    public interface IGeoLocationAdapter\n    {\n        Task<List<Branch>> GetNearbyBranchesAsync(double latitude, double longitude, double radius);\n        Task<List<Atm>> GetNearbyAtmsAsync(double latitude, double longitude, double radius);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "05de7538-3452-49dd-8888-4f837a13a972",
            "Name": "GeoLocationAdapter.cs",
            "ParentId": "5f589338-fe82-48f6-81e2-9c2d25a419f8",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing BranchLocatorTool.Models;\n\nnamespace BranchLocatorTool.Infrastructure\n{\n    public class GeoLocationAdapter : IGeoLocationAdapter\n    {\n        private readonly HttpClient _httpClient;\n\n        public GeoLocationAdapter(IHttpClientFactory httpClientFactory)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n        }\n\n        public async Task<List<Branch>> GetNearbyBranchesAsync(double latitude, double longitude, double radius)\n        {\n            var requestUri = $\"https://api.mappingprovider.com/branches?lat={latitude}&lon={longitude}&radius={radius}\";\n            var response = await _httpClient.GetAsync(requestUri);\n\n            if (response.StatusCode == HttpStatusCode.OK)\n            {\n                var json = await response.Content.ReadAsStringAsync();\n                var branches = JsonSerializer.Deserialize<List<Branch>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n                return branches;\n            }\n            throw new Exception(\"Failed to retrieve branches from external service.\");\n        }\n\n        public async Task<List<Atm>> GetNearbyAtmsAsync(double latitude, double longitude, double radius)\n        {\n            var requestUri = $\"https://api.mappingprovider.com/atms?lat={latitude}&lon={longitude}&radius={radius}\";\n            var response = await _httpClient.GetAsync(requestUri);\n\n            if (response.StatusCode == HttpStatusCode.OK)\n            {\n                var json = await response.Content.ReadAsStringAsync();\n                var atms = JsonSerializer.Deserialize<List<Atm>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n                return atms;\n            }\n            throw new Exception(\"Failed to retrieve ATMs from external service.\");\n        }\n    }\n}",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "580c9e22-e2ed-4f39-940a-ed01510200b0",
    "Name": "CurrencyExchangeService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "3379bf4a-134b-45bc-af10-f62a41ac0959",
        "Name": "Program.cs",
        "ParentId": "580c9e22-e2ed-4f39-940a-ed01510200b0",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing CurrencyExchangeService.Services;\nusing CurrencyExchangeService.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddHttpClient();\nbuilder.Services.AddSingleton<IExchangeService, ExchangeService>();\nbuilder.Services.AddSingleton<IRateCache, RateCache>();\nbuilder.Services.AddSingleton<IExternalRateProvider, ExternalRateProvider>();\nbuilder.Services.AddSingleton<ILoggerService, LoggerService>();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseEndpoints(endpoints => { endpoints.MapControllers(); });\n\napp.Run();\n",
        "Language": 0
      },
      {
        "Id": "6998a526-d585-4918-a52f-b8df232b5e20",
        "Name": "Controllers",
        "ParentId": "580c9e22-e2ed-4f39-940a-ed01510200b0",
        "Type": 0,
        "Items": [
          {
            "Id": "67b0307d-a477-42ae-8ba3-2379f0473213",
            "Name": "ExchangeController.cs",
            "ParentId": "6998a526-d585-4918-a52f-b8df232b5e20",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing CurrencyExchangeService.Services;\nusing CurrencyExchangeService.Models;\n\nnamespace CurrencyExchangeService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ExchangeController : ControllerBase\n    {\n        private readonly IExchangeService _exchangeService;\n        \n        public ExchangeController(IExchangeService exchangeService)\n        {\n            _exchangeService = exchangeService;\n        }\n        \n        [HttpGet(\"rate\")]\n        public async Task<IActionResult> GetRate([FromQuery] string from, [FromQuery] string to)\n        {\n            if(string.IsNullOrWhiteSpace(from) || string.IsNullOrWhiteSpace(to))\n                return BadRequest(\"Currency codes must be provided.\");\n            \n            decimal rate = await _exchangeService.GetExchangeRateAsync(from.ToUpper(), to.ToUpper());\n            \n            return Ok(new { From = from.ToUpper(), To = to.ToUpper(), Rate = rate });\n        }\n        \n        [HttpPost(\"convert\")]\n        public async Task<IActionResult> Convert([FromBody] CurrencyConversionRequest request)\n        {\n            if(request == null || string.IsNullOrWhiteSpace(request.FromCurrency) || \n               string.IsNullOrWhiteSpace(request.ToCurrency) || request.Amount <= 0)\n                return BadRequest(\"Invalid conversion request.\");\n            \n            decimal convertedAmount = await _exchangeService.ConvertCurrencyAsync(request.FromCurrency.ToUpper(), \n                                                                                       request.ToCurrency.ToUpper(), \n                                                                                       request.Amount);\n            var response = new CurrencyConversionResponse\n            {\n                FromCurrency = request.FromCurrency.ToUpper(),\n                ToCurrency = request.ToCurrency.ToUpper(),\n                OriginalAmount = request.Amount,\n                ConvertedAmount = convertedAmount,\n                ExchangeRate = await _exchangeService.GetExchangeRateAsync(request.FromCurrency.ToUpper(), request.ToCurrency.ToUpper()),\n                Timestamp = System.DateTime.UtcNow\n            };\n            \n            return Ok(response);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "51877431-d929-4b56-948f-58d1f1f3bf8a",
        "Name": "Services",
        "ParentId": "580c9e22-e2ed-4f39-940a-ed01510200b0",
        "Type": 0,
        "Items": [
          {
            "Id": "5d4663a1-b367-49fc-8da7-1d809ba8b7fa",
            "Name": "IExchangeService.cs",
            "ParentId": "51877431-d929-4b56-948f-58d1f1f3bf8a",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\n\nnamespace CurrencyExchangeService.Services\n{\n    public interface IExchangeService\n    {\n        Task<decimal> GetExchangeRateAsync(string fromCurrency, string toCurrency);\n        Task<decimal> ConvertCurrencyAsync(string fromCurrency, string toCurrency, decimal amount);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "2c13af35-028c-4c88-ba59-763d01e46a17",
            "Name": "ExchangeService.cs",
            "ParentId": "51877431-d929-4b56-948f-58d1f1f3bf8a",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing CurrencyExchangeService.Infrastructure;\nusing Microsoft.Extensions.Logging;\n\nnamespace CurrencyExchangeService.Services\n{\n    public class ExchangeService : IExchangeService\n    {\n        private readonly IRateCache _rateCache;\n        private readonly IExternalRateProvider _externalRateProvider;\n        private readonly ILoggerService _logger;\n        \n        public ExchangeService(IRateCache rateCache, IExternalRateProvider externalRateProvider, ILoggerService logger)\n        {\n            _rateCache = rateCache;\n            _externalRateProvider = externalRateProvider;\n            _logger = logger;\n        }\n        \n        public async Task<decimal> GetExchangeRateAsync(string fromCurrency, string toCurrency)\n        {\n            var (found, rate) = await _rateCache.TryGetRateAsync(fromCurrency, toCurrency);\n            if(found)\n            {\n                _logger.LogInfo($\"Cache hit for rate {fromCurrency} to {toCurrency}\");\n                return rate;\n            }\n            \n            rate = await _externalRateProvider.FetchExchangeRateAsync(fromCurrency, toCurrency);\n            await _rateCache.SetRateAsync(fromCurrency, toCurrency, rate);\n            _logger.LogInfo($\"Fetched new rate {fromCurrency} to {toCurrency}: {rate}\");\n            return rate;\n        }\n        \n        public async Task<decimal> ConvertCurrencyAsync(string fromCurrency, string toCurrency, decimal amount)\n        {\n            decimal rate = await GetExchangeRateAsync(fromCurrency, toCurrency);\n            return amount * rate;\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e4a49090-d636-4d93-a64e-d62e205d859e",
            "Name": "IRateCache.cs",
            "ParentId": "51877431-d929-4b56-948f-58d1f1f3bf8a",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\n\nnamespace CurrencyExchangeService.Services\n{\n    public interface IRateCache\n    {\n        Task<(bool found, decimal rate)> TryGetRateAsync(string fromCurrency, string toCurrency);\n        Task SetRateAsync(string fromCurrency, string toCurrency, decimal rate);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "543d61b3-d071-46bc-a1a5-067c9e73a89e",
            "Name": "RateCache.cs",
            "ParentId": "51877431-d929-4b56-948f-58d1f1f3bf8a",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Concurrent;\nusing System.Threading.Tasks;\n\nnamespace CurrencyExchangeService.Services\n{\n    public class RateCache : IRateCache\n    {\n        private readonly ConcurrentDictionary<string, (decimal rate, DateTime timestamp)> _cache = new ConcurrentDictionary<string, (decimal rate, DateTime timestamp)>();\n        private readonly TimeSpan _cacheDuration = TimeSpan.FromMinutes(10);\n        \n        private string GetKey(string fromCurrency, string toCurrency) => $\"{fromCurrency}_{toCurrency}\";\n        \n        public Task<(bool found, decimal rate)> TryGetRateAsync(string fromCurrency, string toCurrency)\n        {\n            string key = GetKey(fromCurrency, toCurrency);\n            if(_cache.TryGetValue(key, out var entry))\n            {\n                if(DateTime.UtcNow - entry.timestamp < _cacheDuration)\n                {\n                    return Task.FromResult((true, entry.rate));\n                }\n                else\n                {\n                    _cache.TryRemove(key, out _);\n                }\n            }\n            return Task.FromResult((false, 0m));\n        }\n        \n        public Task SetRateAsync(string fromCurrency, string toCurrency, decimal rate)\n        {\n            string key = GetKey(fromCurrency, toCurrency);\n            _cache[key] = (rate, DateTime.UtcNow);\n            return Task.CompletedTask;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "39b034bb-58de-4dcc-9163-16716806b8c1",
        "Name": "Infrastructure",
        "ParentId": "580c9e22-e2ed-4f39-940a-ed01510200b0",
        "Type": 0,
        "Items": [
          {
            "Id": "a3e1778b-6d50-40b9-8d05-e667084e1c59",
            "Name": "IExternalRateProvider.cs",
            "ParentId": "39b034bb-58de-4dcc-9163-16716806b8c1",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\n\nnamespace CurrencyExchangeService.Infrastructure\n{\n    public interface IExternalRateProvider\n    {\n        Task<decimal> FetchExchangeRateAsync(string fromCurrency, string toCurrency);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "a29b7720-e9fc-4ff7-af27-e5a3b3aba3d6",
            "Name": "ExternalRateProvider.cs",
            "ParentId": "39b034bb-58de-4dcc-9163-16716806b8c1",
            "Type": 1,
            "Text": "using System;\nusing System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace CurrencyExchangeService.Infrastructure\n{\n    public class ExternalRateProvider : IExternalRateProvider\n    {\n        private readonly HttpClient _httpClient;\n        \n        public ExternalRateProvider(IHttpClientFactory httpClientFactory)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n        }\n        \n        public async Task<decimal> FetchExchangeRateAsync(string fromCurrency, string toCurrency)\n        {\n            string requestUri = $\"https://api.exchangerate.host/latest?base={fromCurrency}&symbols={toCurrency}\";\n            var response = await _httpClient.GetAsync(requestUri);\n            response.EnsureSuccessStatusCode();\n            var json = await response.Content.ReadAsStringAsync();\n            using var document = JsonDocument.Parse(json);\n            if(document.RootElement.TryGetProperty(\"rates\", out JsonElement ratesElement) &&\n               ratesElement.TryGetProperty(toCurrency, out JsonElement rateElement) &&\n               rateElement.TryGetDecimal(out decimal rate))\n            {\n                return rate;\n            }\n            throw new Exception(\"Failed to fetch exchange rate.\");\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "daa75f8c-c7ef-4b1c-9710-9bbdf495d28c",
            "Name": "ILoggerService.cs",
            "ParentId": "39b034bb-58de-4dcc-9163-16716806b8c1",
            "Type": 1,
            "Text": "namespace CurrencyExchangeService.Infrastructure\n{\n    public interface ILoggerService\n    {\n        void LogInfo(string message);\n        void LogError(string message, System.Exception ex);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "4009339e-fce2-44ac-b6b6-5b3099b58606",
            "Name": "LoggerService.cs",
            "ParentId": "39b034bb-58de-4dcc-9163-16716806b8c1",
            "Type": 1,
            "Text": "using Microsoft.Extensions.Logging;\n\nnamespace CurrencyExchangeService.Infrastructure\n{\n    public class LoggerService : ILoggerService\n    {\n        private readonly ILogger<LoggerService> _logger;\n        \n        public LoggerService(ILogger<LoggerService> logger)\n        {\n            _logger = logger;\n        }\n        \n        public void LogInfo(string message)\n        {\n            _logger.LogInformation(message);\n        }\n        \n        public void LogError(string message, System.Exception ex)\n        {\n            _logger.LogError(ex, message);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "60a1b10a-0635-4dfb-948a-f643fc5c12f0",
        "Name": "Models",
        "ParentId": "580c9e22-e2ed-4f39-940a-ed01510200b0",
        "Type": 0,
        "Items": [
          {
            "Id": "b78edcea-b842-4b74-acb3-f0d05156c355",
            "Name": "CurrencyConversionRequest.cs",
            "ParentId": "60a1b10a-0635-4dfb-948a-f643fc5c12f0",
            "Type": 1,
            "Text": "namespace CurrencyExchangeService.Models\n{\n    public class CurrencyConversionRequest\n    {\n        public string FromCurrency { get; set; }\n        public string ToCurrency { get; set; }\n        public decimal Amount { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "908b5805-f73f-4fc9-b5a3-1e1f89c57920",
            "Name": "CurrencyConversionResponse.cs",
            "ParentId": "60a1b10a-0635-4dfb-948a-f643fc5c12f0",
            "Type": 1,
            "Text": "using System;\n\nnamespace CurrencyExchangeService.Models\n{\n    public class CurrencyConversionResponse\n    {\n        public string FromCurrency { get; set; }\n        public string ToCurrency { get; set; }\n        public decimal OriginalAmount { get; set; }\n        public decimal ConvertedAmount { get; set; }\n        public decimal ExchangeRate { get; set; }\n        public DateTime Timestamp { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "fc0c5ed2-026f-463f-908c-fe14801cc53e",
    "Name": "InterestRateCalculator",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "75b73fb9-07dd-446e-8d5a-b7c98f193f2b",
        "Name": "Program.cs",
        "ParentId": "fc0c5ed2-026f-463f-908c-fe14801cc53e",
        "Type": 1,
        "Text": "using InterestRateCalculator.Services;\nusing InterestRateCalculator.Models;\nusing Microsoft.Extensions.Options;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Bind InterestRateOptions from configuration\nbuilder.Services.Configure<InterestRateOptions>(builder.Configuration.GetSection(\"InterestRateOptions\"));\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IInterestRateService, InterestRateService>();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "6643aac6-b00c-43b5-ac8f-505b9e717094",
        "Name": "Controllers",
        "ParentId": "fc0c5ed2-026f-463f-908c-fe14801cc53e",
        "Type": 0,
        "Items": [
          {
            "Id": "3b96db86-1f87-48b0-959c-7cdc76630725",
            "Name": "InterestRateController.cs",
            "ParentId": "6643aac6-b00c-43b5-ac8f-505b9e717094",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing InterestRateCalculator.Models;\nusing InterestRateCalculator.Services;\n\nnamespace InterestRateCalculator.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class InterestRateController : ControllerBase\n    {\n        private readonly IInterestRateService _interestRateService;\n\n        public InterestRateController(IInterestRateService interestRateService)\n        {\n            _interestRateService = interestRateService;\n        }\n\n        [HttpPost(\"calculate\")]\n        public ActionResult<InterestCalculationResponse> CalculateInterest([FromBody] InterestCalculationRequest request)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(ModelState);\n            }\n            var response = _interestRateService.CalculateInterest(request);\n            return Ok(response);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "8beec83b-47ff-4430-9296-e070dcafb815",
        "Name": "Services",
        "ParentId": "fc0c5ed2-026f-463f-908c-fe14801cc53e",
        "Type": 0,
        "Items": [
          {
            "Id": "1575c686-f19c-4376-bf3e-080b4a6efba5",
            "Name": "IInterestRateService.cs",
            "ParentId": "8beec83b-47ff-4430-9296-e070dcafb815",
            "Type": 1,
            "Text": "using InterestRateCalculator.Models;\n\nnamespace InterestRateCalculator.Services\n{\n    public interface IInterestRateService\n    {\n        InterestCalculationResponse CalculateInterest(InterestCalculationRequest request);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "e0cd1de3-f070-4bb5-9c7d-b8bb35ced8c4",
            "Name": "InterestRateService.cs",
            "ParentId": "8beec83b-47ff-4430-9296-e070dcafb815",
            "Type": 1,
            "Text": "using System;\nusing InterestRateCalculator.Models;\nusing Microsoft.Extensions.Options;\n\nnamespace InterestRateCalculator.Services\n{\n    public class InterestRateService : IInterestRateService\n    {\n        private readonly InterestRateOptions _options;\n\n        public InterestRateService(IOptions<InterestRateOptions> options)\n        {\n            _options = options.Value;\n        }\n\n        public InterestCalculationResponse CalculateInterest(InterestCalculationRequest request)\n        {\n            decimal rate = request.AccountType switch\n            {\n                AccountType.Savings => _options.SavingsRate,\n                AccountType.FixedDeposit => _options.FixedDepositRate,\n                AccountType.Current => _options.CurrentRate,\n                _ => throw new ArgumentException(\"Invalid account type provided.\")\n            };\n\n            decimal interest = request.Principal * rate * request.DurationInYears;\n            decimal totalAmount = request.Principal + interest;\n\n            return new InterestCalculationResponse\n            {\n                InterestRate = rate,\n                CalculatedInterest = interest,\n                TotalAmount = totalAmount\n            };\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "0b417c59-2273-48f6-9f59-033550691207",
        "Name": "Models",
        "ParentId": "fc0c5ed2-026f-463f-908c-fe14801cc53e",
        "Type": 0,
        "Items": [
          {
            "Id": "ecf2cabb-de58-4fc4-a934-c77c888308d3",
            "Name": "InterestCalculationRequest.cs",
            "ParentId": "0b417c59-2273-48f6-9f59-033550691207",
            "Type": 1,
            "Text": "using System.ComponentModel.DataAnnotations;\n\nnamespace InterestRateCalculator.Models\n{\n    public class InterestCalculationRequest\n    {\n        [Required]\n        [Range(0.01, double.MaxValue)]\n        public decimal Principal { get; set; }\n\n        [Required]\n        [Range(0.1, double.MaxValue)]\n        public decimal DurationInYears { get; set; }\n\n        [Required]\n        public AccountType AccountType { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "d54c469d-68e1-4b01-9352-3728125467ce",
            "Name": "InterestCalculationResponse.cs",
            "ParentId": "0b417c59-2273-48f6-9f59-033550691207",
            "Type": 1,
            "Text": "namespace InterestRateCalculator.Models\n{\n    public class InterestCalculationResponse\n    {\n        public decimal InterestRate { get; set; }\n        public decimal CalculatedInterest { get; set; }\n        public decimal TotalAmount { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "76d14211-6974-418f-ac97-61aa7fa074ef",
            "Name": "InterestRateOptions.cs",
            "ParentId": "0b417c59-2273-48f6-9f59-033550691207",
            "Type": 1,
            "Text": "namespace InterestRateCalculator.Models\n{\n    public class InterestRateOptions\n    {\n        public decimal SavingsRate { get; set; }\n        public decimal FixedDepositRate { get; set; }\n        public decimal CurrentRate { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "9751e763-fdf6-4cd8-aa36-5234030786e5",
            "Name": "AccountType.cs",
            "ParentId": "0b417c59-2273-48f6-9f59-033550691207",
            "Type": 1,
            "Text": "namespace InterestRateCalculator.Models\n{\n    public enum AccountType\n    {\n        Savings,\n        FixedDeposit,\n        Current\n    }\n}",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "3d551176-892e-4c81-8f05-e80294f643d7",
    "Name": "BudgetingTool",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "74c5fb51-1c76-497d-9453-fa84641218b9",
        "Name": "Program.cs",
        "ParentId": "3d551176-892e-4c81-8f05-e80294f643d7",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing BudgetingTool.Services;\nusing BudgetingTool.Data;\nusing BudgetingTool.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IBudgetRepository, BudgetRepository>();\nbuilder.Services.AddSingleton<IBudgetService, BudgetService>();\nbuilder.Services.AddSingleton<IBudgetLogger, BudgetLogger>();\n\nbuilder.Services.AddLogging();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();\n",
        "Language": 0
      },
      {
        "Id": "6641ae95-7f4d-48e7-bc32-dc7ef0da61a8",
        "Name": "Controllers",
        "ParentId": "3d551176-892e-4c81-8f05-e80294f643d7",
        "Type": 0,
        "Items": [
          {
            "Id": "e73c0421-4b2c-4b2d-8589-310ccce163e1",
            "Name": "BudgetController.cs",
            "ParentId": "6641ae95-7f4d-48e7-bc32-dc7ef0da61a8",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing BudgetingTool.Models;\nusing BudgetingTool.Services;\nusing System.Threading.Tasks;\n\nnamespace BudgetingTool.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class BudgetController : ControllerBase\n    {\n        private readonly IBudgetService _budgetService;\n\n        public BudgetController(IBudgetService budgetService)\n        {\n            _budgetService = budgetService;\n        }\n\n        [HttpGet(\"{userId}\")]\n        public async Task<IActionResult> GetBudgetOverview(string userId)\n        {\n            var budget = await _budgetService.GetBudgetOverviewAsync(userId);\n            if (budget == null)\n                return NotFound();\n            return Ok(budget);\n        }\n\n        [HttpPost(\"{userId}/income\")]\n        public async Task<IActionResult> AddIncome(string userId, [FromBody] IncomeRequest request)\n        {\n            var result = await _budgetService.AddIncomeAsync(userId, request);\n            return Ok(result);\n        }\n\n        [HttpPost(\"{userId}/expense\")]\n        public async Task<IActionResult> AddExpense(string userId, [FromBody] ExpenseRequest request)\n        {\n            var result = await _budgetService.AddExpenseAsync(userId, request);\n            return Ok(result);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "d53fda4c-35ff-4493-aa13-c8b8876a024e",
        "Name": "Services",
        "ParentId": "3d551176-892e-4c81-8f05-e80294f643d7",
        "Type": 0,
        "Items": [
          {
            "Id": "9051e935-c71d-4a2c-9985-d874ca7cde8f",
            "Name": "IBudgetService.cs",
            "ParentId": "d53fda4c-35ff-4493-aa13-c8b8876a024e",
            "Type": 1,
            "Text": "using BudgetingTool.Models;\nusing System.Threading.Tasks;\n\nnamespace BudgetingTool.Services\n{\n    public interface IBudgetService\n    {\n        Task<Budget> GetBudgetOverviewAsync(string userId);\n        Task<Budget> AddIncomeAsync(string userId, IncomeRequest request);\n        Task<Budget> AddExpenseAsync(string userId, ExpenseRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "fdd83e90-e50d-4cf9-8c13-0c3329aed9d2",
            "Name": "BudgetService.cs",
            "ParentId": "d53fda4c-35ff-4493-aa13-c8b8876a024e",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing BudgetingTool.Models;\nusing BudgetingTool.Data;\nusing BudgetingTool.Infrastructure;\n\nnamespace BudgetingTool.Services\n{\n    public class BudgetService : IBudgetService\n    {\n        private readonly IBudgetRepository _budgetRepository;\n        private readonly IBudgetLogger _logger;\n\n        public BudgetService(IBudgetRepository budgetRepository, IBudgetLogger logger)\n        {\n            _budgetRepository = budgetRepository;\n            _logger = logger;\n        }\n\n        public async Task<Budget> GetBudgetOverviewAsync(string userId)\n        {\n            var budget = await _budgetRepository.GetBudgetAsync(userId);\n            return budget;\n        }\n\n        public async Task<Budget> AddIncomeAsync(string userId, IncomeRequest request)\n        {\n            var budget = await _budgetRepository.GetBudgetAsync(userId) ?? new Budget { UserId = userId };\n            \n            var income = new Income\n            {\n                IncomeId = Guid.NewGuid().ToString(),\n                Amount = request.Amount,\n                Date = DateTime.UtcNow,\n                Source = request.Source,\n                Description = request.Description\n            };\n\n            budget.TotalIncome += request.Amount;\n            budget.Incomes.Add(income);\n            budget.Balance = budget.TotalIncome - budget.TotalExpense;\n\n            await _budgetRepository.SaveBudgetAsync(budget);\n            _logger.LogInfo($\"Income added for user {userId}: {request.Amount}\");\n\n            return budget;\n        }\n\n        public async Task<Budget> AddExpenseAsync(string userId, ExpenseRequest request)\n        {\n            var budget = await _budgetRepository.GetBudgetAsync(userId) ?? new Budget { UserId = userId };\n            \n            var expense = new Expense\n            {\n                ExpenseId = Guid.NewGuid().ToString(),\n                Amount = request.Amount,\n                Date = DateTime.UtcNow,\n                Category = request.Category,\n                Description = request.Description\n            };\n\n            budget.TotalExpense += request.Amount;\n            budget.Expenses.Add(expense);\n            budget.Balance = budget.TotalIncome - budget.TotalExpense;\n\n            await _budgetRepository.SaveBudgetAsync(budget);\n            _logger.LogInfo($\"Expense added for user {userId}: {request.Amount}\");\n\n            return budget;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "74af0d0a-44e4-4922-b978-c4da0643d746",
        "Name": "Models",
        "ParentId": "3d551176-892e-4c81-8f05-e80294f643d7",
        "Type": 0,
        "Items": [
          {
            "Id": "f71b3d87-626a-44e4-9e6f-7ba6a766f631",
            "Name": "Budget.cs",
            "ParentId": "74af0d0a-44e4-4922-b978-c4da0643d746",
            "Type": 1,
            "Text": "using System.Collections.Generic;\n\nnamespace BudgetingTool.Models\n{\n    public class Budget\n    {\n        public string UserId { get; set; }\n        public decimal TotalIncome { get; set; }\n        public decimal TotalExpense { get; set; }\n        public decimal Balance { get; set; }\n        public List<Income> Incomes { get; set; } = new List<Income>();\n        public List<Expense> Expenses { get; set; } = new List<Expense>();\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "8b6002f7-dc84-4e72-9bcc-1a6ad2c32639",
            "Name": "Income.cs",
            "ParentId": "74af0d0a-44e4-4922-b978-c4da0643d746",
            "Type": 1,
            "Text": "namespace BudgetingTool.Models\n{\n    public class Income\n    {\n        public string IncomeId { get; set; }\n        public decimal Amount { get; set; }\n        public string Source { get; set; }\n        public string Description { get; set; }\n        public System.DateTime Date { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e89f239c-dc55-48d2-b370-b9e646c1507c",
            "Name": "Expense.cs",
            "ParentId": "74af0d0a-44e4-4922-b978-c4da0643d746",
            "Type": 1,
            "Text": "namespace BudgetingTool.Models\n{\n    public class Expense\n    {\n        public string ExpenseId { get; set; }\n        public decimal Amount { get; set; }\n        public string Category { get; set; }\n        public string Description { get; set; }\n        public System.DateTime Date { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "c6cf0173-8b01-4bc7-b1ed-d2c57a849b9a",
            "Name": "IncomeRequest.cs",
            "ParentId": "74af0d0a-44e4-4922-b978-c4da0643d746",
            "Type": 1,
            "Text": "namespace BudgetingTool.Models\n{\n    public class IncomeRequest\n    {\n        public decimal Amount { get; set; }\n        public string Source { get; set; }\n        public string Description { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e46295ce-352a-4124-b014-fcc3c8be05d5",
            "Name": "ExpenseRequest.cs",
            "ParentId": "74af0d0a-44e4-4922-b978-c4da0643d746",
            "Type": 1,
            "Text": "namespace BudgetingTool.Models\n{\n    public class ExpenseRequest\n    {\n        public decimal Amount { get; set; }\n        public string Category { get; set; }\n        public string Description { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "28f50061-5f72-4b55-82c6-724417dadaa1",
        "Name": "Data",
        "ParentId": "3d551176-892e-4c81-8f05-e80294f643d7",
        "Type": 0,
        "Items": [
          {
            "Id": "4199c496-8d7c-4de6-8606-7c1c900dfe43",
            "Name": "IBudgetRepository.cs",
            "ParentId": "28f50061-5f72-4b55-82c6-724417dadaa1",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing BudgetingTool.Models;\n\nnamespace BudgetingTool.Data\n{\n    public interface IBudgetRepository\n    {\n        Task<Budget> GetBudgetAsync(string userId);\n        Task SaveBudgetAsync(Budget budget);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "9da978bf-f28d-4d6f-a193-84c2f0922ca4",
            "Name": "BudgetRepository.cs",
            "ParentId": "28f50061-5f72-4b55-82c6-724417dadaa1",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing System.Threading.Tasks;\nusing BudgetingTool.Models;\n\nnamespace BudgetingTool.Data\n{\n    public class BudgetRepository : IBudgetRepository\n    {\n        private readonly ConcurrentDictionary<string, Budget> _budgets = new ConcurrentDictionary<string, Budget>();\n\n        public Task<Budget> GetBudgetAsync(string userId)\n        {\n            _budgets.TryGetValue(userId, out Budget budget);\n            return Task.FromResult(budget);\n        }\n\n        public Task SaveBudgetAsync(Budget budget)\n        {\n            _budgets[budget.UserId] = budget;\n            return Task.CompletedTask;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "5b36e0e3-5aef-40c2-94ee-04d60f48da2d",
        "Name": "Infrastructure",
        "ParentId": "3d551176-892e-4c81-8f05-e80294f643d7",
        "Type": 0,
        "Items": [
          {
            "Id": "82e19144-f377-4773-9864-0e8ffe5a298b",
            "Name": "BudgetLogger.cs",
            "ParentId": "5b36e0e3-5aef-40c2-94ee-04d60f48da2d",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace BudgetingTool.Infrastructure\n{\n    public interface IBudgetLogger\n    {\n        void LogInfo(string message);\n        void LogError(string message, Exception ex);\n    }\n\n    public class BudgetLogger : IBudgetLogger\n    {\n        private readonly ILogger<BudgetLogger> _logger;\n\n        public BudgetLogger(ILogger<BudgetLogger> logger)\n        {\n            _logger = logger;\n        }\n\n        public void LogInfo(string message)\n        {\n            _logger.LogInformation(message);\n        }\n\n        public void LogError(string message, Exception ex)\n        {\n            _logger.LogError(ex, message);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "84cd2d24-b315-4881-a9c3-4b9f5b7e728e",
        "Name": "Utils",
        "ParentId": "3d551176-892e-4c81-8f05-e80294f643d7",
        "Type": 0,
        "Items": [
          {
            "Id": "a5fb1b95-d13d-4bcf-bec7-3a918c112ee7",
            "Name": "BudgetCalculator.cs",
            "ParentId": "84cd2d24-b315-4881-a9c3-4b9f5b7e728e",
            "Type": 1,
            "Text": "namespace BudgetingTool.Utils\n{\n    public static class BudgetCalculator\n    {\n        public static decimal CalculateBalance(decimal totalIncome, decimal totalExpense)\n        {\n            return totalIncome - totalExpense;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "6ba9cfb8-ea40-4495-8661-a3b719aad0b9",
    "Name": "FinancialPlanningAssistant",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "bca2d20a-834b-4ac8-b468-acda78960c62",
        "Name": "Program.cs",
        "ParentId": "6ba9cfb8-ea40-4495-8661-a3b719aad0b9",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing FinancialPlanningAssistant.Services;\nusing FinancialPlanningAssistant.Data;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IGoalRepository, GoalRepository>();\nbuilder.Services.AddSingleton<INotificationService, NotificationService>();\nbuilder.Services.AddSingleton<IGoalService, GoalService>();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "fa6c03cb-f304-4651-a6d8-f4eceb21c19c",
        "Name": "Controllers",
        "ParentId": "6ba9cfb8-ea40-4495-8661-a3b719aad0b9",
        "Type": 0,
        "Items": [
          {
            "Id": "0a6ddbdb-f3fd-4ce7-b9d7-1bf27473cf8c",
            "Name": "FinancialGoalsController.cs",
            "ParentId": "fa6c03cb-f304-4651-a6d8-f4eceb21c19c",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing FinancialPlanningAssistant.Models;\nusing FinancialPlanningAssistant.Services;\n\nnamespace FinancialPlanningAssistant.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class FinancialGoalsController : ControllerBase\n    {\n        private readonly IGoalService _goalService;\n\n        public FinancialGoalsController(IGoalService goalService)\n        {\n            _goalService = goalService;\n        }\n\n        [HttpGet]\n        public IActionResult GetAllGoals()\n        {\n            var goals = _goalService.GetAllGoals();\n            return Ok(goals);\n        }\n\n        [HttpPost]\n        public IActionResult CreateGoal([FromBody] FinancialGoal goal)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(ModelState);\n            var createdGoal = _goalService.CreateGoal(goal);\n            return CreatedAtAction(nameof(GetGoalById), new { id = createdGoal.Id }, createdGoal);\n        }\n\n        [HttpGet(\"{id}\")]\n        public IActionResult GetGoalById(int id)\n        {\n            var goal = _goalService.GetGoalById(id);\n            if (goal == null)\n                return NotFound();\n            return Ok(goal);\n        }\n\n        [HttpPut(\"{id}\")]\n        public IActionResult UpdateGoal(int id, [FromBody] FinancialGoal goal)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(ModelState);\n            var updatedGoal = _goalService.UpdateGoal(id, goal);\n            if (updatedGoal == null)\n                return NotFound();\n            return Ok(updatedGoal);\n        }\n\n        [HttpDelete(\"{id}\")]\n        public IActionResult DeleteGoal(int id)\n        {\n            bool success = _goalService.DeleteGoal(id);\n            if (!success)\n                return NotFound();\n            return NoContent();\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "bc6fc8cb-bf91-4a55-8e7f-48008edbfb1c",
        "Name": "Services",
        "ParentId": "6ba9cfb8-ea40-4495-8661-a3b719aad0b9",
        "Type": 0,
        "Items": [
          {
            "Id": "6580f841-3c47-4d11-a131-6c621aacbd96",
            "Name": "IGoalService.cs",
            "ParentId": "bc6fc8cb-bf91-4a55-8e7f-48008edbfb1c",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing FinancialPlanningAssistant.Models;\n\nnamespace FinancialPlanningAssistant.Services\n{\n    public interface IGoalService\n    {\n        List<FinancialGoal> GetAllGoals();\n        FinancialGoal CreateGoal(FinancialGoal goal);\n        FinancialGoal GetGoalById(int id);\n        FinancialGoal UpdateGoal(int id, FinancialGoal goal);\n        bool DeleteGoal(int id);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "fc90b039-96df-4886-8610-c670c3c13621",
            "Name": "GoalService.cs",
            "ParentId": "bc6fc8cb-bf91-4a55-8e7f-48008edbfb1c",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing FinancialPlanningAssistant.Models;\nusing FinancialPlanningAssistant.Data;\n\nnamespace FinancialPlanningAssistant.Services\n{\n    public class GoalService : IGoalService\n    {\n        private readonly IGoalRepository _goalRepository;\n        private readonly INotificationService _notificationService;\n\n        public GoalService(IGoalRepository goalRepository, INotificationService notificationService)\n        {\n            _goalRepository = goalRepository;\n            _notificationService = notificationService;\n        }\n\n        public List<FinancialGoal> GetAllGoals()\n        {\n            return _goalRepository.GetAll();\n        }\n\n        public FinancialGoal CreateGoal(FinancialGoal goal)\n        {\n            var createdGoal = _goalRepository.Add(goal);\n            _notificationService.SendNotification($\"New goal created: {goal.Title}\");\n            return createdGoal;\n        }\n\n        public FinancialGoal GetGoalById(int id)\n        {\n            return _goalRepository.GetById(id);\n        }\n\n        public FinancialGoal UpdateGoal(int id, FinancialGoal goal)\n        {\n            var existingGoal = _goalRepository.GetById(id);\n            if (existingGoal == null)\n                return null;\n            \n            existingGoal.Title = goal.Title;\n            existingGoal.Description = goal.Description;\n            existingGoal.TargetAmount = goal.TargetAmount;\n            existingGoal.CurrentAmount = goal.CurrentAmount;\n            existingGoal.TargetDate = goal.TargetDate;\n            var updatedGoal = _goalRepository.Update(existingGoal);\n            _notificationService.SendNotification($\"Goal updated: {goal.Title}\");\n            return updatedGoal;\n        }\n\n        public bool DeleteGoal(int id)\n        {\n            var goal = _goalRepository.GetById(id);\n            if (goal == null)\n                return false;\n            _goalRepository.Delete(id);\n            _notificationService.SendNotification($\"Goal deleted: {goal.Title}\");\n            return true;\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "17a15c5c-249b-49f2-a982-1a2e925bbfe9",
            "Name": "INotificationService.cs",
            "ParentId": "bc6fc8cb-bf91-4a55-8e7f-48008edbfb1c",
            "Type": 1,
            "Text": "namespace FinancialPlanningAssistant.Services\n{\n    public interface INotificationService\n    {\n        void SendNotification(string message);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "35df0d14-f3bb-494b-940e-8101f8f311fe",
            "Name": "NotificationService.cs",
            "ParentId": "bc6fc8cb-bf91-4a55-8e7f-48008edbfb1c",
            "Type": 1,
            "Text": "using System;\n\nnamespace FinancialPlanningAssistant.Services\n{\n    public class NotificationService : INotificationService\n    {\n        public void SendNotification(string message)\n        {\n            // Integrate with production-grade notification systems (e.g., email, SMS, push notifications)\n            Console.WriteLine($\"Notification: {message}\");\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "2157dbe2-0556-472f-b38e-f38bcfbc8486",
        "Name": "Data",
        "ParentId": "6ba9cfb8-ea40-4495-8661-a3b719aad0b9",
        "Type": 0,
        "Items": [
          {
            "Id": "5dfcdc55-19ad-4ada-a734-7ac4a14564ef",
            "Name": "IGoalRepository.cs",
            "ParentId": "2157dbe2-0556-472f-b38e-f38bcfbc8486",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing FinancialPlanningAssistant.Models;\n\nnamespace FinancialPlanningAssistant.Data\n{\n    public interface IGoalRepository\n    {\n        List<FinancialGoal> GetAll();\n        FinancialGoal GetById(int id);\n        FinancialGoal Add(FinancialGoal goal);\n        FinancialGoal Update(FinancialGoal goal);\n        void Delete(int id);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "16350f59-ba2c-43cc-9cfa-35a5259a1107",
            "Name": "GoalRepository.cs",
            "ParentId": "2157dbe2-0556-472f-b38e-f38bcfbc8486",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Linq;\nusing FinancialPlanningAssistant.Models;\n\nnamespace FinancialPlanningAssistant.Data\n{\n    public class GoalRepository : IGoalRepository\n    {\n        private readonly List<FinancialGoal> _goals = new List<FinancialGoal>();\n        private int _nextId = 1;\n\n        public List<FinancialGoal> GetAll()\n        {\n            return _goals.ToList();\n        }\n\n        public FinancialGoal GetById(int id)\n        {\n            return _goals.FirstOrDefault(g => g.Id == id);\n        }\n\n        public FinancialGoal Add(FinancialGoal goal)\n        {\n            goal.Id = _nextId++;\n            _goals.Add(goal);\n            return goal;\n        }\n\n        public FinancialGoal Update(FinancialGoal goal)\n        {\n            var index = _goals.FindIndex(g => g.Id == goal.Id);\n            if (index == -1)\n                return null;\n            _goals[index] = goal;\n            return goal;\n        }\n\n        public void Delete(int id)\n        {\n            var goal = _goals.FirstOrDefault(g => g.Id == id);\n            if (goal != null)\n                _goals.Remove(goal);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "3e0ad33a-233b-4f7e-a6ec-4fe9cce93db2",
        "Name": "Models",
        "ParentId": "6ba9cfb8-ea40-4495-8661-a3b719aad0b9",
        "Type": 0,
        "Items": [
          {
            "Id": "4f932ab1-ed27-40ad-987d-09da4d16d405",
            "Name": "FinancialGoal.cs",
            "ParentId": "3e0ad33a-233b-4f7e-a6ec-4fe9cce93db2",
            "Type": 1,
            "Text": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace FinancialPlanningAssistant.Models\n{\n    public class FinancialGoal\n    {\n        public int Id { get; set; }\n\n        [Required]\n        public string Title { get; set; }\n        \n        public string Description { get; set; }\n        \n        [Range(0, double.MaxValue)]\n        public decimal TargetAmount { get; set; }\n        \n        [Range(0, double.MaxValue)]\n        public decimal CurrentAmount { get; set; }\n        \n        public DateTime TargetDate { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "024d1b1f-fe90-44f4-8d06-c3ac5e6bbdf9",
        "Name": "Utils",
        "ParentId": "6ba9cfb8-ea40-4495-8661-a3b719aad0b9",
        "Type": 0,
        "Items": [
          {
            "Id": "dae5863c-a3b3-4d1f-b82b-4862b42a0efe",
            "Name": "FinancialCalculator.cs",
            "ParentId": "024d1b1f-fe90-44f4-8d06-c3ac5e6bbdf9",
            "Type": 1,
            "Text": "using System;\n\nnamespace FinancialPlanningAssistant.Utils\n{\n    public static class FinancialCalculator\n    {\n        public static decimal CalculateProjectedSavings(decimal periodicContribution, double annualInterestRate, int years)\n        {\n            double r = annualInterestRate / 100.0;\n            int n = years;\n            if (r == 0)\n                return periodicContribution * n;\n            double futureValue = (double)periodicContribution * ((Math.Pow(1 + r, n) - 1) / r);\n            return (decimal)futureValue;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "78d0ea7a-8754-46f7-b8ec-b2a3d9631698",
    "Name": "SavingsGoalTracker",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "67f3ebdf-71fa-4bca-8434-8ec06dabd791",
        "Name": "Program.cs",
        "ParentId": "78d0ea7a-8754-46f7-b8ec-b2a3d9631698",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace SavingsGoalTracker\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "840bf672-6287-49d6-b8aa-9fdc8250d6f6",
        "Name": "Startup.cs",
        "ParentId": "78d0ea7a-8754-46f7-b8ec-b2a3d9631698",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing SavingsGoalTracker.Services;\nusing SavingsGoalTracker.Data;\nusing SavingsGoalTracker.Notifications;\nusing SavingsGoalTracker.Infrastructure;\n\nnamespace SavingsGoalTracker\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<ISavingsGoalService, SavingsGoalService>();\n            services.AddSingleton<ISavingsGoalRepository, SavingsGoalRepository>();\n            services.AddSingleton<INotificationService, NotificationService>();\n            services.AddLogging();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "584d6f8c-4346-4616-8ce1-1a87bce35790",
        "Name": "Controllers",
        "ParentId": "78d0ea7a-8754-46f7-b8ec-b2a3d9631698",
        "Type": 0,
        "Items": [
          {
            "Id": "27f830bb-b097-471e-88c3-7c688e3cbd77",
            "Name": "SavingsGoalController.cs",
            "ParentId": "584d6f8c-4346-4616-8ce1-1a87bce35790",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing SavingsGoalTracker.Models;\nusing SavingsGoalTracker.Services;\n\nnamespace SavingsGoalTracker.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class SavingsGoalController : ControllerBase\n    {\n        private readonly ISavingsGoalService _savingsGoalService;\n\n        public SavingsGoalController(ISavingsGoalService savingsGoalService)\n        {\n            _savingsGoalService = savingsGoalService;\n        }\n\n        [HttpPost(\"create\")]\n        public ActionResult<SavingsGoal> CreateGoal([FromBody] CreateGoalRequest request)\n        {\n            var goal = _savingsGoalService.CreateGoal(request);\n            return Ok(goal);\n        }\n\n        [HttpPost(\"progress\")]\n        public ActionResult<SavingsGoal> UpdateProgress([FromBody] UpdateGoalProgressRequest request)\n        {\n            var goal = _savingsGoalService.UpdateProgress(request);\n            if (goal == null)\n            {\n                return NotFound();\n            }\n            return Ok(goal);\n        }\n\n        [HttpGet(\"{id}\")]\n        public ActionResult<SavingsGoal> GetGoal(Guid id)\n        {\n            var goal = _savingsGoalService.GetGoal(id);\n            if (goal == null)\n            {\n                return NotFound();\n            }\n            return Ok(goal);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "8d691cdf-08fb-44ed-b5ac-9dab4c6c964b",
        "Name": "Services",
        "ParentId": "78d0ea7a-8754-46f7-b8ec-b2a3d9631698",
        "Type": 0,
        "Items": [
          {
            "Id": "78c7fd9e-6b6c-4b7e-a634-19cc75547a5a",
            "Name": "ISavingsGoalService.cs",
            "ParentId": "8d691cdf-08fb-44ed-b5ac-9dab4c6c964b",
            "Type": 1,
            "Text": "using System;\nusing SavingsGoalTracker.Models;\n\nnamespace SavingsGoalTracker.Services\n{\n    public interface ISavingsGoalService\n    {\n        SavingsGoal CreateGoal(CreateGoalRequest request);\n        SavingsGoal UpdateProgress(UpdateGoalProgressRequest request);\n        SavingsGoal GetGoal(Guid id);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "ecbb0033-beb3-40bc-a05f-1831fa012b53",
            "Name": "SavingsGoalService.cs",
            "ParentId": "8d691cdf-08fb-44ed-b5ac-9dab4c6c964b",
            "Type": 1,
            "Text": "using System;\nusing SavingsGoalTracker.Models;\nusing SavingsGoalTracker.Data;\nusing SavingsGoalTracker.Notifications;\nusing Microsoft.Extensions.Logging;\n\nnamespace SavingsGoalTracker.Services\n{\n    public class SavingsGoalService : ISavingsGoalService\n    {\n        private readonly ISavingsGoalRepository _repository;\n        private readonly INotificationService _notificationService;\n        private readonly ILogger<SavingsGoalService> _logger;\n\n        public SavingsGoalService(ISavingsGoalRepository repository, INotificationService notificationService, ILogger<SavingsGoalService> logger)\n        {\n            _repository = repository;\n            _notificationService = notificationService;\n            _logger = logger;\n        }\n\n        public SavingsGoal CreateGoal(CreateGoalRequest request)\n        {\n            var goal = new SavingsGoal\n            {\n                Id = Guid.NewGuid(),\n                Name = request.Name,\n                TargetAmount = request.TargetAmount,\n                CurrentAmount = 0,\n                StartDate = DateTime.UtcNow,\n                EndDate = request.EndDate\n            };\n            \n            _repository.AddGoal(goal);\n            _logger.LogInformation($\"Savings goal created with Id: {goal.Id}\");\n            return goal;\n        }\n\n        public SavingsGoal UpdateProgress(UpdateGoalProgressRequest request)\n        {\n            var goal = _repository.GetGoal(request.GoalId);\n            if (goal == null)\n            {\n                _logger.LogWarning($\"Savings goal with Id {request.GoalId} not found.\");\n                return null;\n            }\n            goal.CurrentAmount += request.Amount;\n            _repository.UpdateGoal(goal);\n            _logger.LogInformation($\"Savings goal with Id: {goal.Id} updated with additional amount: {request.Amount}\");\n\n            if (goal.CurrentAmount >= goal.TargetAmount)\n            {\n                _notificationService.SendNotification(goal, \"Goal Reached\", $\"Congratulations, you have reached your savings goal of {goal.TargetAmount}.\");\n            }\n\n            return goal;\n        }\n\n        public SavingsGoal GetGoal(Guid id)\n        {\n            return _repository.GetGoal(id);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "82597452-070d-4a9f-8d84-45d2e5b4abd7",
        "Name": "Models",
        "ParentId": "78d0ea7a-8754-46f7-b8ec-b2a3d9631698",
        "Type": 0,
        "Items": [
          {
            "Id": "0dfce6d3-d368-4695-8571-6fe3f226bd56",
            "Name": "SavingsGoal.cs",
            "ParentId": "82597452-070d-4a9f-8d84-45d2e5b4abd7",
            "Type": 1,
            "Text": "using System;\n\nnamespace SavingsGoalTracker.Models\n{\n    public class SavingsGoal\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; }\n        public decimal TargetAmount { get; set; }\n        public decimal CurrentAmount { get; set; }\n        public DateTime StartDate { get; set; }\n        public DateTime EndDate { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "1836f3c4-535b-41e2-9166-ec94128689cb",
            "Name": "CreateGoalRequest.cs",
            "ParentId": "82597452-070d-4a9f-8d84-45d2e5b4abd7",
            "Type": 1,
            "Text": "using System;\n\nnamespace SavingsGoalTracker.Models\n{\n    public class CreateGoalRequest\n    {\n        public string Name { get; set; }\n        public decimal TargetAmount { get; set; }\n        public DateTime EndDate { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "6df41cb6-8124-4747-a665-35fd97d41ca1",
            "Name": "UpdateGoalProgressRequest.cs",
            "ParentId": "82597452-070d-4a9f-8d84-45d2e5b4abd7",
            "Type": 1,
            "Text": "using System;\n\nnamespace SavingsGoalTracker.Models\n{\n    public class UpdateGoalProgressRequest\n    {\n        public Guid GoalId { get; set; }\n        public decimal Amount { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "2a1ab375-bf5c-43fc-a3a6-e985ac48b64f",
        "Name": "Data",
        "ParentId": "78d0ea7a-8754-46f7-b8ec-b2a3d9631698",
        "Type": 0,
        "Items": [
          {
            "Id": "119fdf27-f4ef-4bed-b109-9a400aff484e",
            "Name": "ISavingsGoalRepository.cs",
            "ParentId": "2a1ab375-bf5c-43fc-a3a6-e985ac48b64f",
            "Type": 1,
            "Text": "using System;\nusing SavingsGoalTracker.Models;\n\nnamespace SavingsGoalTracker.Data\n{\n    public interface ISavingsGoalRepository\n    {\n        void AddGoal(SavingsGoal goal);\n        void UpdateGoal(SavingsGoal goal);\n        SavingsGoal GetGoal(Guid id);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "7c26d251-e03e-40e1-a9a1-e07f58f1b561",
            "Name": "SavingsGoalRepository.cs",
            "ParentId": "2a1ab375-bf5c-43fc-a3a6-e985ac48b64f",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Concurrent;\nusing SavingsGoalTracker.Models;\n\nnamespace SavingsGoalTracker.Data\n{\n    public class SavingsGoalRepository : ISavingsGoalRepository\n    {\n        private readonly ConcurrentDictionary<Guid, SavingsGoal> _goals = new ConcurrentDictionary<Guid, SavingsGoal>();\n\n        public void AddGoal(SavingsGoal goal)\n        {\n            _goals[goal.Id] = goal;\n        }\n\n        public void UpdateGoal(SavingsGoal goal)\n        {\n            _goals[goal.Id] = goal;\n        }\n\n        public SavingsGoal GetGoal(Guid id)\n        {\n            _goals.TryGetValue(id, out SavingsGoal goal);\n            return goal;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "117ede42-094d-4d88-866e-454c2fd4d0b4",
        "Name": "Infrastructure",
        "ParentId": "78d0ea7a-8754-46f7-b8ec-b2a3d9631698",
        "Type": 0,
        "Items": [
          {
            "Id": "5154a9ed-ef54-4853-8705-295da80b0660",
            "Name": "AuditLogger.cs",
            "ParentId": "117ede42-094d-4d88-866e-454c2fd4d0b4",
            "Type": 1,
            "Text": "using Microsoft.Extensions.Logging;\n\nnamespace SavingsGoalTracker.Infrastructure\n{\n    public interface IAuditLogger\n    {\n        void LogAudit(string message);\n    }\n\n    public class AuditLogger : IAuditLogger\n    {\n        private readonly ILogger<AuditLogger> _logger;\n\n        public AuditLogger(ILogger<AuditLogger> logger)\n        {\n            _logger = logger;\n        }\n\n        public void LogAudit(string message)\n        {\n            _logger.LogInformation($\"Audit: {message}\");\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "7668b86e-61bf-4bd4-9578-4783a4f99df3",
        "Name": "Notifications",
        "ParentId": "78d0ea7a-8754-46f7-b8ec-b2a3d9631698",
        "Type": 0,
        "Items": [
          {
            "Id": "df35e9de-f6f1-412c-b81b-c5b12eebea8b",
            "Name": "INotificationService.cs",
            "ParentId": "7668b86e-61bf-4bd4-9578-4783a4f99df3",
            "Type": 1,
            "Text": "using SavingsGoalTracker.Models;\n\nnamespace SavingsGoalTracker.Notifications\n{\n    public interface INotificationService\n    {\n        void SendNotification(SavingsGoal goal, string subject, string message);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "5fa4db1e-bf25-4bd1-adf9-56cd19af59e3",
            "Name": "NotificationService.cs",
            "ParentId": "7668b86e-61bf-4bd4-9578-4783a4f99df3",
            "Type": 1,
            "Text": "using SavingsGoalTracker.Models;\nusing Microsoft.Extensions.Logging;\n\nnamespace SavingsGoalTracker.Notifications\n{\n    public class NotificationService : INotificationService\n    {\n        private readonly ILogger<NotificationService> _logger;\n\n        public NotificationService(ILogger<NotificationService> logger)\n        {\n            _logger = logger;\n        }\n\n        public void SendNotification(SavingsGoal goal, string subject, string message)\n        {\n            // Integration with real notification channels would be implemented here.\n            _logger.LogInformation($\"Notification sent for Goal {goal.Id}: {subject} - {message}\");\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "cf59f884-d039-4f0b-9bcd-6ef334d97c12",
    "Name": "CreditCardManagementSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "b8e327c8-dedc-4792-9ab8-0638bba46542",
        "Name": "Program.cs",
        "ParentId": "cf59f884-d039-4f0b-9bcd-6ef334d97c12",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace CreditCardManagementSystem\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "d8942792-1872-445c-abbd-c21a3c447a3b",
        "Name": "Startup.cs",
        "ParentId": "cf59f884-d039-4f0b-9bcd-6ef334d97c12",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing CreditCardManagementSystem.Data;\nusing CreditCardManagementSystem.Services;\nusing CreditCardManagementSystem.Infrastructure;\n\nnamespace CreditCardManagementSystem\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            // Configure EF Core with SQL Server\n            services.AddDbContext<ApplicationDbContext>(options =>\n                options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));\n            services.AddScoped<ICreditCardRepository, CreditCardRepository>();\n            services.AddScoped<ICreditCardService, CreditCardService>();\n            services.AddScoped<IPaymentService, PaymentService>();\n            services.AddHttpClient<IPaymentGatewayAdapter, PaymentGatewayAdapter>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "f4650fc5-2b11-4398-b94f-9c54bc3bb679",
        "Name": "Controllers",
        "ParentId": "cf59f884-d039-4f0b-9bcd-6ef334d97c12",
        "Type": 0,
        "Items": [
          {
            "Id": "0bd962f6-7bde-45fb-bb3b-cd8b0fce0880",
            "Name": "CreditCardController.cs",
            "ParentId": "f4650fc5-2b11-4398-b94f-9c54bc3bb679",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing CreditCardManagementSystem.Services;\nusing CreditCardManagementSystem.Models;\n\nnamespace CreditCardManagementSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class CreditCardController : ControllerBase\n    {\n        private readonly ICreditCardService _creditCardService;\n        private readonly IPaymentService _paymentService;\n\n        public CreditCardController(ICreditCardService creditCardService, IPaymentService paymentService)\n        {\n            _creditCardService = creditCardService;\n            _paymentService = paymentService;\n        }\n\n        [HttpPost(\"issue\")]\n        public async Task<IActionResult> IssueCreditCard([FromBody] CreditCard creditCard)\n        {\n            var issuedCard = await _creditCardService.IssueCreditCardAsync(creditCard);\n            return Ok(issuedCard);\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetCreditCard(Guid id)\n        {\n            var card = await _creditCardService.GetCreditCardAsync(id);\n            if (card == null)\n                return NotFound();\n            return Ok(card);\n        }\n\n        [HttpPost(\"payment\")]\n        public async Task<IActionResult> ProcessPayment([FromBody] PaymentRequest request)\n        {\n            var paymentResult = await _paymentService.ProcessPaymentAsync(request);\n            return Ok(paymentResult);\n        }\n\n        [HttpGet(\"billing/{cardId}\")]\n        public async Task<IActionResult> GenerateBillingStatement(Guid cardId)\n        {\n            var billingStatement = await _creditCardService.GenerateBillingStatementAsync(cardId);\n            if (billingStatement == null)\n                return NotFound();\n            return Ok(billingStatement);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "3542100e-e738-41a9-b25f-e1f3c0c586e8",
        "Name": "Services",
        "ParentId": "cf59f884-d039-4f0b-9bcd-6ef334d97c12",
        "Type": 0,
        "Items": [
          {
            "Id": "cfa49a51-0358-4303-95eb-381cea58e8d9",
            "Name": "ICreditCardService.cs",
            "ParentId": "3542100e-e738-41a9-b25f-e1f3c0c586e8",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing CreditCardManagementSystem.Models;\n\nnamespace CreditCardManagementSystem.Services\n{\n    public interface ICreditCardService\n    {\n        Task<CreditCard> IssueCreditCardAsync(CreditCard creditCard);\n        Task<CreditCard> GetCreditCardAsync(Guid id);\n        Task<BillingStatement> GenerateBillingStatementAsync(Guid cardId);\n        Task UpdateCreditCardAsync(CreditCard creditCard);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "a89e12eb-104f-413c-aa6e-7ed9dee466b8",
            "Name": "CreditCardService.cs",
            "ParentId": "3542100e-e738-41a9-b25f-e1f3c0c586e8",
            "Type": 1,
            "Text": "using CreditCardManagementSystem.Data;\nusing CreditCardManagementSystem.Models;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace CreditCardManagementSystem.Services\n{\n    public class CreditCardService : ICreditCardService\n    {\n        private readonly ICreditCardRepository _repository;\n\n        public CreditCardService(ICreditCardRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public async Task<CreditCard> IssueCreditCardAsync(CreditCard creditCard)\n        {\n            // Generate a new ID and card number, then initialize balance\n            creditCard.Id = Guid.NewGuid();\n            creditCard.CardNumber = GenerateCardNumber();\n            creditCard.Balance = 0m;\n            await _repository.AddCreditCardAsync(creditCard);\n            return creditCard;\n        }\n\n        public async Task<CreditCard> GetCreditCardAsync(Guid id)\n        {\n            return await _repository.GetCreditCardByIdAsync(id);\n        }\n\n        public async Task<BillingStatement> GenerateBillingStatementAsync(Guid cardId)\n        {\n            var card = await _repository.GetCreditCardByIdAsync(cardId);\n            if (card == null)\n                return null;\n\n            // Calculate billing statement details\n            var statement = new BillingStatement\n            {\n                Id = Guid.NewGuid(),\n                CreditCardId = card.Id,\n                StatementDate = DateTime.UtcNow,\n                DueDate = DateTime.UtcNow.AddDays(20),\n                TotalDue = card.Balance,\n                MinimumPayment = card.Balance * 0.1m\n            };\n\n            return statement;\n        }\n\n        public async Task UpdateCreditCardAsync(CreditCard creditCard)\n        {\n            await _repository.UpdateCreditCardAsync(creditCard);\n        }\n\n        private string GenerateCardNumber()\n        {\n            // Basic card number generation with a fixed prefix and random digits\n            Random rnd = new Random();\n            string number = \"4000\"; // Example Visa prefix\n            for (int i = 0; i < 12; i++)\n            {\n                number += rnd.Next(0, 10).ToString();\n            }\n            return number;\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "53323f02-b815-42d3-acc0-c3f1761a8374",
            "Name": "IPaymentService.cs",
            "ParentId": "3542100e-e738-41a9-b25f-e1f3c0c586e8",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing CreditCardManagementSystem.Models;\n\nnamespace CreditCardManagementSystem.Services\n{\n    public interface IPaymentService\n    {\n        Task<PaymentResult> ProcessPaymentAsync(PaymentRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "3b1bc446-ea6f-42fb-8afa-dc3b1ec56af9",
            "Name": "PaymentService.cs",
            "ParentId": "3542100e-e738-41a9-b25f-e1f3c0c586e8",
            "Type": 1,
            "Text": "using CreditCardManagementSystem.Models;\nusing CreditCardManagementSystem.Infrastructure;\nusing System.Threading.Tasks;\n\nnamespace CreditCardManagementSystem.Services\n{\n    public class PaymentService : IPaymentService\n    {\n        private readonly IPaymentGatewayAdapter _paymentGatewayAdapter;\n        private readonly ICreditCardService _creditCardService;\n\n        public PaymentService(IPaymentGatewayAdapter paymentGatewayAdapter, ICreditCardService creditCardService)\n        {\n            _paymentGatewayAdapter = paymentGatewayAdapter;\n            _creditCardService = creditCardService;\n        }\n\n        public async Task<PaymentResult> ProcessPaymentAsync(PaymentRequest request)\n        {\n            var card = await _creditCardService.GetCreditCardAsync(request.CreditCardId);\n            if (card == null)\n            {\n                return new PaymentResult { IsSuccess = false, Message = \"Credit card not found.\" };\n            }\n\n            // Process payment through the external payment gateway\n            var result = await _paymentGatewayAdapter.ProcessPaymentAsync(request);\n            if (result.IsSuccess)\n            {\n                // Deduct the payment amount from the card balance\n                card.Balance -= request.Amount;\n                await _creditCardService.UpdateCreditCardAsync(card);\n            }\n            return result;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "ba9043f1-ec88-41b3-89e8-22c9b6ce3a53",
        "Name": "Models",
        "ParentId": "cf59f884-d039-4f0b-9bcd-6ef334d97c12",
        "Type": 0,
        "Items": [
          {
            "Id": "09d2fba1-b67c-4718-a31a-1fc080ccd25a",
            "Name": "CreditCard.cs",
            "ParentId": "ba9043f1-ec88-41b3-89e8-22c9b6ce3a53",
            "Type": 1,
            "Text": "using System;\n\nnamespace CreditCardManagementSystem.Models\n{\n    public class CreditCard\n    {\n        public Guid Id { get; set; }\n        public string CardNumber { get; set; }\n        public string CardHolderName { get; set; }\n        public DateTime ExpiryDate { get; set; }\n        public decimal CreditLimit { get; set; }\n        public decimal Balance { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "03fab9f0-0fd3-4e1e-b534-bb835f7ac3af",
            "Name": "BillingStatement.cs",
            "ParentId": "ba9043f1-ec88-41b3-89e8-22c9b6ce3a53",
            "Type": 1,
            "Text": "using System;\n\nnamespace CreditCardManagementSystem.Models\n{\n    public class BillingStatement\n    {\n        public Guid Id { get; set; }\n        public Guid CreditCardId { get; set; }\n        public DateTime StatementDate { get; set; }\n        public DateTime DueDate { get; set; }\n        public decimal TotalDue { get; set; }\n        public decimal MinimumPayment { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "3039f2e9-3ea3-4889-b497-61d1be87f225",
            "Name": "PaymentRequest.cs",
            "ParentId": "ba9043f1-ec88-41b3-89e8-22c9b6ce3a53",
            "Type": 1,
            "Text": "using System;\n\nnamespace CreditCardManagementSystem.Models\n{\n    public class PaymentRequest\n    {\n        public Guid CreditCardId { get; set; }\n        public decimal Amount { get; set; }\n        public DateTime PaymentDate { get; set; }\n        public string PaymentMethod { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "8597d7db-8717-4d7f-a818-91ea9e54fd17",
            "Name": "PaymentResult.cs",
            "ParentId": "ba9043f1-ec88-41b3-89e8-22c9b6ce3a53",
            "Type": 1,
            "Text": "namespace CreditCardManagementSystem.Models\n{\n    public class PaymentResult\n    {\n        public bool IsSuccess { get; set; }\n        public string TransactionId { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "5656b50f-c3a9-4dac-89a8-fdb6024c27fe",
        "Name": "Data",
        "ParentId": "cf59f884-d039-4f0b-9bcd-6ef334d97c12",
        "Type": 0,
        "Items": [
          {
            "Id": "67e64822-4817-49f8-a3bc-a8a6107acd00",
            "Name": "ApplicationDbContext.cs",
            "ParentId": "5656b50f-c3a9-4dac-89a8-fdb6024c27fe",
            "Type": 1,
            "Text": "using CreditCardManagementSystem.Models;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace CreditCardManagementSystem.Data\n{\n    public class ApplicationDbContext : DbContext\n    {\n        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)\n            : base(options)\n        {\n        }\n\n        public DbSet<CreditCard> CreditCards { get; set; }\n        public DbSet<BillingStatement> BillingStatements { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "00a7a797-3e1f-4110-a127-24394e756d91",
            "Name": "ICreditCardRepository.cs",
            "ParentId": "5656b50f-c3a9-4dac-89a8-fdb6024c27fe",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing CreditCardManagementSystem.Models;\n\nnamespace CreditCardManagementSystem.Data\n{\n    public interface ICreditCardRepository\n    {\n        Task AddCreditCardAsync(CreditCard card);\n        Task<CreditCard> GetCreditCardByIdAsync(Guid id);\n        Task UpdateCreditCardAsync(CreditCard card);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "b2cd5409-89ce-4f59-b13a-b7c70bf493a9",
            "Name": "CreditCardRepository.cs",
            "ParentId": "5656b50f-c3a9-4dac-89a8-fdb6024c27fe",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing CreditCardManagementSystem.Models;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace CreditCardManagementSystem.Data\n{\n    public class CreditCardRepository : ICreditCardRepository\n    {\n        private readonly ApplicationDbContext _context;\n\n        public CreditCardRepository(ApplicationDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task AddCreditCardAsync(CreditCard card)\n        {\n            _context.CreditCards.Add(card);\n            await _context.SaveChangesAsync();\n        }\n\n        public async Task<CreditCard> GetCreditCardByIdAsync(Guid id)\n        {\n            return await _context.CreditCards.FirstOrDefaultAsync(c => c.Id == id);\n        }\n\n        public async Task UpdateCreditCardAsync(CreditCard card)\n        {\n            _context.CreditCards.Update(card);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "78ab5272-db91-4368-8196-74b86de9b725",
        "Name": "Infrastructure",
        "ParentId": "cf59f884-d039-4f0b-9bcd-6ef334d97c12",
        "Type": 0,
        "Items": [
          {
            "Id": "cfc616f3-3a47-4a18-accd-013f8fd60dd1",
            "Name": "IPaymentGatewayAdapter.cs",
            "ParentId": "78ab5272-db91-4368-8196-74b86de9b725",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing CreditCardManagementSystem.Models;\n\nnamespace CreditCardManagementSystem.Infrastructure\n{\n    public interface IPaymentGatewayAdapter\n    {\n        Task<PaymentResult> ProcessPaymentAsync(PaymentRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "43f24ce4-15c1-421f-80fe-efee5cc5756a",
            "Name": "PaymentGatewayAdapter.cs",
            "ParentId": "78ab5272-db91-4368-8196-74b86de9b725",
            "Type": 1,
            "Text": "using CreditCardManagementSystem.Models;\nusing System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace CreditCardManagementSystem.Infrastructure\n{\n    public class PaymentGatewayAdapter : IPaymentGatewayAdapter\n    {\n        private readonly HttpClient _httpClient;\n\n        public PaymentGatewayAdapter(HttpClient httpClient)\n        {\n            _httpClient = httpClient;\n        }\n\n        public async Task<PaymentResult> ProcessPaymentAsync(PaymentRequest request)\n        {\n            var payload = JsonSerializer.Serialize(request);\n            var content = new StringContent(payload, Encoding.UTF8, \"application/json\");\n            var response = await _httpClient.PostAsync(\"https://api.paymentgateway.com/process\", content);\n            if (response.IsSuccessStatusCode)\n            {\n                var responseBody = await response.Content.ReadAsStringAsync();\n                var result = JsonSerializer.Deserialize<PaymentResult>(responseBody, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n                return result;\n            }\n            else\n            {\n                return new PaymentResult\n                {\n                    IsSuccess = false,\n                    TransactionId = null,\n                    Message = $\"Payment gateway error: {response.ReasonPhrase}\"\n                };\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "5bd54d61-4eb0-4f92-819c-b032aa11ad86",
    "Name": "DebitCardManagementSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "a850e7f3-1c0a-4f81-9975-2dcc9b00bdb4",
        "Name": "Program.cs",
        "ParentId": "5bd54d61-4eb0-4f92-819c-b032aa11ad86",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing DebitCardManagementSystem.Services;\nusing DebitCardManagementSystem.Data;\nusing DebitCardManagementSystem.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IDebitCardService, DebitCardService>();\nbuilder.Services.AddSingleton<IDebitCardRepository, DebitCardRepository>();\nbuilder.Services.AddSingleton<IDebitCardLogger, DebitCardLogger>();\nbuilder.Services.AddLogging();\n\nvar app = builder.Build();\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "f979e135-302d-4c0f-bd71-45eb58a18c50",
        "Name": "Controllers",
        "ParentId": "5bd54d61-4eb0-4f92-819c-b032aa11ad86",
        "Type": 0,
        "Items": [
          {
            "Id": "69ca8067-ad9e-49b6-8ddc-f24b4fd64c79",
            "Name": "DebitCardController.cs",
            "ParentId": "f979e135-302d-4c0f-bd71-45eb58a18c50",
            "Type": 1,
            "Text": "using DebitCardManagementSystem.Models;\nusing DebitCardManagementSystem.Services;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace DebitCardManagementSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class DebitCardController : ControllerBase\n    {\n        private readonly IDebitCardService _service;\n\n        public DebitCardController(IDebitCardService service)\n        {\n            _service = service;\n        }\n\n        [HttpPost(\"activate\")]\n        public IActionResult ActivateCard([FromBody] ActivateCardRequest request)\n        {\n            try\n            {\n                var card = _service.ActivateCard(request);\n                return Ok(card);\n            }\n            catch (System.Exception ex)\n            {\n                return BadRequest(ex.Message);\n            }\n        }\n\n        [HttpPost(\"transaction\")]\n        public IActionResult ProcessTransaction([FromBody] TransactionRequest request)\n        {\n            var response = _service.ProcessTransaction(request);\n            if (!response.Success)\n            {\n                return BadRequest(response);\n            }\n            return Ok(response);\n        }\n\n        [HttpGet(\"{cardId}\")]\n        public IActionResult GetCardDetails(string cardId)\n        {\n            var card = _service.GetCardDetails(cardId);\n            if (card == null)\n            {\n                return NotFound();\n            }\n            return Ok(card);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "57ae1e77-07ff-4e1a-8cd2-196b3fa40264",
        "Name": "Services",
        "ParentId": "5bd54d61-4eb0-4f92-819c-b032aa11ad86",
        "Type": 0,
        "Items": [
          {
            "Id": "5bd3b6fa-5f3e-4674-9dca-36a2ec94bf52",
            "Name": "IDebitCardService.cs",
            "ParentId": "57ae1e77-07ff-4e1a-8cd2-196b3fa40264",
            "Type": 1,
            "Text": "using DebitCardManagementSystem.Models;\n\nnamespace DebitCardManagementSystem.Services\n{\n    public interface IDebitCardService\n    {\n        DebitCard ActivateCard(ActivateCardRequest request);\n        TransactionResponse ProcessTransaction(TransactionRequest request);\n        DebitCard GetCardDetails(string cardId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "07b9f994-7c73-4939-adde-6e02ad5df0af",
            "Name": "DebitCardService.cs",
            "ParentId": "57ae1e77-07ff-4e1a-8cd2-196b3fa40264",
            "Type": 1,
            "Text": "using System;\nusing DebitCardManagementSystem.Models;\nusing DebitCardManagementSystem.Data;\nusing DebitCardManagementSystem.Infrastructure;\n\nnamespace DebitCardManagementSystem.Services\n{\n    public class DebitCardService : IDebitCardService\n    {\n        private readonly IDebitCardRepository _repository;\n        private readonly IDebitCardLogger _logger;\n\n        public DebitCardService(IDebitCardRepository repository, IDebitCardLogger logger)\n        {\n            _repository = repository;\n            _logger = logger;\n        }\n\n        public DebitCard ActivateCard(ActivateCardRequest request)\n        {\n            try\n            {\n                // Ensure card does not already exist\n                var existing = _repository.GetDebitCardById(request.CardId);\n                if (existing != null)\n                {\n                    throw new Exception(\"Debit card already exists.\");\n                }\n\n                var debitCard = new DebitCard\n                {\n                    CardId = string.IsNullOrEmpty(request.CardId) ? Guid.NewGuid().ToString() : request.CardId,\n                    CardNumber = request.CardNumber,\n                    HolderName = request.HolderName,\n                    ExpiryDate = request.ExpiryDate,\n                    Balance = 0m,\n                    Status = CardStatus.Active\n                };\n\n                _repository.AddDebitCard(debitCard);\n                _logger.LogInfo($\"Debit card activated: {debitCard.CardId}\");\n                return debitCard;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"Error activating debit card.\", ex);\n                throw;\n            }\n        }\n\n        public TransactionResponse ProcessTransaction(TransactionRequest request)\n        {\n            try\n            {\n                var card = _repository.GetDebitCardById(request.CardId);\n                if (card == null)\n                {\n                    return new TransactionResponse\n                    {\n                        Success = false,\n                        Message = \"Debit card not found.\",\n                        NewBalance = 0m\n                    };\n                }\n\n                if (card.Status != CardStatus.Active)\n                {\n                    return new TransactionResponse\n                    {\n                        Success = false,\n                        Message = \"Debit card is not active.\",\n                        NewBalance = card.Balance\n                    };\n                }\n\n                // If amount is negative, it's a debit (withdrawal) operation\n                if (request.Amount < 0)\n                {\n                    var debitAmount = Math.Abs(request.Amount);\n                    if (card.Balance < debitAmount)\n                    {\n                        return new TransactionResponse\n                        {\n                            Success = false,\n                            Message = \"Insufficient funds.\",\n                            NewBalance = card.Balance\n                        };\n                    }\n                    card.Balance -= debitAmount;\n                    _logger.LogInfo($\"Processed debit of {debitAmount} on card {card.CardId}\");\n                }\n                else\n                {\n                    card.Balance += request.Amount;\n                    _logger.LogInfo($\"Processed credit of {request.Amount} on card {card.CardId}\");\n                }\n\n                _repository.UpdateDebitCard(card);\n\n                return new TransactionResponse\n                {\n                    Success = true,\n                    Message = request.Amount < 0 ? \"Debit transaction successful.\" : \"Credit transaction successful.\",\n                    NewBalance = card.Balance\n                };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"Error processing transaction.\", ex);\n                return new TransactionResponse\n                {\n                    Success = false,\n                    Message = \"An error occurred during transaction processing.\",\n                    NewBalance = 0m\n                };\n            }\n        }\n\n        public DebitCard GetCardDetails(string cardId)\n        {\n            return _repository.GetDebitCardById(cardId);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "97176bd1-6b19-442b-a7c2-13aee2480d1f",
        "Name": "Models",
        "ParentId": "5bd54d61-4eb0-4f92-819c-b032aa11ad86",
        "Type": 0,
        "Items": [
          {
            "Id": "eca9a488-ea49-4569-8902-b859a0ab9f3d",
            "Name": "DebitCard.cs",
            "ParentId": "97176bd1-6b19-442b-a7c2-13aee2480d1f",
            "Type": 1,
            "Text": "using System;\n\nnamespace DebitCardManagementSystem.Models\n{\n    public class DebitCard\n    {\n        public string CardId { get; set; }\n        public string CardNumber { get; set; }\n        public string HolderName { get; set; }\n        public DateTime ExpiryDate { get; set; }\n        public decimal Balance { get; set; }\n        public CardStatus Status { get; set; }\n    }\n\n    public enum CardStatus\n    {\n        Inactive,\n        Active,\n        Suspended,\n        Closed\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "cd30ec05-dc34-4b2f-a852-472d6b23afe1",
            "Name": "DebitCardTransaction.cs",
            "ParentId": "97176bd1-6b19-442b-a7c2-13aee2480d1f",
            "Type": 1,
            "Text": "using System;\n\nnamespace DebitCardManagementSystem.Models\n{\n    public class DebitCardTransaction\n    {\n        public string TransactionId { get; set; } = Guid.NewGuid().ToString();\n        public string CardId { get; set; }\n        public decimal Amount { get; set; }\n        public DateTime TransactionDate { get; set; } = DateTime.UtcNow;\n        public TransactionType Type { get; set; }\n    }\n\n    public enum TransactionType\n    {\n        Debit,\n        Credit\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "6d3c77cf-fa58-4d28-8683-ea889dfc0cba",
            "Name": "ActivateCardRequest.cs",
            "ParentId": "97176bd1-6b19-442b-a7c2-13aee2480d1f",
            "Type": 1,
            "Text": "using System;\n\nnamespace DebitCardManagementSystem.Models\n{\n    public class ActivateCardRequest\n    {\n        public string CardId { get; set; }\n        public string CardNumber { get; set; }\n        public string HolderName { get; set; }\n        public DateTime ExpiryDate { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "bd1f3bb8-55ef-47c3-b74b-355aae543b31",
            "Name": "TransactionRequest.cs",
            "ParentId": "97176bd1-6b19-442b-a7c2-13aee2480d1f",
            "Type": 1,
            "Text": "namespace DebitCardManagementSystem.Models\n{\n    public class TransactionRequest\n    {\n        public string CardId { get; set; }\n        public decimal Amount { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "26fd0f23-2438-413f-8f2e-39214f589918",
            "Name": "TransactionResponse.cs",
            "ParentId": "97176bd1-6b19-442b-a7c2-13aee2480d1f",
            "Type": 1,
            "Text": "namespace DebitCardManagementSystem.Models\n{\n    public class TransactionResponse\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n        public decimal NewBalance { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "31c222b6-eff8-44df-be67-3c001d8d331b",
        "Name": "Data",
        "ParentId": "5bd54d61-4eb0-4f92-819c-b032aa11ad86",
        "Type": 0,
        "Items": [
          {
            "Id": "43abe434-3f20-4f39-8cc9-282145ec347c",
            "Name": "IDebitCardRepository.cs",
            "ParentId": "31c222b6-eff8-44df-be67-3c001d8d331b",
            "Type": 1,
            "Text": "using DebitCardManagementSystem.Models;\n\nnamespace DebitCardManagementSystem.Data\n{\n    public interface IDebitCardRepository\n    {\n        DebitCard GetDebitCardById(string cardId);\n        void AddDebitCard(DebitCard card);\n        void UpdateDebitCard(DebitCard card);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "33145bc5-6e98-4f6d-b277-2ce3d61db5c1",
            "Name": "DebitCardRepository.cs",
            "ParentId": "31c222b6-eff8-44df-be67-3c001d8d331b",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing DebitCardManagementSystem.Models;\n\nnamespace DebitCardManagementSystem.Data\n{\n    public class DebitCardRepository : IDebitCardRepository\n    {\n        private readonly ConcurrentDictionary<string, DebitCard> _cards = new ConcurrentDictionary<string, DebitCard>();\n\n        public DebitCard GetDebitCardById(string cardId)\n        {\n            _cards.TryGetValue(cardId, out DebitCard card);\n            return card;\n        }\n\n        public void AddDebitCard(DebitCard card)\n        {\n            _cards[card.CardId] = card;\n        }\n\n        public void UpdateDebitCard(DebitCard card)\n        {\n            _cards[card.CardId] = card;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "42eadfbf-01fa-40a0-a8cf-2d62b0e9d5c0",
        "Name": "Infrastructure",
        "ParentId": "5bd54d61-4eb0-4f92-819c-b032aa11ad86",
        "Type": 0,
        "Items": [
          {
            "Id": "d30eef51-4439-454c-9623-da07ca201ba3",
            "Name": "IDebitCardLogger.cs",
            "ParentId": "42eadfbf-01fa-40a0-a8cf-2d62b0e9d5c0",
            "Type": 1,
            "Text": "using System;\n\nnamespace DebitCardManagementSystem.Infrastructure\n{\n    public interface IDebitCardLogger\n    {\n        void LogInfo(string message);\n        void LogError(string message, Exception ex);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "b716805e-94ef-46c2-823e-30b1a730f93e",
            "Name": "DebitCardLogger.cs",
            "ParentId": "42eadfbf-01fa-40a0-a8cf-2d62b0e9d5c0",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace DebitCardManagementSystem.Infrastructure\n{\n    public class DebitCardLogger : IDebitCardLogger\n    {\n        private readonly ILogger<DebitCardLogger> _logger;\n\n        public DebitCardLogger(ILogger<DebitCardLogger> logger)\n        {\n            _logger = logger;\n        }\n\n        public void LogInfo(string message)\n        {\n            _logger.LogInformation(message);\n        }\n\n        public void LogError(string message, Exception ex)\n        {\n            _logger.LogError(ex, message);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "c1d60bb0-2a5e-4144-9ede-9815a8a3e9dd",
    "Name": "CardIssuanceService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "edb41924-0657-4ecf-9f51-9cdd797e0ee9",
        "Name": "Program.cs",
        "ParentId": "c1d60bb0-2a5e-4144-9ede-9815a8a3e9dd",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing CardIssuanceService.Services;\nusing CardIssuanceService.Data;\nusing CardIssuanceService.Infrastructure;\n\nnamespace CardIssuanceService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = WebApplication.CreateBuilder(args);\n            \n            // Register services\n            builder.Services.AddControllers();\n            builder.Services.AddSingleton<ICardService, CardService>();\n            builder.Services.AddSingleton<ICardRepository, CardRepository>();\n            builder.Services.AddSingleton<ICardIntegrationAdapter, CardIntegrationAdapter>();\n            builder.Services.AddHttpClient();\n            builder.Services.AddLogging();\n            \n            var app = builder.Build();\n\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n\n            app.Run();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "73418132-e1ce-459c-b810-7443ee400337",
        "Name": "Controllers",
        "ParentId": "c1d60bb0-2a5e-4144-9ede-9815a8a3e9dd",
        "Type": 0,
        "Items": [
          {
            "Id": "6b56695f-521c-4307-b365-76a27270885c",
            "Name": "CardController.cs",
            "ParentId": "73418132-e1ce-459c-b810-7443ee400337",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing CardIssuanceService.Models;\nusing CardIssuanceService.Services;\n\nnamespace CardIssuanceService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class CardController : ControllerBase\n    {\n        private readonly ICardService _cardService;\n\n        public CardController(ICardService cardService)\n        {\n            _cardService = cardService;\n        }\n\n        [HttpPost(\"issue\")]\n        public async Task<IActionResult> IssueCard([FromBody] CardRequest request)\n        {\n            try\n            {\n                var response = await _cardService.IssueCardAsync(request);\n                return Ok(response);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { Success = false, Message = ex.Message });\n            }\n        }\n\n        [HttpPost(\"activate\")]\n        public async Task<IActionResult> ActivateCard([FromBody] ActivationRequest request)\n        {\n            try\n            {\n                var response = await _cardService.ActivateCardAsync(request);\n                return Ok(response);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { Success = false, Message = ex.Message });\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "27b0a031-ff88-403c-bd9f-4975b90d0e1a",
        "Name": "Services",
        "ParentId": "c1d60bb0-2a5e-4144-9ede-9815a8a3e9dd",
        "Type": 0,
        "Items": [
          {
            "Id": "6db9fc7e-ec35-49c4-a00c-805128dd55d3",
            "Name": "ICardService.cs",
            "ParentId": "27b0a031-ff88-403c-bd9f-4975b90d0e1a",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing CardIssuanceService.Models;\n\nnamespace CardIssuanceService.Services\n{\n    public interface ICardService\n    {\n        Task<CardResponse> IssueCardAsync(CardRequest request);\n        Task<CardResponse> ActivateCardAsync(ActivationRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "0547c265-fd79-4f5a-9b8f-83303fc912e1",
            "Name": "CardService.cs",
            "ParentId": "27b0a031-ff88-403c-bd9f-4975b90d0e1a",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing CardIssuanceService.Models;\nusing CardIssuanceService.Data;\nusing CardIssuanceService.Infrastructure;\nusing CardIssuanceService.Utils;\n\nnamespace CardIssuanceService.Services\n{\n    public class CardService : ICardService\n    {\n        private readonly ICardRepository _repository;\n        private readonly ICardIntegrationAdapter _integrationAdapter;\n\n        public CardService(ICardRepository repository, ICardIntegrationAdapter integrationAdapter)\n        {\n            _repository = repository;\n            _integrationAdapter = integrationAdapter;\n        }\n\n        public async Task<CardResponse> IssueCardAsync(CardRequest request)\n        {\n            // Validate request\n            CardValidator.ValidateIssue(request);\n\n            // Generate a new card\n            var card = new Card\n            {\n                CardId = Guid.NewGuid(),\n                CustomerId = request.CustomerId,\n                CardNumber = GenerateCardNumber(),\n                Status = \"Issued\"\n            };\n\n            // Process issuance via external integration\n            var processedCard = await _integrationAdapter.ProcessCardIssuanceAsync(card);\n            \n            // Save card to repository\n            await _repository.SaveCardAsync(processedCard);\n\n            return new CardResponse\n            {\n                Success = true,\n                Message = \"Card issued successfully\",\n                Card = processedCard\n            };\n        }\n\n        public async Task<CardResponse> ActivateCardAsync(ActivationRequest request)\n        {\n            // Validate activation request\n            CardValidator.ValidateActivation(request);\n\n            var card = await _repository.GetCardAsync(request.CardId);\n            if (card == null)\n            {\n                throw new Exception(\"Card not found\");\n            }\n            \n            if (!string.Equals(request.ActivationCode, \"ACTIVATE123\", StringComparison.Ordinal))\n            {\n                // In a real-world scenario, validate with a secure mechanism\n                throw new Exception(\"Invalid activation code\");\n            }\n\n            // Process activation via external integration\n            var activatedCard = await _integrationAdapter.ProcessCardActivationAsync(card);\n            \n            // Update card status\n            activatedCard.Status = \"Active\";\n            await _repository.SaveCardAsync(activatedCard);\n\n            return new CardResponse\n            {\n                Success = true,\n                Message = \"Card activated successfully\",\n                Card = activatedCard\n            };\n        }\n\n        private string GenerateCardNumber()\n        {\n            // Generate a 16-digit card number starting with a common BIN e.g., 4000\n            var random = new Random();\n            return \"4000\" + random.Next(100000000, 999999999).ToString(\"D10\");\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "e36b33c7-5b50-47ef-91df-a656d80cbcec",
        "Name": "Models",
        "ParentId": "c1d60bb0-2a5e-4144-9ede-9815a8a3e9dd",
        "Type": 0,
        "Items": [
          {
            "Id": "1fea766a-6451-4a39-bd0c-dfa3b754bac9",
            "Name": "Card.cs",
            "ParentId": "e36b33c7-5b50-47ef-91df-a656d80cbcec",
            "Type": 1,
            "Text": "using System;\n\nnamespace CardIssuanceService.Models\n{\n    public class Card\n    {\n        public Guid CardId { get; set; }\n        public string CardNumber { get; set; }\n        public string CustomerId { get; set; }\n        public string Status { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "d0a48e03-b987-4c36-af7a-7107b2914a92",
            "Name": "CardRequest.cs",
            "ParentId": "e36b33c7-5b50-47ef-91df-a656d80cbcec",
            "Type": 1,
            "Text": "namespace CardIssuanceService.Models\n{\n    public class CardRequest\n    {\n        public string CustomerId { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "32b545c3-cc39-48d4-8d86-eb939225141d",
            "Name": "CardResponse.cs",
            "ParentId": "e36b33c7-5b50-47ef-91df-a656d80cbcec",
            "Type": 1,
            "Text": "namespace CardIssuanceService.Models\n{\n    public class CardResponse\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n        public Card Card { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "6386bbdc-3ef6-4b0a-be7b-baf3fa1f02eb",
            "Name": "ActivationRequest.cs",
            "ParentId": "e36b33c7-5b50-47ef-91df-a656d80cbcec",
            "Type": 1,
            "Text": "using System;\n\nnamespace CardIssuanceService.Models\n{\n    public class ActivationRequest\n    {\n        public System.Guid CardId { get; set; }\n        public string ActivationCode { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "83044dc3-115b-4ab8-a921-59e6f9d67798",
        "Name": "Data",
        "ParentId": "c1d60bb0-2a5e-4144-9ede-9815a8a3e9dd",
        "Type": 0,
        "Items": [
          {
            "Id": "6322abe8-826b-42ed-8c2e-46ee8f13d3e7",
            "Name": "ICardRepository.cs",
            "ParentId": "83044dc3-115b-4ab8-a921-59e6f9d67798",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing CardIssuanceService.Models;\n\nnamespace CardIssuanceService.Data\n{\n    public interface ICardRepository\n    {\n        Task SaveCardAsync(Card card);\n        Task<Card> GetCardAsync(Guid cardId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "cace82e3-2600-463b-8fe1-c8e0bc32aeb6",
            "Name": "CardRepository.cs",
            "ParentId": "83044dc3-115b-4ab8-a921-59e6f9d67798",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Concurrent;\nusing System.Threading.Tasks;\nusing CardIssuanceService.Models;\n\nnamespace CardIssuanceService.Data\n{\n    public class CardRepository : ICardRepository\n    {\n        private readonly ConcurrentDictionary<Guid, Card> _store = new ConcurrentDictionary<Guid, Card>();\n\n        public Task SaveCardAsync(Card card)\n        {\n            _store[card.CardId] = card;\n            return Task.CompletedTask;\n        }\n\n        public Task<Card> GetCardAsync(Guid cardId)\n        {\n            _store.TryGetValue(cardId, out var card);\n            return Task.FromResult(card);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "5adb3a0b-d697-4f36-b669-e171c0b475bf",
        "Name": "Infrastructure",
        "ParentId": "c1d60bb0-2a5e-4144-9ede-9815a8a3e9dd",
        "Type": 0,
        "Items": [
          {
            "Id": "83e8f756-577e-42c6-9d4d-b8b8a15e99a0",
            "Name": "ICardIntegrationAdapter.cs",
            "ParentId": "5adb3a0b-d697-4f36-b669-e171c0b475bf",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing CardIssuanceService.Models;\n\nnamespace CardIssuanceService.Infrastructure\n{\n    public interface ICardIntegrationAdapter\n    {\n        Task<Card> ProcessCardIssuanceAsync(Card card);\n        Task<Card> ProcessCardActivationAsync(Card card);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "cc8bfaed-4bcf-4056-a526-c4d658950e28",
            "Name": "CardIntegrationAdapter.cs",
            "ParentId": "5adb3a0b-d697-4f36-b669-e171c0b475bf",
            "Type": 1,
            "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing CardIssuanceService.Models;\n\nnamespace CardIssuanceService.Infrastructure\n{\n    public class CardIntegrationAdapter : ICardIntegrationAdapter\n    {\n        private readonly IHttpClientFactory _httpClientFactory;\n\n        public CardIntegrationAdapter(IHttpClientFactory httpClientFactory)\n        {\n            _httpClientFactory = httpClientFactory;\n        }\n\n        public async Task<Card> ProcessCardIssuanceAsync(Card card)\n        {\n            var client = _httpClientFactory.CreateClient();\n            var endpoint = \"https://api.cardissuer.com/issue\";\n            \n            var json = JsonSerializer.Serialize(card);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n            \n            var response = await client.PostAsync(endpoint, content);\n            response.EnsureSuccessStatusCode();\n            \n            var responseBody = await response.Content.ReadAsStringAsync();\n            var processedCard = JsonSerializer.Deserialize<Card>(responseBody, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n\n            if (processedCard == null)\n                throw new Exception(\"Failed to process card issuance with external system\");\n            \n            return processedCard;\n        }\n\n        public async Task<Card> ProcessCardActivationAsync(Card card)\n        {\n            var client = _httpClientFactory.CreateClient();\n            var endpoint = \"https://api.cardissuer.com/activate\";\n            \n            var json = JsonSerializer.Serialize(card);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n            \n            var response = await client.PostAsync(endpoint, content);\n            response.EnsureSuccessStatusCode();\n            \n            var responseBody = await response.Content.ReadAsStringAsync();\n            var activatedCard = JsonSerializer.Deserialize<Card>(responseBody, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n\n            if (activatedCard == null)\n                throw new Exception(\"Failed to process card activation with external system\");\n            \n            return activatedCard;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "f88e8f3b-0bfa-49bc-ac22-92493caaeb37",
        "Name": "Utils",
        "ParentId": "c1d60bb0-2a5e-4144-9ede-9815a8a3e9dd",
        "Type": 0,
        "Items": [
          {
            "Id": "070f3271-ad88-427d-9900-c2433bca5dc4",
            "Name": "CardValidator.cs",
            "ParentId": "f88e8f3b-0bfa-49bc-ac22-92493caaeb37",
            "Type": 1,
            "Text": "using System;\nusing CardIssuanceService.Models;\n\nnamespace CardIssuanceService.Utils\n{\n    public static class CardValidator\n    {\n        public static void ValidateIssue(CardRequest request)\n        {\n            if (request == null)\n                throw new ArgumentNullException(nameof(request));\n            \n            if (string.IsNullOrWhiteSpace(request.CustomerId))\n                throw new ArgumentException(\"CustomerId is required.\");\n        }\n\n        public static void ValidateActivation(ActivationRequest request)\n        {\n            if (request == null)\n                throw new ArgumentNullException(nameof(request));\n            \n            if (request.CardId == Guid.Empty)\n                throw new ArgumentException(\"Valid CardId is required.\");\n            \n            if (string.IsNullOrWhiteSpace(request.ActivationCode))\n                throw new ArgumentException(\"Activation code is required.\");\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "f1a16f4e-daac-41ba-9bfc-149c52efa645",
    "Name": "ContactlessPaymentService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "4c148ee8-2b2c-4539-834b-3fdf7ac3bfcf",
        "Name": "Program.cs",
        "ParentId": "f1a16f4e-daac-41ba-9bfc-149c52efa645",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ContactlessPaymentService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "bf88cf78-40a9-4a0e-909e-9526726ec9da",
        "Name": "Startup.cs",
        "ParentId": "f1a16f4e-daac-41ba-9bfc-149c52efa645",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing ContactlessPaymentService.Services;\nusing ContactlessPaymentService.Data;\nusing ContactlessPaymentService.Infrastructure;\n\nnamespace ContactlessPaymentService\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IPaymentService, PaymentService>();\n            services.AddSingleton<IPaymentRepository, PaymentRepository>();\n            services.AddSingleton<IPaymentGatewayAdapter, PaymentGatewayAdapter>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "d33e6f8c-4315-4a93-a475-394d7731b7f8",
        "Name": "Controllers",
        "ParentId": "f1a16f4e-daac-41ba-9bfc-149c52efa645",
        "Type": 0,
        "Items": [
          {
            "Id": "aafd5deb-f1b9-4ff0-893d-f5260862d2c5",
            "Name": "PaymentController.cs",
            "ParentId": "d33e6f8c-4315-4a93-a475-394d7731b7f8",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing ContactlessPaymentService.Models;\nusing ContactlessPaymentService.Services;\n\nnamespace ContactlessPaymentService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class PaymentController : ControllerBase\n    {\n        private readonly IPaymentService _paymentService;\n\n        public PaymentController(IPaymentService paymentService)\n        {\n            _paymentService = paymentService;\n        }\n\n        [HttpPost(\"charge\")]\n        public ActionResult<PaymentResponse> ChargePayment([FromBody] PaymentRequest request)\n        {\n            try\n            {\n                PaymentResponse response = _paymentService.ProcessPayment(request);\n                return Ok(response);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { error = ex.Message });\n            }\n        }\n\n        [HttpGet(\"transaction/{transactionId}\")]\n        public ActionResult<PaymentTransaction> GetTransaction(string transactionId)\n        {\n            var transaction = _paymentService.GetTransaction(transactionId);\n            if (transaction == null)\n                return NotFound();\n            return Ok(transaction);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "de766a3e-47ba-4545-9109-d3113115f789",
        "Name": "Services",
        "ParentId": "f1a16f4e-daac-41ba-9bfc-149c52efa645",
        "Type": 0,
        "Items": [
          {
            "Id": "a0089038-9d51-4d20-9c63-af8d3f2f42fd",
            "Name": "IPaymentService.cs",
            "ParentId": "de766a3e-47ba-4545-9109-d3113115f789",
            "Type": 1,
            "Text": "using ContactlessPaymentService.Models;\n\nnamespace ContactlessPaymentService.Services\n{\n    public interface IPaymentService\n    {\n        PaymentResponse ProcessPayment(PaymentRequest request);\n        PaymentTransaction GetTransaction(string transactionId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "944c315f-85d5-467b-ac9d-519f0012d514",
            "Name": "PaymentService.cs",
            "ParentId": "de766a3e-47ba-4545-9109-d3113115f789",
            "Type": 1,
            "Text": "using System;\nusing ContactlessPaymentService.Models;\nusing ContactlessPaymentService.Data;\nusing ContactlessPaymentService.Infrastructure;\n\nnamespace ContactlessPaymentService.Services\n{\n    public class PaymentService : IPaymentService\n    {\n        private readonly IPaymentRepository _repository;\n        private readonly IPaymentGatewayAdapter _gatewayAdapter;\n\n        public PaymentService(IPaymentRepository repository, IPaymentGatewayAdapter gatewayAdapter)\n        {\n            _repository = repository;\n            _gatewayAdapter = gatewayAdapter;\n        }\n\n        public PaymentResponse ProcessPayment(PaymentRequest request)\n        {\n            if (request.Amount <= 0)\n                throw new ArgumentException(\"Amount must be greater than zero.\");\n            if (string.IsNullOrWhiteSpace(request.Currency))\n                throw new ArgumentException(\"Currency is required.\");\n            if (string.IsNullOrWhiteSpace(request.NfcData))\n                throw new ArgumentException(\"NFC data is required for contactless payments.\");\n\n            PaymentTransaction transaction = new PaymentTransaction\n            {\n                TransactionId = Guid.NewGuid().ToString(),\n                Amount = request.Amount,\n                Currency = request.Currency,\n                TerminalId = request.TerminalId,\n                NfcData = request.NfcData,\n                Status = \"Pending\",\n                CreatedAt = DateTime.UtcNow\n            };\n\n            _repository.SaveTransaction(transaction);\n\n            var gatewayResult = _gatewayAdapter.ExecutePayment(request);\n\n            transaction.Status = gatewayResult.Success ? \"Approved\" : \"Declined\";\n            transaction.ResponseCode = gatewayResult.ResponseCode;\n            transaction.UpdatedAt = DateTime.UtcNow;\n\n            _repository.UpdateTransaction(transaction);\n\n            return new PaymentResponse\n            {\n                TransactionId = transaction.TransactionId,\n                Success = gatewayResult.Success,\n                ResponseMessage = gatewayResult.ResponseMessage\n            };\n        }\n\n        public PaymentTransaction GetTransaction(string transactionId)\n        {\n            return _repository.GetTransaction(transactionId);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "338aab05-31bd-4328-818a-4b0f4693b65a",
        "Name": "Models",
        "ParentId": "f1a16f4e-daac-41ba-9bfc-149c52efa645",
        "Type": 0,
        "Items": [
          {
            "Id": "dada9c08-7e9a-4814-8230-7e107761f650",
            "Name": "PaymentRequest.cs",
            "ParentId": "338aab05-31bd-4328-818a-4b0f4693b65a",
            "Type": 1,
            "Text": "namespace ContactlessPaymentService.Models\n{\n    public class PaymentRequest\n    {\n        public decimal Amount { get; set; }\n        public string Currency { get; set; }\n        public string TerminalId { get; set; }\n        public string NfcData { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "cca5ad31-37fe-4a2c-b36a-b14b14505974",
            "Name": "PaymentResponse.cs",
            "ParentId": "338aab05-31bd-4328-818a-4b0f4693b65a",
            "Type": 1,
            "Text": "namespace ContactlessPaymentService.Models\n{\n    public class PaymentResponse\n    {\n        public string TransactionId { get; set; }\n        public bool Success { get; set; }\n        public string ResponseMessage { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "d68a7c92-5a52-4d81-81aa-29ff7b555e73",
            "Name": "PaymentTransaction.cs",
            "ParentId": "338aab05-31bd-4328-818a-4b0f4693b65a",
            "Type": 1,
            "Text": "using System;\n\nnamespace ContactlessPaymentService.Models\n{\n    public class PaymentTransaction\n    {\n        public string TransactionId { get; set; }\n        public decimal Amount { get; set; }\n        public string Currency { get; set; }\n        public string TerminalId { get; set; }\n        public string NfcData { get; set; }\n        public string Status { get; set; }\n        public string ResponseCode { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public DateTime? UpdatedAt { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "1eb9eefa-f5d3-4570-8599-e3ea731ca8ad",
            "Name": "PaymentGatewayResponse.cs",
            "ParentId": "338aab05-31bd-4328-818a-4b0f4693b65a",
            "Type": 1,
            "Text": "namespace ContactlessPaymentService.Models\n{\n    public class PaymentGatewayResponse\n    {\n        public bool Success { get; set; }\n        public string ResponseCode { get; set; }\n        public string ResponseMessage { get; set; }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "60539b39-e09c-45da-a66e-dac43ff63173",
        "Name": "Data",
        "ParentId": "f1a16f4e-daac-41ba-9bfc-149c52efa645",
        "Type": 0,
        "Items": [
          {
            "Id": "00a567b6-01d4-4421-8754-d21bd7defdb7",
            "Name": "IPaymentRepository.cs",
            "ParentId": "60539b39-e09c-45da-a66e-dac43ff63173",
            "Type": 1,
            "Text": "using ContactlessPaymentService.Models;\n\nnamespace ContactlessPaymentService.Data\n{\n    public interface IPaymentRepository\n    {\n        void SaveTransaction(PaymentTransaction transaction);\n        void UpdateTransaction(PaymentTransaction transaction);\n        PaymentTransaction GetTransaction(string transactionId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "778872c9-6fb4-47c3-ae02-8b929651b0d4",
            "Name": "PaymentRepository.cs",
            "ParentId": "60539b39-e09c-45da-a66e-dac43ff63173",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing ContactlessPaymentService.Models;\n\nnamespace ContactlessPaymentService.Data\n{\n    public class PaymentRepository : IPaymentRepository\n    {\n        private readonly ConcurrentDictionary<string, PaymentTransaction> _transactions = new ConcurrentDictionary<string, PaymentTransaction>();\n\n        public void SaveTransaction(PaymentTransaction transaction)\n        {\n            _transactions[transaction.TransactionId] = transaction;\n        }\n\n        public void UpdateTransaction(PaymentTransaction transaction)\n        {\n            _transactions[transaction.TransactionId] = transaction;\n        }\n\n        public PaymentTransaction GetTransaction(string transactionId)\n        {\n            _transactions.TryGetValue(transactionId, out PaymentTransaction transaction);\n            return transaction;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "f0d7d2e3-e32a-4ce7-87c3-71a2224c88a9",
        "Name": "Infrastructure",
        "ParentId": "f1a16f4e-daac-41ba-9bfc-149c52efa645",
        "Type": 0,
        "Items": [
          {
            "Id": "0ffbdc0b-b7b5-48c0-988d-cb2902f0c501",
            "Name": "IPaymentGatewayAdapter.cs",
            "ParentId": "f0d7d2e3-e32a-4ce7-87c3-71a2224c88a9",
            "Type": 1,
            "Text": "using ContactlessPaymentService.Models;\n\nnamespace ContactlessPaymentService.Infrastructure\n{\n    public interface IPaymentGatewayAdapter\n    {\n        PaymentGatewayResponse ExecutePayment(PaymentRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "4703dcbd-2d07-430c-9433-b7a28278e484",
            "Name": "PaymentGatewayAdapter.cs",
            "ParentId": "f0d7d2e3-e32a-4ce7-87c3-71a2224c88a9",
            "Type": 1,
            "Text": "using ContactlessPaymentService.Models;\n\nnamespace ContactlessPaymentService.Infrastructure\n{\n    public class PaymentGatewayAdapter : IPaymentGatewayAdapter\n    {\n        public PaymentGatewayResponse ExecutePayment(PaymentRequest request)\n        {\n            // In a production environment, implement secure communication with the external payment gateway.\n            // This implementation uses business rules to simulate payment processing.\n            bool approved = request.Amount <= 1000;\n\n            return new PaymentGatewayResponse\n            {\n                Success = approved,\n                ResponseCode = approved ? \"00\" : \"05\",\n                ResponseMessage = approved ? \"Payment approved\" : \"Payment declined due to amount restrictions\"\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "594a332c-1ae0-4bd3-9665-1142f81805a2",
    "Name": "LoyaltyRewardsManager",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "79f2f8da-1498-4c83-9f2d-35f0fc6a2458",
        "Name": "Program.cs",
        "ParentId": "594a332c-1ae0-4bd3-9665-1142f81805a2",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing LoyaltyRewardsManager.Services;\nusing LoyaltyRewardsManager.Data;\nusing LoyaltyRewardsManager.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddScoped<ILoyaltyService, LoyaltyService>();\nbuilder.Services.AddSingleton<IRewardRepository, RewardRepository>();\nbuilder.Services.AddSingleton<INotificationService, NotificationService>();\nbuilder.Services.AddLogging();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "66927acd-4e2d-46c1-b392-9efbc7aeb455",
        "Name": "Controllers",
        "ParentId": "594a332c-1ae0-4bd3-9665-1142f81805a2",
        "Type": 0,
        "Items": [
          {
            "Id": "d25a90a9-fe1d-4508-ba36-6a811eb57e71",
            "Name": "RewardsController.cs",
            "ParentId": "66927acd-4e2d-46c1-b392-9efbc7aeb455",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing LoyaltyRewardsManager.Models;\nusing LoyaltyRewardsManager.Services;\n\nnamespace LoyaltyRewardsManager.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class RewardsController : ControllerBase\n    {\n        private readonly ILoyaltyService _loyaltyService;\n\n        public RewardsController(ILoyaltyService loyaltyService)\n        {\n            _loyaltyService = loyaltyService;\n        }\n\n        [HttpPost(\"award\")]\n        public async Task<IActionResult> AwardPoints([FromBody] AwardPointsRequest request)\n        {\n            var result = await _loyaltyService.AwardPointsAsync(request.MemberId, request.Points);\n            return Ok(result);\n        }\n\n        [HttpPost(\"redeem\")]\n        public async Task<IActionResult> RedeemPoints([FromBody] RedeemPointsRequest request)\n        {\n            var result = await _loyaltyService.RedeemPointsAsync(request.MemberId, request.Points);\n            return Ok(result);\n        }\n\n        [HttpGet(\"balance/{memberId}\")]\n        public async Task<IActionResult> GetBalance(string memberId)\n        {\n            var balance = await _loyaltyService.GetBalanceAsync(memberId);\n            return Ok(new { MemberId = memberId, Balance = balance });\n        }\n\n        [HttpGet(\"history/{memberId}\")]\n        public async Task<IActionResult> GetTransactionHistory(string memberId)\n        {\n            var history = await _loyaltyService.GetTransactionHistoryAsync(memberId);\n            return Ok(history);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "4d22c378-c212-41df-8d99-0212066e89d8",
        "Name": "Services",
        "ParentId": "594a332c-1ae0-4bd3-9665-1142f81805a2",
        "Type": 0,
        "Items": [
          {
            "Id": "9f0ee270-b8de-418c-a9d8-5ff991424a2f",
            "Name": "ILoyaltyService.cs",
            "ParentId": "4d22c378-c212-41df-8d99-0212066e89d8",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing LoyaltyRewardsManager.Models;\n\nnamespace LoyaltyRewardsManager.Services\n{\n    public interface ILoyaltyService\n    {\n        Task<RewardResponse> AwardPointsAsync(string memberId, int points);\n        Task<RewardResponse> RedeemPointsAsync(string memberId, int points);\n        Task<decimal> GetBalanceAsync(string memberId);\n        Task<IEnumerable<RewardTransaction>> GetTransactionHistoryAsync(string memberId);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "674a4eca-4639-4b20-bde6-2491dba8bb64",
            "Name": "LoyaltyService.cs",
            "ParentId": "4d22c378-c212-41df-8d99-0212066e89d8",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing LoyaltyRewardsManager.Data;\nusing LoyaltyRewardsManager.Models;\nusing LoyaltyRewardsManager.Infrastructure;\n\nnamespace LoyaltyRewardsManager.Services\n{\n    public class LoyaltyService : ILoyaltyService\n    {\n        private readonly IRewardRepository _repository;\n        private readonly INotificationService _notificationService;\n\n        public LoyaltyService(IRewardRepository repository, INotificationService notificationService)\n        {\n            _repository = repository;\n            _notificationService = notificationService;\n        }\n\n        public async Task<RewardResponse> AwardPointsAsync(string memberId, int points)\n        {\n            if (points <= 0)\n            {\n                return new RewardResponse { Success = false, Message = \"Points must be greater than zero.\" };\n            }\n\n            var member = await _repository.GetMemberAsync(memberId);\n            if (member == null)\n            {\n                member = new LoyaltyMember { MemberId = memberId, Balance = 0 };\n                await _repository.AddOrUpdateMemberAsync(member);\n            }\n\n            member.Balance += points;\n            await _repository.AddOrUpdateMemberAsync(member);\n\n            var transaction = new RewardTransaction\n            {\n                TransactionId = Guid.NewGuid().ToString(),\n                MemberId = memberId,\n                TransactionType = \"Award\",\n                Points = points,\n                Timestamp = DateTime.UtcNow\n            };\n\n            await _repository.AddTransactionAsync(transaction);\n\n            _notificationService.SendNotification(memberId, $\"You have been awarded {points} points.\");\n\n            return new RewardResponse { Success = true, Message = \"Points awarded successfully.\", Balance = member.Balance };\n        }\n\n        public async Task<RewardResponse> RedeemPointsAsync(string memberId, int points)\n        {\n            if (points <= 0)\n            {\n                return new RewardResponse { Success = false, Message = \"Points must be greater than zero.\" };\n            }\n\n            var member = await _repository.GetMemberAsync(memberId);\n            if (member == null || member.Balance < points)\n            {\n                return new RewardResponse { Success = false, Message = \"Insufficient points for redemption.\" };\n            }\n\n            member.Balance -= points;\n            await _repository.AddOrUpdateMemberAsync(member);\n\n            var transaction = new RewardTransaction\n            {\n                TransactionId = Guid.NewGuid().ToString(),\n                MemberId = memberId,\n                TransactionType = \"Redeem\",\n                Points = points,\n                Timestamp = DateTime.UtcNow\n            };\n\n            await _repository.AddTransactionAsync(transaction);\n\n            _notificationService.SendNotification(memberId, $\"You have redeemed {points} points.\");\n\n            return new RewardResponse { Success = true, Message = \"Points redeemed successfully.\", Balance = member.Balance };\n        }\n\n        public async Task<decimal> GetBalanceAsync(string memberId)\n        {\n            var member = await _repository.GetMemberAsync(memberId);\n            return member?.Balance ?? 0;\n        }\n\n        public async Task<IEnumerable<RewardTransaction>> GetTransactionHistoryAsync(string memberId)\n        {\n            var transactions = await _repository.GetTransactionsAsync(memberId);\n            return transactions.OrderByDescending(t => t.Timestamp);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "737ff162-0e13-41c9-bf8e-af5dd25f2ea2",
        "Name": "Models",
        "ParentId": "594a332c-1ae0-4bd3-9665-1142f81805a2",
        "Type": 0,
        "Items": [
          {
            "Id": "9a6d6eb3-dc42-4104-a45f-342899d576bf",
            "Name": "LoyaltyMember.cs",
            "ParentId": "737ff162-0e13-41c9-bf8e-af5dd25f2ea2",
            "Type": 1,
            "Text": "namespace LoyaltyRewardsManager.Models\n{\n    public class LoyaltyMember\n    {\n        public string MemberId { get; set; }\n        public decimal Balance { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "60a0ad20-1f61-4621-bb07-ee36962c17fc",
            "Name": "RewardTransaction.cs",
            "ParentId": "737ff162-0e13-41c9-bf8e-af5dd25f2ea2",
            "Type": 1,
            "Text": "using System;\n\nnamespace LoyaltyRewardsManager.Models\n{\n    public class RewardTransaction\n    {\n        public string TransactionId { get; set; }\n        public string MemberId { get; set; }\n        public string TransactionType { get; set; }\n        public int Points { get; set; }\n        public DateTime Timestamp { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "d7ca3621-7692-4111-b357-c553d07b5855",
            "Name": "AwardPointsRequest.cs",
            "ParentId": "737ff162-0e13-41c9-bf8e-af5dd25f2ea2",
            "Type": 1,
            "Text": "namespace LoyaltyRewardsManager.Models\n{\n    public class AwardPointsRequest\n    {\n        public string MemberId { get; set; }\n        public int Points { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "b06c13ac-3fc5-4fdf-bfeb-c30840438973",
            "Name": "RedeemPointsRequest.cs",
            "ParentId": "737ff162-0e13-41c9-bf8e-af5dd25f2ea2",
            "Type": 1,
            "Text": "namespace LoyaltyRewardsManager.Models\n{\n    public class RedeemPointsRequest\n    {\n        public string MemberId { get; set; }\n        public int Points { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "82e2846f-3409-4657-be50-22a918a7e9f0",
            "Name": "RewardResponse.cs",
            "ParentId": "737ff162-0e13-41c9-bf8e-af5dd25f2ea2",
            "Type": 1,
            "Text": "namespace LoyaltyRewardsManager.Models\n{\n    public class RewardResponse\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n        public decimal Balance { get; set; }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "c00c9608-bdb5-4fa1-9292-e9bb1f0d2848",
        "Name": "Data",
        "ParentId": "594a332c-1ae0-4bd3-9665-1142f81805a2",
        "Type": 0,
        "Items": [
          {
            "Id": "a092bec5-b2bd-4025-ad2b-5a9dd66b8733",
            "Name": "IRewardRepository.cs",
            "ParentId": "c00c9608-bdb5-4fa1-9292-e9bb1f0d2848",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing LoyaltyRewardsManager.Models;\n\nnamespace LoyaltyRewardsManager.Data\n{\n    public interface IRewardRepository\n    {\n        Task<LoyaltyMember> GetMemberAsync(string memberId);\n        Task AddOrUpdateMemberAsync(LoyaltyMember member);\n        Task AddTransactionAsync(RewardTransaction transaction);\n        Task<IEnumerable<RewardTransaction>> GetTransactionsAsync(string memberId);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "b41ed8de-920c-4bfd-9c02-d172bbad8775",
            "Name": "RewardRepository.cs",
            "ParentId": "c00c9608-bdb5-4fa1-9292-e9bb1f0d2848",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing LoyaltyRewardsManager.Models;\n\nnamespace LoyaltyRewardsManager.Data\n{\n    public class RewardRepository : IRewardRepository\n    {\n        private readonly ConcurrentDictionary<string, LoyaltyMember> _members = new ConcurrentDictionary<string, LoyaltyMember>();\n        private readonly ConcurrentDictionary<string, List<RewardTransaction>> _transactions = new ConcurrentDictionary<string, List<RewardTransaction>>();\n\n        public Task<LoyaltyMember> GetMemberAsync(string memberId)\n        {\n            _members.TryGetValue(memberId, out LoyaltyMember member);\n            return Task.FromResult(member);\n        }\n\n        public Task AddOrUpdateMemberAsync(LoyaltyMember member)\n        {\n            _members.AddOrUpdate(member.MemberId, member, (key, oldValue) => member);\n            return Task.CompletedTask;\n        }\n\n        public Task AddTransactionAsync(RewardTransaction transaction)\n        {\n            var list = _transactions.GetOrAdd(transaction.MemberId, new List<RewardTransaction>());\n            lock (list)\n            {\n                list.Add(transaction);\n            }\n            return Task.CompletedTask;\n        }\n\n        public Task<IEnumerable<RewardTransaction>> GetTransactionsAsync(string memberId)\n        {\n            _transactions.TryGetValue(memberId, out List<RewardTransaction> list);\n            return Task.FromResult((IEnumerable<RewardTransaction>)(list ?? new List<RewardTransaction>()));\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "0c509657-3cf4-4530-88e3-125496c5b003",
        "Name": "Infrastructure",
        "ParentId": "594a332c-1ae0-4bd3-9665-1142f81805a2",
        "Type": 0,
        "Items": [
          {
            "Id": "895ed17b-b0f4-47fb-ab01-1ca7ba46299b",
            "Name": "NotificationService.cs",
            "ParentId": "0c509657-3cf4-4530-88e3-125496c5b003",
            "Type": 1,
            "Text": "using Microsoft.Extensions.Logging;\n\nnamespace LoyaltyRewardsManager.Infrastructure\n{\n    public interface INotificationService\n    {\n        void SendNotification(string memberId, string message);\n    }\n\n    public class NotificationService : INotificationService\n    {\n        private readonly ILogger<NotificationService> _logger;\n\n        public NotificationService(ILogger<NotificationService> logger)\n        {\n            _logger = logger;\n        }\n\n        public void SendNotification(string memberId, string message)\n        {\n            _logger.LogInformation($\"Notification to Member {memberId}: {message}\");\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "6293bd9c-656e-4403-b080-cd1e68ab3cca",
    "Name": "MobileBankingToolkit",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "8b852a8f-c76b-4502-8beb-1aaa1fb78cf7",
        "Name": "Program.cs",
        "ParentId": "6293bd9c-656e-4403-b080-cd1e68ab3cca",
        "Type": 1,
        "Text": "using MobileBankingToolkit.Services;\nusing MobileBankingToolkit.Infrastructure;\nusing MobileBankingToolkit.Data;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Register services for dependency injection\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IBankingService, BankingService>();\nbuilder.Services.AddSingleton<IBankingRepository, BankingRepository>();\nbuilder.Services.AddSingleton<IPaymentIntegration, PaymentIntegration>();\nbuilder.Services.AddSingleton<INotificationService, NotificationService>();\nbuilder.Services.AddLogging();\n\nvar app = builder.Build();\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "f68b7ad4-b26e-431d-b0a7-63eabbdf7902",
        "Name": "Controllers",
        "ParentId": "6293bd9c-656e-4403-b080-cd1e68ab3cca",
        "Type": 0,
        "Items": [
          {
            "Id": "ee79c5c6-3ab2-41b7-ac28-5cb576510784",
            "Name": "BankingController.cs",
            "ParentId": "f68b7ad4-b26e-431d-b0a7-63eabbdf7902",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing MobileBankingToolkit.Services;\nusing MobileBankingToolkit.Models;\n\nnamespace MobileBankingToolkit.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class BankingController : ControllerBase\n    {\n        private readonly IBankingService _bankingService;\n\n        public BankingController(IBankingService bankingService)\n        {\n            _bankingService = bankingService;\n        }\n\n        [HttpPost(\"create-account\")]\n        public ActionResult<AccountResponse> CreateAccount([FromBody] AccountRequest request)\n        {\n            var response = _bankingService.CreateAccount(request);\n            return Ok(response);\n        }\n\n        [HttpPost(\"process-transaction\")]\n        public ActionResult<TransactionResponse> ProcessTransaction([FromBody] TransactionRequest request)\n        {\n            var response = _bankingService.ProcessTransaction(request);\n            return Ok(response);\n        }\n\n        [HttpPost(\"authenticate\")]\n        public ActionResult<AuthResponse> Authenticate([FromBody] AuthRequest request)\n        {\n            var response = _bankingService.Authenticate(request);\n            if (!response.Success)\n            {\n                return Unauthorized(response);\n            }\n            return Ok(response);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "17928ebd-40cf-4517-9122-8b52d315f9df",
        "Name": "Services",
        "ParentId": "6293bd9c-656e-4403-b080-cd1e68ab3cca",
        "Type": 0,
        "Items": [
          {
            "Id": "5f9b890f-4660-4931-b201-1ee144ba8b5d",
            "Name": "IBankingService.cs",
            "ParentId": "17928ebd-40cf-4517-9122-8b52d315f9df",
            "Type": 1,
            "Text": "using MobileBankingToolkit.Models;\n\nnamespace MobileBankingToolkit.Services\n{\n    public interface IBankingService\n    {\n        AccountResponse CreateAccount(AccountRequest request);\n        TransactionResponse ProcessTransaction(TransactionRequest request);\n        AuthResponse Authenticate(AuthRequest request);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "015d2060-ee22-48f3-b780-c3c5ad6808fe",
            "Name": "BankingService.cs",
            "ParentId": "17928ebd-40cf-4517-9122-8b52d315f9df",
            "Type": 1,
            "Text": "using MobileBankingToolkit.Models;\nusing MobileBankingToolkit.Data;\nusing MobileBankingToolkit.Infrastructure;\nusing MobileBankingToolkit.Utils;\nusing System;\n\nnamespace MobileBankingToolkit.Services\n{\n    public class BankingService : IBankingService\n    {\n        private readonly IBankingRepository _repository;\n        private readonly IPaymentIntegration _paymentIntegration;\n\n        public BankingService(IBankingRepository repository, IPaymentIntegration paymentIntegration)\n        {\n            _repository = repository;\n            _paymentIntegration = paymentIntegration;\n        }\n\n        public AccountResponse CreateAccount(AccountRequest request)\n        {\n            if (string.IsNullOrWhiteSpace(request.FullName) || string.IsNullOrWhiteSpace(request.Email) || string.IsNullOrWhiteSpace(request.Password))\n            {\n                return new AccountResponse { Success = false, Message = \"Invalid account data.\" };\n            }\n\n            var passwordHash = SecurityHelper.HashPassword(request.Password);\n            var account = new Account\n            {\n                AccountId = Guid.NewGuid().ToString(),\n                FullName = request.FullName,\n                Email = request.Email,\n                PasswordHash = passwordHash,\n                CreatedAt = DateTime.UtcNow,\n                Balance = 0m\n            };\n\n            _repository.AddAccount(account);\n            return new AccountResponse { Success = true, AccountId = account.AccountId, Message = \"Account created successfully.\" };\n        }\n\n        public TransactionResponse ProcessTransaction(TransactionRequest request)\n        {\n            var account = _repository.GetAccount(request.AccountId);\n            if (account == null)\n            {\n                return new TransactionResponse { Success = false, Message = \"Account not found.\" };\n            }\n\n            if (request.Type == TransactionType.Debit)\n            {\n                if (account.Balance < request.Amount)\n                {\n                    return new TransactionResponse { Success = false, Message = \"Insufficient funds.\" };\n                }\n                var paymentResult = _paymentIntegration.ProcessPayment(request);\n                if (!paymentResult.Success)\n                {\n                    return new TransactionResponse { Success = false, Message = \"Payment processing failed.\" };\n                }\n                account.Balance -= request.Amount;\n            }\n            else\n            {\n                account.Balance += request.Amount;\n            }\n\n            var transaction = new Transaction\n            {\n                TransactionId = Guid.NewGuid().ToString(),\n                AccountId = account.AccountId,\n                Amount = request.Amount,\n                Type = request.Type,\n                Timestamp = DateTime.UtcNow\n            };\n            \n            _repository.AddTransaction(transaction);\n            return new TransactionResponse { Success = true, TransactionId = transaction.TransactionId, Message = \"Transaction processed.\" };\n        }\n\n        public AuthResponse Authenticate(AuthRequest request)\n        {\n            var account = _repository.GetAccountByEmail(request.Email);\n            if (account == null || !SecurityHelper.VerifyPassword(request.Password, account.PasswordHash))\n            {\n                return new AuthResponse { Success = false, Message = \"Authentication failed.\" };\n            }\n            var token = SecurityHelper.GenerateToken(account.AccountId);\n            return new AuthResponse { Success = true, Token = token, Message = \"Authenticated successfully.\" };\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "bb546242-d302-4e70-9c43-565eae12a958",
        "Name": "Models",
        "ParentId": "6293bd9c-656e-4403-b080-cd1e68ab3cca",
        "Type": 0,
        "Items": [
          {
            "Id": "e6926cb3-e41e-4eea-819c-e1dd54f942ea",
            "Name": "Account.cs",
            "ParentId": "bb546242-d302-4e70-9c43-565eae12a958",
            "Type": 1,
            "Text": "namespace MobileBankingToolkit.Models\n{\n    public class Account\n    {\n        public string AccountId { get; set; }\n        public string FullName { get; set; }\n        public string Email { get; set; }\n        public string PasswordHash { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public decimal Balance { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "d7777572-0bb6-4da8-8aaf-15e395321e4c",
            "Name": "AccountRequest.cs",
            "ParentId": "bb546242-d302-4e70-9c43-565eae12a958",
            "Type": 1,
            "Text": "namespace MobileBankingToolkit.Models\n{\n    public class AccountRequest\n    {\n        public string FullName { get; set; }\n        public string Email { get; set; }\n        public string Password { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "be51e51d-180c-46cb-9866-364b8e693861",
            "Name": "AccountResponse.cs",
            "ParentId": "bb546242-d302-4e70-9c43-565eae12a958",
            "Type": 1,
            "Text": "namespace MobileBankingToolkit.Models\n{\n    public class AccountResponse\n    {\n        public bool Success { get; set; }\n        public string AccountId { get; set; }\n        public string Message { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "e2646952-3f97-4c3b-8df5-1f2558cfec23",
            "Name": "Transaction.cs",
            "ParentId": "bb546242-d302-4e70-9c43-565eae12a958",
            "Type": 1,
            "Text": "namespace MobileBankingToolkit.Models\n{\n    public enum TransactionType\n    {\n        Credit,\n        Debit\n    }\n\n    public class Transaction\n    {\n        public string TransactionId { get; set; }\n        public string AccountId { get; set; }\n        public decimal Amount { get; set; }\n        public TransactionType Type { get; set; }\n        public DateTime Timestamp { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "26c517cd-8c3c-43ec-8ffc-82a53b0b3db7",
            "Name": "TransactionRequest.cs",
            "ParentId": "bb546242-d302-4e70-9c43-565eae12a958",
            "Type": 1,
            "Text": "namespace MobileBankingToolkit.Models\n{\n    public class TransactionRequest\n    {\n        public string AccountId { get; set; }\n        public decimal Amount { get; set; }\n        public TransactionType Type { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "0a2fed0a-129a-4651-885f-add5ce1f884d",
            "Name": "TransactionResponse.cs",
            "ParentId": "bb546242-d302-4e70-9c43-565eae12a958",
            "Type": 1,
            "Text": "namespace MobileBankingToolkit.Models\n{\n    public class TransactionResponse\n    {\n        public bool Success { get; set; }\n        public string TransactionId { get; set; }\n        public string Message { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "bc8aae8d-04bd-4b6c-be57-ee14efcc4d66",
            "Name": "AuthRequest.cs",
            "ParentId": "bb546242-d302-4e70-9c43-565eae12a958",
            "Type": 1,
            "Text": "namespace MobileBankingToolkit.Models\n{\n    public class AuthRequest\n    {\n        public string Email { get; set; }\n        public string Password { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "a6026121-34f0-4473-89f2-9152e5ea82bd",
            "Name": "AuthResponse.cs",
            "ParentId": "bb546242-d302-4e70-9c43-565eae12a958",
            "Type": 1,
            "Text": "namespace MobileBankingToolkit.Models\n{\n    public class AuthResponse\n    {\n        public bool Success { get; set; }\n        public string Token { get; set; }\n        public string Message { get; set; }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "40c4ae5d-3523-445d-b81d-3fa283810ca1",
        "Name": "Data",
        "ParentId": "6293bd9c-656e-4403-b080-cd1e68ab3cca",
        "Type": 0,
        "Items": [
          {
            "Id": "3da71280-dd86-4e0e-96c8-a83c3d4f1929",
            "Name": "IBankingRepository.cs",
            "ParentId": "40c4ae5d-3523-445d-b81d-3fa283810ca1",
            "Type": 1,
            "Text": "using MobileBankingToolkit.Models;\n\nnamespace MobileBankingToolkit.Data\n{\n    public interface IBankingRepository\n    {\n        void AddAccount(Account account);\n        Account GetAccount(string accountId);\n        Account GetAccountByEmail(string email);\n        void AddTransaction(Transaction transaction);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "1beda6e3-5697-4bf3-b6e4-43f1178f7d06",
            "Name": "BankingRepository.cs",
            "ParentId": "40c4ae5d-3523-445d-b81d-3fa283810ca1",
            "Type": 1,
            "Text": "using MobileBankingToolkit.Models;\nusing System;\nusing System.Collections.Concurrent;\nusing System.Linq;\n\nnamespace MobileBankingToolkit.Data\n{\n    public class BankingRepository : IBankingRepository\n    {\n        private readonly ConcurrentDictionary<string, Account> _accounts = new ConcurrentDictionary<string, Account>();\n        private readonly ConcurrentDictionary<string, Transaction> _transactions = new ConcurrentDictionary<string, Transaction>();\n\n        public void AddAccount(Account account)\n        {\n            _accounts[account.AccountId] = account;\n        }\n\n        public Account GetAccount(string accountId)\n        {\n            _accounts.TryGetValue(accountId, out var account);\n            return account;\n        }\n\n        public Account GetAccountByEmail(string email)\n        {\n            return _accounts.Values.FirstOrDefault(a => a.Email.Equals(email, StringComparison.OrdinalIgnoreCase));\n        }\n\n        public void AddTransaction(Transaction transaction)\n        {\n            _transactions[transaction.TransactionId] = transaction;\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "c4c15d92-52be-4997-ba33-d4f1ddda4f9e",
        "Name": "Infrastructure",
        "ParentId": "6293bd9c-656e-4403-b080-cd1e68ab3cca",
        "Type": 0,
        "Items": [
          {
            "Id": "4b5156e9-517f-4dd2-9a66-67b8a4a87963",
            "Name": "IPaymentIntegration.cs",
            "ParentId": "c4c15d92-52be-4997-ba33-d4f1ddda4f9e",
            "Type": 1,
            "Text": "using MobileBankingToolkit.Models;\n\nnamespace MobileBankingToolkit.Infrastructure\n{\n    public interface IPaymentIntegration\n    {\n        PaymentResult ProcessPayment(TransactionRequest request);\n    }\n\n    public class PaymentResult\n    {\n        public bool Success { get; set; }\n        public string PaymentId { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "ebd0d9e6-11c4-43b9-9ecd-9b157d26b4b5",
            "Name": "PaymentIntegration.cs",
            "ParentId": "c4c15d92-52be-4997-ba33-d4f1ddda4f9e",
            "Type": 1,
            "Text": "using MobileBankingToolkit.Models;\nusing System;\n\nnamespace MobileBankingToolkit.Infrastructure\n{\n    public class PaymentIntegration : IPaymentIntegration\n    {\n        public PaymentResult ProcessPayment(TransactionRequest request)\n        {\n            if (request.Amount <= 0)\n            {\n                return new PaymentResult { Success = false };\n            }\n            // Simulate integration with an external payment gateway\n            return new PaymentResult { Success = true, PaymentId = Guid.NewGuid().ToString() };\n        }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "98d49552-b8b2-4927-b579-57d24136b24d",
            "Name": "INotificationService.cs",
            "ParentId": "c4c15d92-52be-4997-ba33-d4f1ddda4f9e",
            "Type": 1,
            "Text": "namespace MobileBankingToolkit.Infrastructure\n{\n    public interface INotificationService\n    {\n        void SendNotification(string accountId, string message);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "35faa0f9-c8ab-4c9f-8e92-a93419c147e0",
            "Name": "NotificationService.cs",
            "ParentId": "c4c15d92-52be-4997-ba33-d4f1ddda4f9e",
            "Type": 1,
            "Text": "using System;\n\nnamespace MobileBankingToolkit.Infrastructure\n{\n    public class NotificationService : INotificationService\n    {\n        public void SendNotification(string accountId, string message)\n        {\n            // Implementation for sending notifications via SMS, email or push notifications\n            Console.WriteLine($\"Notification sent to account {accountId}: {message}\");\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "a15836a1-7a19-41b5-a3a8-4f7f20881b51",
        "Name": "Utils",
        "ParentId": "6293bd9c-656e-4403-b080-cd1e68ab3cca",
        "Type": 0,
        "Items": [
          {
            "Id": "26cd21b2-350c-4694-b33d-3e733106b038",
            "Name": "SecurityHelper.cs",
            "ParentId": "a15836a1-7a19-41b5-a3a8-4f7f20881b51",
            "Type": 1,
            "Text": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace MobileBankingToolkit.Utils\n{\n    public static class SecurityHelper\n    {\n        public static string HashPassword(string password)\n        {\n            using var sha256 = SHA256.Create();\n            var bytes = Encoding.UTF8.GetBytes(password);\n            var hashBytes = sha256.ComputeHash(bytes);\n            return Convert.ToBase64String(hashBytes);\n        }\n\n        public static bool VerifyPassword(string password, string hash)\n        {\n            var hashedInput = HashPassword(password);\n            return hash == hashedInput;\n        }\n\n        public static string GenerateToken(string accountId)\n        {\n            var tokenPayload = $\"{accountId}:{DateTime.UtcNow.Ticks}\";\n            using var sha256 = SHA256.Create();\n            var bytes = Encoding.UTF8.GetBytes(tokenPayload);\n            var hashBytes = sha256.ComputeHash(bytes);\n            return Convert.ToBase64String(hashBytes);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "f92416f9-4a5b-46e9-b6e9-917ae940ca65",
    "Name": "OnlineBankingPortal",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "e1a34340-369d-4681-b8e0-ef0e0d2f0b41",
        "Name": "Program.cs",
        "ParentId": "f92416f9-4a5b-46e9-b6e9-917ae940ca65",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.IdentityModel.Tokens;\nusing System.Text;\nusing OnlineBankingPortal.Services;\nusing OnlineBankingPortal.Data;\nusing OnlineBankingPortal.Infrastructure;\nusing OnlineBankingPortal.Middleware;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Configure Services\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IUserService, UserService>();\nbuilder.Services.AddSingleton<IAccountService, AccountService>();\nbuilder.Services.AddSingleton<ITransactionService, TransactionService>();\nbuilder.Services.AddSingleton<IUserRepository, UserRepository>();\nbuilder.Services.AddSingleton<IAccountRepository, AccountRepository>();\nbuilder.Services.AddSingleton<ITransactionRepository, TransactionRepository>();\nbuilder.Services.AddSingleton<ILoggerService, LoggerService>();\n\n// Configure JWT Authentication\nvar key = Encoding.ASCII.GetBytes(builder.Configuration[\"Jwt:Key\"]);\nbuilder.Services.AddAuthentication(options =>\n{\n    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n})\n.AddJwtBearer(options =>\n{\n    options.TokenValidationParameters = new TokenValidationParameters\n    {\n        ValidateIssuer = true,\n        ValidateAudience = true,\n        ValidateLifetime = true,\n        ValidateIssuerSigningKey = true,\n        ValidIssuer = builder.Configuration[\"Jwt:Issuer\"],\n        ValidAudience = builder.Configuration[\"Jwt:Audience\"],\n        IssuerSigningKey = new SymmetricSecurityKey(key)\n    };\n});\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\n\n// Global Exception Handling Middleware\napp.UseMiddleware<ExceptionMiddleware>();\n\napp.UseAuthentication();\napp.UseRouting();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "d39f05de-1eac-490d-9a88-5b19616a8c31",
        "Name": "Controllers",
        "ParentId": "f92416f9-4a5b-46e9-b6e9-917ae940ca65",
        "Type": 0,
        "Items": [
          {
            "Id": "2faccc6b-68cf-45ca-af1a-92b787ee822d",
            "Name": "UserController.cs",
            "ParentId": "d39f05de-1eac-490d-9a88-5b19616a8c31",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Configuration;\nusing System;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Security.Claims;\nusing System.Text;\nusing Microsoft.IdentityModel.Tokens;\nusing OnlineBankingPortal.Services;\nusing OnlineBankingPortal.Models;\n\nnamespace OnlineBankingPortal.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class UserController : ControllerBase\n    {\n        private readonly IUserService _userService;\n        private readonly IConfiguration _config;\n\n        public UserController(IUserService userService, IConfiguration config)\n        {\n            _userService = userService;\n            _config = config;\n        }\n\n        [HttpPost(\"register\")]\n        public IActionResult Register([FromBody] UserRegistrationModel registration)\n        {\n            var result = _userService.Register(registration);\n            if (!result.Success)\n            {\n                return BadRequest(result.Message);\n            }\n            return Ok(new { Message = \"Registration successful\" });\n        }\n\n        [HttpPost(\"login\")]\n        public IActionResult Login([FromBody] UserLoginModel login)\n        {\n            var user = _userService.Authenticate(login);\n            if (user == null)\n            {\n                return Unauthorized(\"Invalid credentials\");\n            }\n\n            var tokenHandler = new JwtSecurityTokenHandler();\n            var key = Encoding.ASCII.GetBytes(_config[\"Jwt:Key\"]);\n            var tokenDescriptor = new SecurityTokenDescriptor\n            {\n                Subject = new ClaimsIdentity(new Claim[]\n                {\n                    new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),\n                    new Claim(ClaimTypes.Email, user.Email)\n                }),\n                Expires = DateTime.UtcNow.AddHours(1),\n                Issuer = _config[\"Jwt:Issuer\"],\n                Audience = _config[\"Jwt:Audience\"],\n                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)\n            };\n            var token = tokenHandler.CreateToken(tokenDescriptor);\n            return Ok(new { Token = tokenHandler.WriteToken(token) });\n        }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "0096da53-a7f8-4e86-ba2f-6fba9bc84c34",
            "Name": "AccountController.cs",
            "ParentId": "d39f05de-1eac-490d-9a88-5b19616a8c31",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing OnlineBankingPortal.Services;\nusing OnlineBankingPortal.Models;\n\nnamespace OnlineBankingPortal.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class AccountController : ControllerBase\n    {\n        private readonly IAccountService _accountService;\n\n        public AccountController(IAccountService accountService)\n        {\n            _accountService = accountService;\n        }\n\n        [HttpGet(\"{accountId}\")]\n        public IActionResult GetAccount(string accountId)\n        {\n            var account = _accountService.GetAccount(accountId);\n            if (account == null)\n            {\n                return NotFound(\"Account not found\");\n            }\n            return Ok(account);\n        }\n\n        [HttpPost(\"transfer\")]\n        public IActionResult TransferFunds([FromBody] TransferRequest request)\n        {\n            var result = _accountService.TransferFunds(request);\n            if (!result.Success)\n            {\n                return BadRequest(result.Message);\n            }\n            return Ok(result);\n        }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "c4177df9-d986-4fe3-9d1a-93fee54ccb28",
            "Name": "TransactionController.cs",
            "ParentId": "d39f05de-1eac-490d-9a88-5b19616a8c31",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing OnlineBankingPortal.Services;\nusing OnlineBankingPortal.Models;\n\nnamespace OnlineBankingPortal.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class TransactionController : ControllerBase\n    {\n        private readonly ITransactionService _transactionService;\n\n        public TransactionController(ITransactionService transactionService)\n        {\n            _transactionService = transactionService;\n        }\n\n        [HttpGet(\"history/{accountId}\")]\n        public IActionResult TransactionHistory(string accountId)\n        {\n            var transactions = _transactionService.GetTransactionHistory(accountId);\n            return Ok(transactions);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "c3e8d861-b00a-4427-830e-13dff52549e0",
        "Name": "Services",
        "ParentId": "f92416f9-4a5b-46e9-b6e9-917ae940ca65",
        "Type": 0,
        "Items": [
          {
            "Id": "3cf0586b-b246-4e25-bdf4-d2a19bda1a7d",
            "Name": "IUserService.cs",
            "ParentId": "c3e8d861-b00a-4427-830e-13dff52549e0",
            "Type": 1,
            "Text": "using OnlineBankingPortal.Models;\n\nnamespace OnlineBankingPortal.Services\n{\n    public interface IUserService\n    {\n        UserModel Authenticate(UserLoginModel login);\n        OperationResult Register(UserRegistrationModel registration);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "b1151390-a761-4aad-ad8a-77cced667e05",
            "Name": "UserService.cs",
            "ParentId": "c3e8d861-b00a-4427-830e-13dff52549e0",
            "Type": 1,
            "Text": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\nusing OnlineBankingPortal.Models;\nusing OnlineBankingPortal.Data;\n\nnamespace OnlineBankingPortal.Services\n{\n    public class UserService : IUserService\n    {\n        private readonly IUserRepository _userRepository;\n\n        public UserService(IUserRepository userRepository)\n        {\n            _userRepository = userRepository;\n        }\n\n        public UserModel Authenticate(UserLoginModel login)\n        {\n            var user = _userRepository.GetUserByEmail(login.Email);\n            if (user == null)\n                return null;\n            var hashedPassword = ComputeSha256Hash(login.Password);\n            if (user.PasswordHash != hashedPassword)\n                return null;\n\n            return user;\n        }\n\n        public OperationResult Register(UserRegistrationModel registration)\n        {\n            if (_userRepository.GetUserByEmail(registration.Email) != null)\n                return new OperationResult { Success = false, Message = \"Email already registered\" };\n\n            var newUser = new UserModel\n            {\n                Id = Guid.NewGuid(),\n                Email = registration.Email,\n                FullName = registration.FullName,\n                PasswordHash = ComputeSha256Hash(registration.Password),\n                CreatedAt = DateTime.UtcNow\n            };\n            _userRepository.AddUser(newUser);\n            return new OperationResult { Success = true, Message = \"User registered successfully\" };\n        }\n\n        private string ComputeSha256Hash(string rawData)\n        {\n            using (var sha256Hash = SHA256.Create())\n            {\n                var bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));\n                var builder = new StringBuilder();\n                foreach (var b in bytes)\n                {\n                    builder.Append(b.ToString(\"x2\"));\n                }\n                return builder.ToString();\n            }\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "6b2992ca-454f-4e64-81e6-a76ff2db4a34",
            "Name": "IAccountService.cs",
            "ParentId": "c3e8d861-b00a-4427-830e-13dff52549e0",
            "Type": 1,
            "Text": "using OnlineBankingPortal.Models;\n\nnamespace OnlineBankingPortal.Services\n{\n    public interface IAccountService\n    {\n        AccountModel GetAccount(string accountId);\n        OperationResult TransferFunds(TransferRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "11bf5cc5-be89-46b0-b74e-4e885a1ee22b",
            "Name": "AccountService.cs",
            "ParentId": "c3e8d861-b00a-4427-830e-13dff52549e0",
            "Type": 1,
            "Text": "using System;\nusing OnlineBankingPortal.Models;\nusing OnlineBankingPortal.Data;\n\nnamespace OnlineBankingPortal.Services\n{\n    public class AccountService : IAccountService\n    {\n        private readonly IAccountRepository _accountRepository;\n        private readonly IUserRepository _userRepository;\n\n        public AccountService(IAccountRepository accountRepository, IUserRepository userRepository)\n        {\n            _accountRepository = accountRepository;\n            _userRepository = userRepository;\n        }\n\n        public AccountModel GetAccount(string accountId)\n        {\n            return _accountRepository.GetAccountById(accountId);\n        }\n\n        public OperationResult TransferFunds(TransferRequest request)\n        {\n            var fromAccount = _accountRepository.GetAccountById(request.FromAccountId);\n            var toAccount = _accountRepository.GetAccountById(request.ToAccountId);\n\n            if (fromAccount == null || toAccount == null)\n            {\n                return new OperationResult { Success = false, Message = \"One or both accounts not found\" };\n            }\n\n            if (fromAccount.Balance < request.Amount)\n            {\n                return new OperationResult { Success = false, Message = \"Insufficient funds\" };\n            }\n\n            fromAccount.Balance -= request.Amount;\n            toAccount.Balance += request.Amount;\n\n            _accountRepository.UpdateAccount(fromAccount);\n            _accountRepository.UpdateAccount(toAccount);\n\n            return new OperationResult { Success = true, Message = \"Transfer completed successfully\" };\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "987458ac-b501-4e21-81d4-83c25fc80983",
            "Name": "ITransactionService.cs",
            "ParentId": "c3e8d861-b00a-4427-830e-13dff52549e0",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing OnlineBankingPortal.Models;\n\nnamespace OnlineBankingPortal.Services\n{\n    public interface ITransactionService\n    {\n        List<TransactionModel> GetTransactionHistory(string accountId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "804bc2f9-0509-4bb2-91b9-c784d5378d72",
            "Name": "TransactionService.cs",
            "ParentId": "c3e8d861-b00a-4427-830e-13dff52549e0",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing OnlineBankingPortal.Models;\nusing OnlineBankingPortal.Data;\n\nnamespace OnlineBankingPortal.Services\n{\n    public class TransactionService : ITransactionService\n    {\n        private readonly ITransactionRepository _transactionRepository;\n\n        public TransactionService(ITransactionRepository transactionRepository)\n        {\n            _transactionRepository = transactionRepository;\n        }\n\n        public List<TransactionModel> GetTransactionHistory(string accountId)\n        {\n            return _transactionRepository.GetTransactionsByAccount(accountId);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "02530c37-5cb9-4127-bbce-1753c5f09fd4",
        "Name": "Models",
        "ParentId": "f92416f9-4a5b-46e9-b6e9-917ae940ca65",
        "Type": 0,
        "Items": [
          {
            "Id": "5cfe1ca6-fd46-4dce-bcee-dd901587ca57",
            "Name": "UserModel.cs",
            "ParentId": "02530c37-5cb9-4127-bbce-1753c5f09fd4",
            "Type": 1,
            "Text": "using System;\n\nnamespace OnlineBankingPortal.Models\n{\n    public class UserModel\n    {\n        public Guid Id { get; set; }\n        public string FullName { get; set; }\n        public string Email { get; set; }\n        public string PasswordHash { get; set; }\n        public DateTime CreatedAt { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "188d0b3d-032b-4006-b312-2ed47a5abccb",
            "Name": "UserRegistrationModel.cs",
            "ParentId": "02530c37-5cb9-4127-bbce-1753c5f09fd4",
            "Type": 1,
            "Text": "namespace OnlineBankingPortal.Models\n{\n    public class UserRegistrationModel\n    {\n        public string FullName { get; set; }\n        public string Email { get; set; }\n        public string Password { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "d5383c44-f66d-419f-bd3c-2358091174fd",
            "Name": "UserLoginModel.cs",
            "ParentId": "02530c37-5cb9-4127-bbce-1753c5f09fd4",
            "Type": 1,
            "Text": "namespace OnlineBankingPortal.Models\n{\n    public class UserLoginModel\n    {\n        public string Email { get; set; }\n        public string Password { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "c9cf50ef-70a0-4ca9-bbf4-af9fb5cdd1d9",
            "Name": "AccountModel.cs",
            "ParentId": "02530c37-5cb9-4127-bbce-1753c5f09fd4",
            "Type": 1,
            "Text": "namespace OnlineBankingPortal.Models\n{\n    public class AccountModel\n    {\n        public string AccountId { get; set; }\n        public string UserId { get; set; }\n        public decimal Balance { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "41ec31d7-ba73-496b-b1d5-f5bfd0851e13",
            "Name": "TransferRequest.cs",
            "ParentId": "02530c37-5cb9-4127-bbce-1753c5f09fd4",
            "Type": 1,
            "Text": "namespace OnlineBankingPortal.Models\n{\n    public class TransferRequest\n    {\n        public string FromAccountId { get; set; }\n        public string ToAccountId { get; set; }\n        public decimal Amount { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "dc658be1-e8a0-441a-b901-f7a6d00c72ed",
            "Name": "TransactionModel.cs",
            "ParentId": "02530c37-5cb9-4127-bbce-1753c5f09fd4",
            "Type": 1,
            "Text": "using System;\n\nnamespace OnlineBankingPortal.Models\n{\n    public class TransactionModel\n    {\n        public string TransactionId { get; set; }\n        public string AccountId { get; set; }\n        public decimal Amount { get; set; }\n        public DateTime Timestamp { get; set; }\n        public string Description { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "2ccb825b-95e6-4bde-b50c-f9a321356cf9",
            "Name": "OperationResult.cs",
            "ParentId": "02530c37-5cb9-4127-bbce-1753c5f09fd4",
            "Type": 1,
            "Text": "namespace OnlineBankingPortal.Models\n{\n    public class OperationResult\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "4264e2a8-9bd1-4744-b9bc-4c7f4d7ca577",
        "Name": "Data",
        "ParentId": "f92416f9-4a5b-46e9-b6e9-917ae940ca65",
        "Type": 0,
        "Items": [
          {
            "Id": "7d56531a-b4bb-44e5-807a-b496c66fc580",
            "Name": "IUserRepository.cs",
            "ParentId": "4264e2a8-9bd1-4744-b9bc-4c7f4d7ca577",
            "Type": 1,
            "Text": "using OnlineBankingPortal.Models;\n\nnamespace OnlineBankingPortal.Data\n{\n    public interface IUserRepository\n    {\n        UserModel GetUserByEmail(string email);\n        void AddUser(UserModel user);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e5a38d1f-3579-40a4-91dc-451b57f2a34c",
            "Name": "UserRepository.cs",
            "ParentId": "4264e2a8-9bd1-4744-b9bc-4c7f4d7ca577",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing OnlineBankingPortal.Models;\n\nnamespace OnlineBankingPortal.Data\n{\n    public class UserRepository : IUserRepository\n    {\n        private readonly ConcurrentDictionary<string, UserModel> _users = new ConcurrentDictionary<string, UserModel>();\n\n        public UserModel GetUserByEmail(string email)\n        {\n            _users.TryGetValue(email.ToLower(), out var user);\n            return user;\n        }\n\n        public void AddUser(UserModel user)\n        {\n            _users[user.Email.ToLower()] = user;\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "7921669e-7301-4308-b94c-a5a509cf7e86",
            "Name": "IAccountRepository.cs",
            "ParentId": "4264e2a8-9bd1-4744-b9bc-4c7f4d7ca577",
            "Type": 1,
            "Text": "using OnlineBankingPortal.Models;\n\nnamespace OnlineBankingPortal.Data\n{\n    public interface IAccountRepository\n    {\n        AccountModel GetAccountById(string accountId);\n        void UpdateAccount(AccountModel account);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "5f0c2318-c6a8-4e31-8583-95998ead9632",
            "Name": "AccountRepository.cs",
            "ParentId": "4264e2a8-9bd1-4744-b9bc-4c7f4d7ca577",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing OnlineBankingPortal.Models;\n\nnamespace OnlineBankingPortal.Data\n{\n    public class AccountRepository : IAccountRepository\n    {\n        private readonly ConcurrentDictionary<string, AccountModel> _accounts = new ConcurrentDictionary<string, AccountModel>();\n\n        public AccountModel GetAccountById(string accountId)\n        {\n            _accounts.TryGetValue(accountId, out var account);\n            return account;\n        }\n\n        public void UpdateAccount(AccountModel account)\n        {\n            _accounts[account.AccountId] = account;\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "729a7487-2273-48b0-b15c-cf57e715b13a",
            "Name": "ITransactionRepository.cs",
            "ParentId": "4264e2a8-9bd1-4744-b9bc-4c7f4d7ca577",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing OnlineBankingPortal.Models;\n\nnamespace OnlineBankingPortal.Data\n{\n    public interface ITransactionRepository\n    {\n        List<TransactionModel> GetTransactionsByAccount(string accountId);\n        void AddTransaction(TransactionModel transaction);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e762cca2-ccee-4472-bd75-bde8050fece7",
            "Name": "TransactionRepository.cs",
            "ParentId": "4264e2a8-9bd1-4744-b9bc-4c7f4d7ca577",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Linq;\nusing OnlineBankingPortal.Models;\n\nnamespace OnlineBankingPortal.Data\n{\n    public class TransactionRepository : ITransactionRepository\n    {\n        private readonly ConcurrentBag<TransactionModel> _transactions = new ConcurrentBag<TransactionModel>();\n\n        public List<TransactionModel> GetTransactionsByAccount(string accountId)\n        {\n            return _transactions.Where(t => t.AccountId == accountId).OrderByDescending(t => t.Timestamp).ToList();\n        }\n\n        public void AddTransaction(TransactionModel transaction)\n        {\n            _transactions.Add(transaction);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "06cfc610-d3e9-48bd-b53e-a98aa1b530bc",
        "Name": "Infrastructure",
        "ParentId": "f92416f9-4a5b-46e9-b6e9-917ae940ca65",
        "Type": 0,
        "Items": [
          {
            "Id": "daa2bd5a-1386-4b79-b162-38bf95a8da17",
            "Name": "LoggerService.cs",
            "ParentId": "06cfc610-d3e9-48bd-b53e-a98aa1b530bc",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace OnlineBankingPortal.Infrastructure\n{\n    public interface ILoggerService\n    {\n        void LogInformation(string message);\n        void LogError(string message, Exception ex);\n    }\n\n    public class LoggerService : ILoggerService\n    {\n        private readonly ILogger<LoggerService> _logger;\n        \n        public LoggerService(ILogger<LoggerService> logger)\n        {\n            _logger = logger;\n        }\n        \n        public void LogInformation(string message)\n        {\n            _logger.LogInformation(message);\n        }\n        \n        public void LogError(string message, Exception ex)\n        {\n            _logger.LogError(ex, message);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "b9f4b701-b25c-4756-8e9a-c78418020c4c",
        "Name": "Middleware",
        "ParentId": "f92416f9-4a5b-46e9-b6e9-917ae940ca65",
        "Type": 0,
        "Items": [
          {
            "Id": "fbc96ea2-1141-4af4-bb7a-60a39247e416",
            "Name": "ExceptionMiddleware.cs",
            "ParentId": "b9f4b701-b25c-4756-8e9a-c78418020c4c",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Http;\nusing System;\nusing System.Net;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing OnlineBankingPortal.Infrastructure;\n\nnamespace OnlineBankingPortal.Middleware\n{\n    public class ExceptionMiddleware\n    {\n        private readonly RequestDelegate _next;\n        private readonly ILoggerService _logger;\n        \n        public ExceptionMiddleware(RequestDelegate next, ILoggerService logger)\n        {\n            _next = next;\n            _logger = logger;\n        }\n        \n        public async Task InvokeAsync(HttpContext httpContext)\n        {\n            try\n            {\n                await _next(httpContext);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"Unhandled exception\", ex);\n                await HandleExceptionAsync(httpContext, ex);\n            }\n        }\n        \n        private Task HandleExceptionAsync(HttpContext context, Exception exception)\n        {\n            context.Response.ContentType = \"application/json\";\n            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;\n            var response = new { StatusCode = context.Response.StatusCode, Message = \"Internal Server Error\" };\n            return context.Response.WriteAsync(JsonSerializer.Serialize(response));\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "864577ba-a97c-410b-9f21-ffbe6c77e70e",
    "Name": "TransactionMonitoringService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "4f669849-ee21-4775-912c-c5cf041bb442",
        "Name": "Program.cs",
        "ParentId": "864577ba-a97c-410b-9f21-ffbe6c77e70e",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing TransactionMonitoringService.Controllers;\nusing TransactionMonitoringService.Services;\nusing TransactionMonitoringService.Infrastructure;\nusing TransactionMonitoringService.Workers;\n\nnamespace TransactionMonitoringService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = WebApplication.CreateBuilder(args);\n\n            builder.Services.AddControllers();\n            builder.Services.AddSingleton<ITransactionMonitoringService, TransactionMonitoringService.Services.TransactionMonitoringService>();\n            builder.Services.AddSingleton<ITransactionRepository, TransactionRepository>();\n            builder.Services.AddHostedService<TransactionMonitorWorker>();\n            builder.Services.AddLogging();\n\n            var app = builder.Build();\n            \n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n\n            app.Run();\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "63be975b-540b-42d2-9b6a-1521cfca3f82",
        "Name": "Controllers",
        "ParentId": "864577ba-a97c-410b-9f21-ffbe6c77e70e",
        "Type": 0,
        "Items": [
          {
            "Id": "6db5019e-13d4-4f38-93f4-62f708ecec5b",
            "Name": "TransactionController.cs",
            "ParentId": "63be975b-540b-42d2-9b6a-1521cfca3f82",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing TransactionMonitoringService.Models;\nusing TransactionMonitoringService.Services;\n\nnamespace TransactionMonitoringService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TransactionController : ControllerBase\n    {\n        private readonly ITransactionMonitoringService _monitoringService;\n\n        public TransactionController(ITransactionMonitoringService monitoringService)\n        {\n            _monitoringService = monitoringService;\n        }\n\n        [HttpPost(\"process\")]\n        public async Task<IActionResult> ProcessTransaction([FromBody] Transaction transaction)\n        {\n            if (transaction == null)\n            {\n                return BadRequest(\"Invalid transaction data.\");\n            }\n            \n            var alert = await _monitoringService.ProcessTransactionAsync(transaction);\n            \n            if (alert != null)\n            {\n                return Ok(alert);\n            }\n            \n            return Ok(new { Message = \"Transaction processed without alerts.\" });\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "97475c19-a2ad-4613-978f-d2f91599b0b5",
        "Name": "Services",
        "ParentId": "864577ba-a97c-410b-9f21-ffbe6c77e70e",
        "Type": 0,
        "Items": [
          {
            "Id": "650b788d-1a0e-42b2-a0e6-ec55a955ca2f",
            "Name": "ITransactionMonitoringService.cs",
            "ParentId": "97475c19-a2ad-4613-978f-d2f91599b0b5",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing TransactionMonitoringService.Models;\n\nnamespace TransactionMonitoringService.Services\n{\n    public interface ITransactionMonitoringService\n    {\n        Task<Alert> ProcessTransactionAsync(Transaction transaction);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "565d98e7-5fa1-460b-af9a-c750a8ff7b09",
            "Name": "TransactionMonitoringService.cs",
            "ParentId": "97475c19-a2ad-4613-978f-d2f91599b0b5",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing TransactionMonitoringService.Models;\nusing TransactionMonitoringService.Infrastructure;\nusing TransactionMonitoringService.Utilities;\n\nnamespace TransactionMonitoringService.Services\n{\n    public class TransactionMonitoringService : ITransactionMonitoringService\n    {\n        private readonly ITransactionRepository _repository;\n\n        public TransactionMonitoringService(ITransactionRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public async Task<Alert> ProcessTransactionAsync(Transaction transaction)\n        {\n            // Store the transaction\n            _repository.AddTransaction(transaction);\n\n            // Evaluate transaction using business rules\n            Alert alert = RuleEvaluator.Evaluate(transaction);\n            \n            if (alert != null)\n            {\n                _repository.AddAlert(alert);\n            }\n            \n            return await Task.FromResult(alert);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "d518bc75-881d-4ff9-b4af-cec22af3bbfa",
        "Name": "Workers",
        "ParentId": "864577ba-a97c-410b-9f21-ffbe6c77e70e",
        "Type": 0,
        "Items": [
          {
            "Id": "1b0d1c47-a789-4db5-b601-e42411b6126d",
            "Name": "TransactionMonitorWorker.cs",
            "ParentId": "d518bc75-881d-4ff9-b4af-cec22af3bbfa",
            "Type": 1,
            "Text": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing TransactionMonitoringService.Infrastructure;\n\nnamespace TransactionMonitoringService.Workers\n{\n    public class TransactionMonitorWorker : BackgroundService\n    {\n        private readonly ITransactionRepository _repository;\n        private readonly ILogger<TransactionMonitorWorker> _logger;\n\n        public TransactionMonitorWorker(ITransactionRepository repository, ILogger<TransactionMonitorWorker> logger)\n        {\n            _repository = repository;\n            _logger = logger;\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                var transactionCount = _repository.GetTransactions().Count;\n                var alertCount = _repository.GetAlerts().Count;\n                \n                _logger.LogInformation($\"[MonitorWorker] Transactions stored: {transactionCount}, Alerts generated: {alertCount} at {DateTime.UtcNow}\");\n                \n                await Task.Delay(TimeSpan.FromSeconds(30), stoppingToken);\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "b4e13166-bca3-4e57-aa2e-f14b5e733d49",
        "Name": "Models",
        "ParentId": "864577ba-a97c-410b-9f21-ffbe6c77e70e",
        "Type": 0,
        "Items": [
          {
            "Id": "c66fa9c6-68c6-4207-ab7c-e7314421dc02",
            "Name": "Transaction.cs",
            "ParentId": "b4e13166-bca3-4e57-aa2e-f14b5e733d49",
            "Type": 1,
            "Text": "using System;\n\nnamespace TransactionMonitoringService.Models\n{\n    public class Transaction\n    {\n        public Guid TransactionId { get; set; } = Guid.NewGuid();\n        public decimal Amount { get; set; }\n        public string FromAccount { get; set; }\n        public string ToAccount { get; set; }\n        public DateTime Timestamp { get; set; } = DateTime.UtcNow;\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "98bee48a-36ad-45d0-8e0f-aea1240b832f",
            "Name": "Alert.cs",
            "ParentId": "b4e13166-bca3-4e57-aa2e-f14b5e733d49",
            "Type": 1,
            "Text": "using System;\n\nnamespace TransactionMonitoringService.Models\n{\n    public class Alert\n    {\n        public Guid AlertId { get; set; } = Guid.NewGuid();\n        public Guid TransactionId { get; set; }\n        public string Message { get; set; }\n        public AlertSeverity Severity { get; set; }\n        public DateTime Timestamp { get; set; } = DateTime.UtcNow;\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "99b78366-ab96-470e-83bc-4adc0fab941e",
            "Name": "AlertSeverity.cs",
            "ParentId": "b4e13166-bca3-4e57-aa2e-f14b5e733d49",
            "Type": 1,
            "Text": "namespace TransactionMonitoringService.Models\n{\n    public enum AlertSeverity\n    {\n        Low,\n        Medium,\n        High,\n        Critical\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "f9ac6de6-0d23-47ec-94ff-b0148e66190c",
        "Name": "Infrastructure",
        "ParentId": "864577ba-a97c-410b-9f21-ffbe6c77e70e",
        "Type": 0,
        "Items": [
          {
            "Id": "7208c727-d7f4-4480-8e85-7262809ee54a",
            "Name": "ITransactionRepository.cs",
            "ParentId": "f9ac6de6-0d23-47ec-94ff-b0148e66190c",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing TransactionMonitoringService.Models;\n\nnamespace TransactionMonitoringService.Infrastructure\n{\n    public interface ITransactionRepository\n    {\n        void AddTransaction(Transaction transaction);\n        IList<Transaction> GetTransactions();\n        void AddAlert(Models.Alert alert);\n        IList<Models.Alert> GetAlerts();\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "50528b93-c808-4598-b5a6-c446d3f8e846",
            "Name": "TransactionRepository.cs",
            "ParentId": "f9ac6de6-0d23-47ec-94ff-b0148e66190c",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing TransactionMonitoringService.Models;\n\nnamespace TransactionMonitoringService.Infrastructure\n{\n    public class TransactionRepository : ITransactionRepository\n    {\n        private readonly ConcurrentBag<Transaction> _transactions = new ConcurrentBag<Transaction>();\n        private readonly ConcurrentBag<Alert> _alerts = new ConcurrentBag<Alert>();\n\n        public void AddTransaction(Transaction transaction)\n        {\n            _transactions.Add(transaction);\n        }\n\n        public IList<Transaction> GetTransactions()\n        {\n            return new List<Transaction>(_transactions);\n        }\n\n        public void AddAlert(Alert alert)\n        {\n            _alerts.Add(alert);\n        }\n\n        public IList<Alert> GetAlerts()\n        {\n            return new List<Alert>(_alerts);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "21c38c62-144f-45c8-8114-27baa0eae4f2",
        "Name": "Utilities",
        "ParentId": "864577ba-a97c-410b-9f21-ffbe6c77e70e",
        "Type": 0,
        "Items": [
          {
            "Id": "e88531b0-d5ed-4924-b928-39565afb6dce",
            "Name": "RuleEvaluator.cs",
            "ParentId": "21c38c62-144f-45c8-8114-27baa0eae4f2",
            "Type": 1,
            "Text": "using System;\nusing TransactionMonitoringService.Models;\n\nnamespace TransactionMonitoringService.Utilities\n{\n    public static class RuleEvaluator\n    {\n        public static Alert Evaluate(Transaction transaction)\n        {\n            // Evaluate transaction rules to detect irregularities\n            // High amount transactions and self-transfer scenarios are flagged.\n            if (transaction.Amount > 10000m)\n            {\n                return new Alert\n                {\n                    TransactionId = transaction.TransactionId,\n                    Message = $\"Transaction amount {transaction.Amount} exceeds threshold.\",\n                    Severity = AlertSeverity.High\n                };\n            }\n            \n            if (!string.IsNullOrEmpty(transaction.FromAccount) && transaction.FromAccount == transaction.ToAccount)\n            {\n                return new Alert\n                {\n                    TransactionId = transaction.TransactionId,\n                    Message = \"Transaction from and to the same account detected.\",\n                    Severity = AlertSeverity.Critical\n                };\n            }\n            \n            // Additional business rules can be implemented here.\n            \n            return null;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "c97c9e40-9ad2-4902-8148-06024c9279d2",
    "Name": "BatchProcessingEngine",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "daa0bc2c-e292-4cd3-9675-9b8775373063",
        "Name": "Program.cs",
        "ParentId": "c97c9e40-9ad2-4902-8148-06024c9279d2",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.DependencyInjection;\nusing BatchProcessingEngine.BatchJobs;\nusing BatchProcessingEngine.Services;\nusing BatchProcessingEngine.Infrastructure;\nusing Microsoft.Extensions.Configuration;\n\nnamespace BatchProcessingEngine\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureServices((hostContext, services) =>\n                {\n                    // Register configuration and logging\n                    services.AddHostedService<BatchJobWorker>();\n                    services.AddSingleton<IBatchProcessor, BatchProcessor>();\n                    services.AddSingleton<ITransactionRepository, TransactionRepository>();\n                })\n                .ConfigureLogging(logging =>\n                {\n                    logging.ClearProviders();\n                    logging.AddConsole();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3b82f5a8-2fac-4ba2-ab28-e531f6222b42",
        "Name": "BatchJobs",
        "ParentId": "c97c9e40-9ad2-4902-8148-06024c9279d2",
        "Type": 0,
        "Items": [
          {
            "Id": "c7639c29-6adb-459e-a1a3-ddb54bf10f31",
            "Name": "BatchJobWorker.cs",
            "ParentId": "3b82f5a8-2fac-4ba2-ab28-e531f6222b42",
            "Type": 1,
            "Text": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing BatchProcessingEngine.Services;\n\nnamespace BatchProcessingEngine.BatchJobs\n{\n    public class BatchJobWorker : BackgroundService\n    {\n        private readonly ILogger<BatchJobWorker> _logger;\n        private readonly IBatchProcessor _batchProcessor;\n\n        public BatchJobWorker(ILogger<BatchJobWorker> logger, IBatchProcessor batchProcessor)\n        {\n            _logger = logger;\n            _batchProcessor = batchProcessor;\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            _logger.LogInformation(\"Batch job worker started.\");\n\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                try\n                {\n                    await _batchProcessor.ProcessBatchAsync(stoppingToken);\n                    _logger.LogInformation(\"Batch processed successfully.\");\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"Error occurred during batch processing.\");\n                }\n\n                // Wait for 5 minutes before the next batch execution\n                await Task.Delay(TimeSpan.FromMinutes(5), stoppingToken);\n            }\n\n            _logger.LogInformation(\"Batch job worker stopping.\");\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "b965140f-5f69-42b5-ae12-757e02d65a41",
        "Name": "Services",
        "ParentId": "c97c9e40-9ad2-4902-8148-06024c9279d2",
        "Type": 0,
        "Items": [
          {
            "Id": "ff8383f8-de52-4bea-831e-2d56d983ebfe",
            "Name": "IBatchProcessor.cs",
            "ParentId": "b965140f-5f69-42b5-ae12-757e02d65a41",
            "Type": 1,
            "Text": "using System.Threading;\nusing System.Threading.Tasks;\n\nnamespace BatchProcessingEngine.Services\n{\n    public interface IBatchProcessor\n    {\n        Task ProcessBatchAsync(CancellationToken cancellationToken);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "cec641d7-0bb9-4b2f-8e68-ffb5eb32e8eb",
            "Name": "BatchProcessor.cs",
            "ParentId": "b965140f-5f69-42b5-ae12-757e02d65a41",
            "Type": 1,
            "Text": "using System;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing BatchProcessingEngine.Models;\nusing BatchProcessingEngine.Infrastructure;\nusing Microsoft.Extensions.Logging;\n\nnamespace BatchProcessingEngine.Services\n{\n    public class BatchProcessor : IBatchProcessor\n    {\n        private readonly ITransactionRepository _transactionRepo;\n        private readonly ILogger<BatchProcessor> _logger;\n\n        public BatchProcessor(ITransactionRepository transactionRepo, ILogger<BatchProcessor> logger)\n        {\n            _transactionRepo = transactionRepo;\n            _logger = logger;\n        }\n\n        public async Task ProcessBatchAsync(CancellationToken cancellationToken)\n        {\n            // Retrieve pending transactions from the repository\n            IEnumerable<Transaction> transactions = await _transactionRepo.GetPendingTransactionsAsync();\n            if (transactions.Any())\n            {\n                _logger.LogInformation($\"Processing {transactions.Count()} transactions.\");\n                List<Transaction> processedTransactions = new List<Transaction>();\n\n                foreach (var tx in transactions)\n                {\n                    if (ProcessTransaction(tx))\n                    {\n                        tx.Status = \"Processed\";\n                    }\n                    else\n                    {\n                        tx.Status = \"Failed\";\n                    }\n                    processedTransactions.Add(tx);\n                }\n\n                await _transactionRepo.UpdateTransactionsAsync(processedTransactions);\n            }\n            else\n            {\n                _logger.LogInformation(\"No pending transactions found.\");\n            }\n        }\n\n        private bool ProcessTransaction(Transaction transaction)\n        {\n            try\n            {\n                // Implement robust business logic here.\n                // For instance, ensure the transaction amount is positive and meets business criteria.\n                return transaction.Amount > 0;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, $\"Error processing transaction {transaction.TransactionId}\");\n                return false;\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "1e8f2600-9e45-4e68-984b-f021c46195a7",
        "Name": "Models",
        "ParentId": "c97c9e40-9ad2-4902-8148-06024c9279d2",
        "Type": 0,
        "Items": [
          {
            "Id": "771f533d-b026-4ccf-9087-4cc28e931f56",
            "Name": "Transaction.cs",
            "ParentId": "1e8f2600-9e45-4e68-984b-f021c46195a7",
            "Type": 1,
            "Text": "using System;\n\nnamespace BatchProcessingEngine.Models\n{\n    public class Transaction\n    {\n        public Guid TransactionId { get; set; } = Guid.NewGuid();\n        public decimal Amount { get; set; }\n        public DateTime TransactionDate { get; set; } = DateTime.UtcNow;\n        public string Status { get; set; } = \"Pending\";\n        public string AccountNumber { get; set; }\n        public string Description { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "155f6c06-e3c9-4e35-9b48-11174bab807b",
            "Name": "BatchResult.cs",
            "ParentId": "1e8f2600-9e45-4e68-984b-f021c46195a7",
            "Type": 1,
            "Text": "using System;\n\nnamespace BatchProcessingEngine.Models\n{\n    public class BatchResult\n    {\n        public int TotalTransactions { get; set; }\n        public int SuccessfulTransactions { get; set; }\n        public int FailedTransactions { get; set; }\n        public DateTime ProcessedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "82f8467b-d857-4fd8-b3a2-dd9185d7e6ce",
        "Name": "Infrastructure",
        "ParentId": "c97c9e40-9ad2-4902-8148-06024c9279d2",
        "Type": 0,
        "Items": [
          {
            "Id": "71a41bee-9349-4f19-b3b1-20e121315659",
            "Name": "ITransactionRepository.cs",
            "ParentId": "82f8467b-d857-4fd8-b3a2-dd9185d7e6ce",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing BatchProcessingEngine.Models;\n\nnamespace BatchProcessingEngine.Infrastructure\n{\n    public interface ITransactionRepository\n    {\n        Task<IEnumerable<Transaction>> GetPendingTransactionsAsync();\n        Task UpdateTransactionsAsync(IEnumerable<Transaction> transactions);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "0f863a06-6e16-404a-8ec6-e53e9b3046a3",
            "Name": "TransactionRepository.cs",
            "ParentId": "82f8467b-d857-4fd8-b3a2-dd9185d7e6ce",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing BatchProcessingEngine.Models;\nusing System.Data;\nusing System.Data.SqlClient;\nusing Microsoft.Extensions.Configuration;\nusing Dapper;\n\nnamespace BatchProcessingEngine.Infrastructure\n{\n    public class TransactionRepository : ITransactionRepository\n    {\n        private readonly string _connectionString;\n\n        public TransactionRepository(IConfiguration configuration)\n        {\n            _connectionString = configuration.GetConnectionString(\"DefaultConnection\");\n        }\n\n        public async Task<IEnumerable<Transaction>> GetPendingTransactionsAsync()\n        {\n            using (IDbConnection db = new SqlConnection(_connectionString))\n            {\n                string query = \"SELECT TransactionId, Amount, TransactionDate, Status, AccountNumber, Description FROM Transactions WHERE Status = @Status\";\n                var transactions = await db.QueryAsync<Transaction>(query, new { Status = \"Pending\" });\n                return transactions;\n            }\n        }\n\n        public async Task UpdateTransactionsAsync(IEnumerable<Transaction> transactions)\n        {\n            using (IDbConnection db = new SqlConnection(_connectionString))\n            {\n                string query = \"UPDATE Transactions SET Status = @Status WHERE TransactionId = @TransactionId\";\n                foreach (var tx in transactions)\n                {\n                    await db.ExecuteAsync(query, new { Status = tx.Status, TransactionId = tx.TransactionId });\n                }\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "fb727ef1-922a-40ea-aef1-fed7ecc49586",
    "Name": "RealTimeAlertSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "bcc39f86-0e50-4e83-a790-85bf8d23bc00",
        "Name": "Program.cs",
        "ParentId": "fb727ef1-922a-40ea-aef1-fed7ecc49586",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing RealTimeAlertSystem.Services;\nusing RealTimeAlertSystem.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Configure services\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IAlertService, AlertService>();\nbuilder.Services.AddHttpClient();\nbuilder.Services.AddSingleton<IAlertDispatcher, AlertDispatcher>();\nbuilder.Services.AddLogging();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "9f15344b-4d90-449c-b82e-facda7c9715a",
        "Name": "Controllers",
        "ParentId": "fb727ef1-922a-40ea-aef1-fed7ecc49586",
        "Type": 0,
        "Items": [
          {
            "Id": "8d8c8c56-8d88-45f6-a3e4-2952ad887ee3",
            "Name": "AlertController.cs",
            "ParentId": "9f15344b-4d90-449c-b82e-facda7c9715a",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing RealTimeAlertSystem.Models;\nusing RealTimeAlertSystem.Services;\nusing System.Threading.Tasks;\n\nnamespace RealTimeAlertSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class AlertController : ControllerBase\n    {\n        private readonly IAlertService _alertService;\n\n        public AlertController(IAlertService alertService)\n        {\n            _alertService = alertService;\n        }\n\n        [HttpPost(\"send\")]\n        public async Task<IActionResult> SendAlert([FromBody] AlertRequest request)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(ModelState);\n            }\n\n            var response = await _alertService.SendAlertAsync(request);\n            if (response.Success)\n            {\n                return Ok(response);\n            }\n            return StatusCode(500, response);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "7518ed54-5206-4d12-922e-d20da38c908d",
        "Name": "Services",
        "ParentId": "fb727ef1-922a-40ea-aef1-fed7ecc49586",
        "Type": 0,
        "Items": [
          {
            "Id": "0aeb8ee5-8ce8-4c01-8f16-edd3f86068ee",
            "Name": "IAlertService.cs",
            "ParentId": "7518ed54-5206-4d12-922e-d20da38c908d",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing RealTimeAlertSystem.Models;\n\nnamespace RealTimeAlertSystem.Services\n{\n    public interface IAlertService\n    {\n        Task<AlertResponse> SendAlertAsync(AlertRequest request);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "3e4f1367-ce1a-447a-846b-92c3f7c8ffaf",
            "Name": "AlertService.cs",
            "ParentId": "7518ed54-5206-4d12-922e-d20da38c908d",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing RealTimeAlertSystem.Models;\nusing RealTimeAlertSystem.Infrastructure;\nusing Microsoft.Extensions.Logging;\n\nnamespace RealTimeAlertSystem.Services\n{\n    public class AlertService : IAlertService\n    {\n        private readonly IAlertDispatcher _alertDispatcher;\n        private readonly ILogger<AlertService> _logger;\n\n        public AlertService(IAlertDispatcher alertDispatcher, ILogger<AlertService> logger)\n        {\n            _alertDispatcher = alertDispatcher;\n            _logger = logger;\n        }\n\n        public async Task<AlertResponse> SendAlertAsync(AlertRequest request)\n        {\n            try\n            {\n                if (string.IsNullOrWhiteSpace(request.Message))\n                {\n                    return new AlertResponse { Success = false, ErrorMessage = \"Alert message cannot be empty.\" };\n                }\n\n                var alert = new Alert\n                {\n                    AlertId = Guid.NewGuid(),\n                    AlertType = request.AlertType,\n                    Message = request.Message,\n                    Severity = request.Severity,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                var result = await _alertDispatcher.DispatchAlertAsync(alert);\n\n                _logger.LogInformation(\"Alert {AlertId} dispatched with status: {Status}\", alert.AlertId, result);\n\n                return new AlertResponse { Success = result, AlertId = alert.AlertId };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error sending alert\");\n                return new AlertResponse { Success = false, ErrorMessage = ex.Message };\n            }\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "a0bc2628-32b5-4956-9302-af5a1aef1bd1",
        "Name": "Models",
        "ParentId": "fb727ef1-922a-40ea-aef1-fed7ecc49586",
        "Type": 0,
        "Items": [
          {
            "Id": "2bec8640-d086-42a6-a208-6a204dcec682",
            "Name": "Alert.cs",
            "ParentId": "a0bc2628-32b5-4956-9302-af5a1aef1bd1",
            "Type": 1,
            "Text": "using System;\n\nnamespace RealTimeAlertSystem.Models\n{\n    public class Alert\n    {\n        public Guid AlertId { get; set; }\n        public string AlertType { get; set; }\n        public string Message { get; set; }\n        public string Severity { get; set; }\n        public DateTime CreatedAt { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "98eb76c8-83b3-4148-a369-e8cf751e359c",
            "Name": "AlertRequest.cs",
            "ParentId": "a0bc2628-32b5-4956-9302-af5a1aef1bd1",
            "Type": 1,
            "Text": "namespace RealTimeAlertSystem.Models\n{\n    public class AlertRequest\n    {\n        public string AlertType { get; set; }\n        public string Message { get; set; }\n        public string Severity { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "0851f769-c731-45b0-8534-f67802892d3e",
            "Name": "AlertResponse.cs",
            "ParentId": "a0bc2628-32b5-4956-9302-af5a1aef1bd1",
            "Type": 1,
            "Text": "using System;\n\nnamespace RealTimeAlertSystem.Models\n{\n    public class AlertResponse\n    {\n        public bool Success { get; set; }\n        public Guid? AlertId { get; set; }\n        public string ErrorMessage { get; set; }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "0662bd8b-56d6-48b7-810a-0ee6487267c5",
        "Name": "Infrastructure",
        "ParentId": "fb727ef1-922a-40ea-aef1-fed7ecc49586",
        "Type": 0,
        "Items": [
          {
            "Id": "42cd50e7-8c6b-483f-9071-c951f2d2029d",
            "Name": "IAlertDispatcher.cs",
            "ParentId": "0662bd8b-56d6-48b7-810a-0ee6487267c5",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing RealTimeAlertSystem.Models;\n\nnamespace RealTimeAlertSystem.Infrastructure\n{\n    public interface IAlertDispatcher\n    {\n        Task<bool> DispatchAlertAsync(Alert alert);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "e368c43f-5067-4474-a4e4-6f3283167005",
            "Name": "AlertDispatcher.cs",
            "ParentId": "0662bd8b-56d6-48b7-810a-0ee6487267c5",
            "Type": 1,
            "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing RealTimeAlertSystem.Models;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\n\nnamespace RealTimeAlertSystem.Infrastructure\n{\n    public class AlertDispatcher : IAlertDispatcher\n    {\n        private readonly HttpClient _httpClient;\n        private readonly IConfiguration _configuration;\n        private readonly ILogger<AlertDispatcher> _logger;\n\n        public AlertDispatcher(IHttpClientFactory httpClientFactory, IConfiguration configuration, ILogger<AlertDispatcher> logger)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n            _configuration = configuration;\n            _logger = logger;\n        }\n\n        public async Task<bool> DispatchAlertAsync(Alert alert)\n        {\n            var alertEndpoint = _configuration.GetValue<string>(\"AlertSettings:Endpoint\");\n            if (string.IsNullOrEmpty(alertEndpoint))\n            {\n                _logger.LogError(\"Alert endpoint is not configured.\");\n                return false;\n            }\n\n            var json = JsonSerializer.Serialize(alert);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n            try\n            {\n                var response = await _httpClient.PostAsync(alertEndpoint, content);\n                if (response.IsSuccessStatusCode)\n                {\n                    _logger.LogInformation(\"Alert dispatched successfully to {Endpoint}\", alertEndpoint);\n                    return true;\n                }\n                else\n                {\n                    _logger.LogError(\"Failed to dispatch alert. Response status: {StatusCode}\", response.StatusCode);\n                    return false;\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Exception occurred while dispatching alert.\");\n                return false;\n            }\n        }\n    }\n}",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "baf9d3dc-84b7-4fb7-adc8-08fc1322ee9f",
    "Name": "ComplianceAuditTool",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "76162065-b0dc-41aa-a1c6-cfdbad020be7",
        "Name": "Program.cs",
        "ParentId": "baf9d3dc-84b7-4fb7-adc8-08fc1322ee9f",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ComplianceAuditTool\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "0530d837-a9ba-4201-a591-7cd349448fde",
        "Name": "Startup.cs",
        "ParentId": "baf9d3dc-84b7-4fb7-adc8-08fc1322ee9f",
        "Type": 1,
        "Text": "using ComplianceAuditTool.Services;\nusing ComplianceAuditTool.Data;\nusing ComplianceAuditTool.Infrastructure;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ComplianceAuditTool\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IAuditService, AuditService>();\n            services.AddSingleton<IAuditRepository, AuditRepository>();\n            services.AddSingleton<IAuditLogger, AuditLogger>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "fb16a57f-6cbf-4f8b-8995-a9315d6efe94",
        "Name": "Controllers",
        "ParentId": "baf9d3dc-84b7-4fb7-adc8-08fc1322ee9f",
        "Type": 0,
        "Items": [
          {
            "Id": "c1338ae8-a1b6-459f-8e42-963fe30fc2ee",
            "Name": "AuditController.cs",
            "ParentId": "fb16a57f-6cbf-4f8b-8995-a9315d6efe94",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing ComplianceAuditTool.Services;\nusing ComplianceAuditTool.Models;\n\nnamespace ComplianceAuditTool.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class AuditController : ControllerBase\n    {\n        private readonly IAuditService _auditService;\n\n        public AuditController(IAuditService auditService)\n        {\n            _auditService = auditService;\n        }\n\n        [HttpPost(\"run\")]\n        public IActionResult RunAudit([FromBody] AuditRequest request)\n        {\n            var result = _auditService.RunAudit(request);\n            if (result.Success)\n                return Ok(result);\n            else\n                return BadRequest(result);\n        }\n\n        [HttpGet(\"logs\")]\n        public IActionResult GetAuditLogs()\n        {\n            var logs = _auditService.GetAuditLogs();\n            return Ok(logs);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "3b3aa0ea-4588-4c08-a3a6-66d61ac8b4a1",
        "Name": "Services",
        "ParentId": "baf9d3dc-84b7-4fb7-adc8-08fc1322ee9f",
        "Type": 0,
        "Items": [
          {
            "Id": "6c080717-799e-4069-a1c8-ef30b600ab8d",
            "Name": "IAuditService.cs",
            "ParentId": "3b3aa0ea-4588-4c08-a3a6-66d61ac8b4a1",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing ComplianceAuditTool.Models;\n\nnamespace ComplianceAuditTool.Services\n{\n    public interface IAuditService\n    {\n        AuditResult RunAudit(AuditRequest request);\n        IEnumerable<AuditLog> GetAuditLogs();\n    }\n}",
            "Language": 0
          },
          {
            "Id": "ce555b42-ce52-4bb2-a158-ea5c4e3c7be4",
            "Name": "AuditService.cs",
            "ParentId": "3b3aa0ea-4588-4c08-a3a6-66d61ac8b4a1",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing ComplianceAuditTool.Models;\nusing ComplianceAuditTool.Data;\nusing ComplianceAuditTool.Infrastructure;\n\nnamespace ComplianceAuditTool.Services\n{\n    public class AuditService : IAuditService\n    {\n        private readonly IAuditRepository _repository;\n        private readonly IAuditLogger _logger;\n\n        public AuditService(IAuditRepository repository, IAuditLogger logger)\n        {\n            _repository = repository;\n            _logger = logger;\n        }\n\n        public AuditResult RunAudit(AuditRequest request)\n        {\n            // Execute compliance audit logic\n            var auditLog = new AuditLog\n            {\n                Id = Guid.NewGuid(),\n                Timestamp = DateTime.UtcNow,\n                Details = $\"Executed audit for compliance type: {request.ComplianceType}, Parameters: {request.Parameters}\",\n                Status = \"Completed\"\n            };\n            \n            _repository.AddAuditLog(auditLog);\n            _logger.LogAudit(auditLog);\n            \n            return new AuditResult\n            {\n                Success = true,\n                AuditId = auditLog.Id,\n                Message = \"Audit completed successfully.\"\n            };\n        }\n\n        public IEnumerable<AuditLog> GetAuditLogs()\n        {\n            return _repository.GetAllAuditLogs();\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "d4428458-c210-46a7-988e-dd41cf65c530",
        "Name": "Models",
        "ParentId": "baf9d3dc-84b7-4fb7-adc8-08fc1322ee9f",
        "Type": 0,
        "Items": [
          {
            "Id": "0621d964-6b36-4708-8c82-d7a422525cb1",
            "Name": "AuditRequest.cs",
            "ParentId": "d4428458-c210-46a7-988e-dd41cf65c530",
            "Type": 1,
            "Text": "namespace ComplianceAuditTool.Models\n{\n    public class AuditRequest\n    {\n        public string ComplianceType { get; set; }\n        public string Parameters { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "d652e980-0ab4-4d81-9ec5-3e0c06b19ca4",
            "Name": "AuditResult.cs",
            "ParentId": "d4428458-c210-46a7-988e-dd41cf65c530",
            "Type": 1,
            "Text": "using System;\n\nnamespace ComplianceAuditTool.Models\n{\n    public class AuditResult\n    {\n        public bool Success { get; set; }\n        public Guid AuditId { get; set; }\n        public string Message { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "ca3838ba-9667-4ac7-895f-e6c21c2be867",
            "Name": "AuditLog.cs",
            "ParentId": "d4428458-c210-46a7-988e-dd41cf65c530",
            "Type": 1,
            "Text": "using System;\n\nnamespace ComplianceAuditTool.Models\n{\n    public class AuditLog\n    {\n        public Guid Id { get; set; }\n        public DateTime Timestamp { get; set; }\n        public string Details { get; set; }\n        public string Status { get; set; }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "a7b9e0dc-24de-4f59-965a-83defdac7824",
        "Name": "Data",
        "ParentId": "baf9d3dc-84b7-4fb7-adc8-08fc1322ee9f",
        "Type": 0,
        "Items": [
          {
            "Id": "d0327c57-bed3-44d9-ba39-0c2d763a453b",
            "Name": "IAuditRepository.cs",
            "ParentId": "a7b9e0dc-24de-4f59-965a-83defdac7824",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing ComplianceAuditTool.Models;\n\nnamespace ComplianceAuditTool.Data\n{\n    public interface IAuditRepository\n    {\n        void AddAuditLog(AuditLog log);\n        IEnumerable<AuditLog> GetAllAuditLogs();\n    }\n}",
            "Language": 0
          },
          {
            "Id": "9bea57f8-638b-4d5c-bdc0-8521351f88ad",
            "Name": "AuditRepository.cs",
            "ParentId": "a7b9e0dc-24de-4f59-965a-83defdac7824",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing ComplianceAuditTool.Models;\n\nnamespace ComplianceAuditTool.Data\n{\n    public class AuditRepository : IAuditRepository\n    {\n        private readonly ConcurrentDictionary<Guid, AuditLog> _auditLogs = new ConcurrentDictionary<Guid, AuditLog>();\n\n        public void AddAuditLog(AuditLog log)\n        {\n            _auditLogs[log.Id] = log;\n        }\n\n        public IEnumerable<AuditLog> GetAllAuditLogs()\n        {\n            return _auditLogs.Values;\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "d57fc197-e60f-4f41-b9e4-e6f74ef79a31",
        "Name": "Infrastructure",
        "ParentId": "baf9d3dc-84b7-4fb7-adc8-08fc1322ee9f",
        "Type": 0,
        "Items": [
          {
            "Id": "7a9d0524-3585-4629-9a41-4f6776335c0d",
            "Name": "IAuditLogger.cs",
            "ParentId": "d57fc197-e60f-4f41-b9e4-e6f74ef79a31",
            "Type": 1,
            "Text": "using ComplianceAuditTool.Models;\n\nnamespace ComplianceAuditTool.Infrastructure\n{\n    public interface IAuditLogger\n    {\n        void LogAudit(AuditLog log);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "655f8377-d1e4-4d6d-b14e-5274079e7753",
            "Name": "AuditLogger.cs",
            "ParentId": "d57fc197-e60f-4f41-b9e4-e6f74ef79a31",
            "Type": 1,
            "Text": "using ComplianceAuditTool.Models;\nusing Microsoft.Extensions.Logging;\n\nnamespace ComplianceAuditTool.Infrastructure\n{\n    public class AuditLogger : IAuditLogger\n    {\n        private readonly ILogger<AuditLogger> _logger;\n\n        public AuditLogger(ILogger<AuditLogger> logger)\n        {\n            _logger = logger;\n        }\n\n        public void LogAudit(AuditLog log)\n        {\n            _logger.LogInformation(\"Audit Log - ID: {AuditId}, Timestamp: {Timestamp}, Details: {Details}, Status: {Status}\",\n                log.Id, log.Timestamp, log.Details, log.Status);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "7cc0bb16-d65a-4c2d-8c53-fe1a269fb959",
    "Name": "DataEncryptionService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "75ffd1d6-5117-475f-9e00-ee5df6606817",
        "Name": "Program.cs",
        "ParentId": "7cc0bb16-d65a-4c2d-8c53-fe1a269fb959",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace DataEncryptionService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "e3315527-67b0-499b-b0cf-2932950459e0",
        "Name": "Startup.cs",
        "ParentId": "7cc0bb16-d65a-4c2d-8c53-fe1a269fb959",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing DataEncryptionService.Services;\nusing DataEncryptionService.Configuration;\n\nnamespace DataEncryptionService\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.Configure<EncryptionSettings>(Configuration.GetSection(\"EncryptionSettings\"));\n            services.AddSingleton<IEncryptionService, EncryptionService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "4d7b9e6f-dae9-4922-ab32-108a969be3cf",
        "Name": "Configuration",
        "ParentId": "7cc0bb16-d65a-4c2d-8c53-fe1a269fb959",
        "Type": 0,
        "Items": [
          {
            "Id": "5349aa80-4561-47cf-9050-f8f0e8822f2d",
            "Name": "EncryptionSettings.cs",
            "ParentId": "4d7b9e6f-dae9-4922-ab32-108a969be3cf",
            "Type": 1,
            "Text": "namespace DataEncryptionService.Configuration\n{\n    public class EncryptionSettings\n    {\n        public string EncryptionKey { get; set; }\n        public string EncryptionIV { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "81fb9ebb-fa5a-47ef-b5a6-d5f72ed412a5",
        "Name": "Controllers",
        "ParentId": "7cc0bb16-d65a-4c2d-8c53-fe1a269fb959",
        "Type": 0,
        "Items": [
          {
            "Id": "464cac65-9396-4d88-acab-b03894b86625",
            "Name": "EncryptionController.cs",
            "ParentId": "81fb9ebb-fa5a-47ef-b5a6-d5f72ed412a5",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing DataEncryptionService.Services;\nusing DataEncryptionService.Models;\n\nnamespace DataEncryptionService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class EncryptionController : ControllerBase\n    {\n        private readonly IEncryptionService _encryptionService;\n\n        public EncryptionController(IEncryptionService encryptionService)\n        {\n            _encryptionService = encryptionService;\n        }\n\n        [HttpPost(\"encrypt\")]\n        public ActionResult<string> Encrypt([FromBody] EncryptionRequest request)\n        {\n            if (string.IsNullOrWhiteSpace(request.Data))\n            {\n                return BadRequest(\"Data must not be empty.\");\n            }\n            var cipherText = _encryptionService.Encrypt(request.Data);\n            return Ok(cipherText);\n        }\n\n        [HttpPost(\"decrypt\")]\n        public ActionResult<string> Decrypt([FromBody] DecryptionRequest request)\n        {\n            if (string.IsNullOrWhiteSpace(request.Data))\n            {\n                return BadRequest(\"Data must not be empty.\");\n            }\n            var plainText = _encryptionService.Decrypt(request.Data);\n            return Ok(plainText);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "c065b2af-132a-40e6-9946-be230f546585",
        "Name": "Models",
        "ParentId": "7cc0bb16-d65a-4c2d-8c53-fe1a269fb959",
        "Type": 0,
        "Items": [
          {
            "Id": "b9b373de-cb42-4878-bb68-1b9bbcb25b18",
            "Name": "EncryptionRequest.cs",
            "ParentId": "c065b2af-132a-40e6-9946-be230f546585",
            "Type": 1,
            "Text": "namespace DataEncryptionService.Models\n{\n    public class EncryptionRequest\n    {\n        public string Data { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "92201f4f-69d3-42e0-ac37-630a8cb990d6",
            "Name": "DecryptionRequest.cs",
            "ParentId": "c065b2af-132a-40e6-9946-be230f546585",
            "Type": 1,
            "Text": "namespace DataEncryptionService.Models\n{\n    public class DecryptionRequest\n    {\n        public string Data { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "592a8b0c-7fa1-4832-b177-199ed4bc0f61",
        "Name": "Services",
        "ParentId": "7cc0bb16-d65a-4c2d-8c53-fe1a269fb959",
        "Type": 0,
        "Items": [
          {
            "Id": "4755902b-979f-4489-a8c5-f59fcf02620d",
            "Name": "IEncryptionService.cs",
            "ParentId": "592a8b0c-7fa1-4832-b177-199ed4bc0f61",
            "Type": 1,
            "Text": "namespace DataEncryptionService.Services\n{\n    public interface IEncryptionService\n    {\n        string Encrypt(string plainText);\n        string Decrypt(string cipherText);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "7b0f1e5d-03d7-4e6a-b97b-d48e8f45b025",
            "Name": "EncryptionService.cs",
            "ParentId": "592a8b0c-7fa1-4832-b177-199ed4bc0f61",
            "Type": 1,
            "Text": "using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\nusing DataEncryptionService.Configuration;\nusing Microsoft.Extensions.Options;\n\nnamespace DataEncryptionService.Services\n{\n    public class EncryptionService : IEncryptionService\n    {\n        private readonly byte[] _key;\n        private readonly byte[] _iv;\n\n        public EncryptionService(IOptions<EncryptionSettings> options)\n        {\n            var settings = options.Value;\n            if (string.IsNullOrEmpty(settings.EncryptionKey) || string.IsNullOrEmpty(settings.EncryptionIV))\n            {\n                throw new ArgumentException(\"Encryption key and IV must be provided in settings.\");\n            }\n            _key = Encoding.UTF8.GetBytes(settings.EncryptionKey);\n            _iv = Encoding.UTF8.GetBytes(settings.EncryptionIV);\n\n            if (!(_key.Length == 16 || _key.Length == 24 || _key.Length == 32))\n            {\n                throw new ArgumentException(\"Encryption key must be 16, 24, or 32 bytes long.\");\n            }\n            if (_iv.Length != 16)\n            {\n                throw new ArgumentException(\"Encryption IV must be 16 bytes long.\");\n            }\n        }\n\n        public string Encrypt(string plainText)\n        {\n            using (Aes aes = Aes.Create())\n            {\n                aes.Key = _key;\n                aes.IV = _iv;\n                aes.Mode = CipherMode.CBC;\n                aes.Padding = PaddingMode.PKCS7;\n                using (var encryptor = aes.CreateEncryptor(aes.Key, aes.IV))\n                using (var ms = new MemoryStream())\n                {\n                    using (var cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))\n                    {\n                        byte[] plainBytes = Encoding.UTF8.GetBytes(plainText);\n                        cs.Write(plainBytes, 0, plainBytes.Length);\n                        cs.FlushFinalBlock();\n                        var cipherBytes = ms.ToArray();\n                        return Convert.ToBase64String(cipherBytes);\n                    }\n                }\n            }\n        }\n\n        public string Decrypt(string cipherText)\n        {\n            byte[] cipherBytes = Convert.FromBase64String(cipherText);\n            using (Aes aes = Aes.Create())\n            {\n                aes.Key = _key;\n                aes.IV = _iv;\n                aes.Mode = CipherMode.CBC;\n                aes.Padding = PaddingMode.PKCS7;\n                using (var decryptor = aes.CreateDecryptor(aes.Key, aes.IV))\n                using (var ms = new MemoryStream(cipherBytes))\n                using (var cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))\n                using (var sr = new StreamReader(cs, Encoding.UTF8))\n                {\n                    return sr.ReadToEnd();\n                }\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "219c773c-f12e-4972-9ca6-2ee050461a44",
    "Name": "SecureFileTransferSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "4434a13a-a895-4797-94c0-58ebdb18d57a",
        "Name": "Program.cs",
        "ParentId": "219c773c-f12e-4972-9ca6-2ee050461a44",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace SecureFileTransferSystem\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "c8988d43-586d-42b9-a686-c332c2876043",
        "Name": "Startup.cs",
        "ParentId": "219c773c-f12e-4972-9ca6-2ee050461a44",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing SecureFileTransferSystem.Services;\nusing SecureFileTransferSystem.Infrastructure;\n\nnamespace SecureFileTransferSystem\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IFileTransferService, FileTransferService>();\n            services.AddSingleton<IFileRepository, FileRepository>();\n            services.AddLogging();\n        }\n\n        public void Configure(IApplicationBuilder app, IHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "d53f182a-e0b6-4fc8-a70d-6d453864fdc6",
        "Name": "Controllers",
        "ParentId": "219c773c-f12e-4972-9ca6-2ee050461a44",
        "Type": 0,
        "Items": [
          {
            "Id": "a2165fb5-c20c-46d6-ac11-1978bcd3e519",
            "Name": "FileTransferController.cs",
            "ParentId": "d53f182a-e0b6-4fc8-a70d-6d453864fdc6",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing SecureFileTransferSystem.Services;\nusing SecureFileTransferSystem.Models;\n\nnamespace SecureFileTransferSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class FileTransferController : ControllerBase\n    {\n        private readonly IFileTransferService _fileTransferService;\n\n        public FileTransferController(IFileTransferService fileTransferService)\n        {\n            _fileTransferService = fileTransferService;\n        }\n\n        [HttpPost(\"upload\")]\n        public async Task<IActionResult> UploadFile([FromBody] FileUploadRequest request)\n        {\n            var response = await _fileTransferService.UploadFileAsync(request);\n            if (response != null)\n            {\n                return Ok(response);\n            }\n            return BadRequest(\"File upload failed.\");\n        }\n\n        [HttpGet(\"download\")]\n        public async Task<IActionResult> DownloadFile([FromQuery] string fileId)\n        {\n            var fileData = await _fileTransferService.DownloadFileAsync(fileId);\n            if (fileData != null)\n            {\n                return File(fileData.Content, \"application/octet-stream\", fileData.FileName);\n            }\n            return NotFound(\"File not found.\");\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "27547831-dba3-4f9c-bdfb-65767169adca",
        "Name": "Services",
        "ParentId": "219c773c-f12e-4972-9ca6-2ee050461a44",
        "Type": 0,
        "Items": [
          {
            "Id": "8f3dcb00-1b33-41ea-a07d-c58d8ef20164",
            "Name": "IFileTransferService.cs",
            "ParentId": "27547831-dba3-4f9c-bdfb-65767169adca",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing SecureFileTransferSystem.Models;\n\nnamespace SecureFileTransferSystem.Services\n{\n    public interface IFileTransferService\n    {\n        Task<FileTransferResponse> UploadFileAsync(FileUploadRequest request);\n        Task<FileDownloadResponse> DownloadFileAsync(string fileId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "a52307dd-c613-4cc6-b041-bf18313d942b",
            "Name": "FileTransferService.cs",
            "ParentId": "27547831-dba3-4f9c-bdfb-65767169adca",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing SecureFileTransferSystem.Models;\nusing SecureFileTransferSystem.Utils;\nusing SecureFileTransferSystem.Infrastructure;\n\nnamespace SecureFileTransferSystem.Services\n{\n    public class FileTransferService : IFileTransferService\n    {\n        private readonly IFileRepository _fileRepository;\n\n        public FileTransferService(IFileRepository fileRepository)\n        {\n            _fileRepository = fileRepository;\n        }\n\n        public async Task<FileTransferResponse> UploadFileAsync(FileUploadRequest request)\n        {\n            if (request == null || request.Content == null || request.Content.Length == 0)\n            {\n                throw new ArgumentException(\"Invalid file upload request.\");\n            }\n\n            // Encrypt file content using AES encryption\n            var encryptedContent = EncryptionHelper.Encrypt(request.Content);\n\n            // Generate a unique file identifier\n            var fileId = Guid.NewGuid().ToString();\n            var fileRecord = new FileRecord\n            {\n                FileId = fileId,\n                FileName = request.FileName,\n                EncryptedContent = encryptedContent,\n                UploadedAt = DateTime.UtcNow\n            };\n\n            await _fileRepository.SaveFileAsync(fileRecord);\n            return new FileTransferResponse { FileId = fileId, FileName = request.FileName, UploadedAt = fileRecord.UploadedAt };\n        }\n\n        public async Task<FileDownloadResponse> DownloadFileAsync(string fileId)\n        {\n            if (string.IsNullOrEmpty(fileId))\n            {\n                throw new ArgumentException(\"FileId cannot be null or empty.\");\n            }\n\n            var fileRecord = await _fileRepository.GetFileAsync(fileId);\n            if (fileRecord == null) return null;\n\n            // Decrypt file content\n            var decryptedContent = EncryptionHelper.Decrypt(fileRecord.EncryptedContent);\n            return new FileDownloadResponse\n            {\n                FileId = fileRecord.FileId,\n                FileName = fileRecord.FileName,\n                Content = decryptedContent,\n                UploadedAt = fileRecord.UploadedAt\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "c1274a59-6348-4642-a6e6-8a4658c1c42f",
        "Name": "Models",
        "ParentId": "219c773c-f12e-4972-9ca6-2ee050461a44",
        "Type": 0,
        "Items": [
          {
            "Id": "8a191769-2531-48c8-8be4-12f9b425fed6",
            "Name": "FileUploadRequest.cs",
            "ParentId": "c1274a59-6348-4642-a6e6-8a4658c1c42f",
            "Type": 1,
            "Text": "namespace SecureFileTransferSystem.Models\n{\n    public class FileUploadRequest\n    {\n        public string FileName { get; set; }\n        public byte[] Content { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "cb20b765-7219-43ac-85fa-801867ade4b0",
            "Name": "FileTransferResponse.cs",
            "ParentId": "c1274a59-6348-4642-a6e6-8a4658c1c42f",
            "Type": 1,
            "Text": "using System;\n\nnamespace SecureFileTransferSystem.Models\n{\n    public class FileTransferResponse\n    {\n        public string FileId { get; set; }\n        public string FileName { get; set; }\n        public DateTime UploadedAt { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "9233f1fb-428c-4373-a200-fb3eab5796a5",
            "Name": "FileDownloadResponse.cs",
            "ParentId": "c1274a59-6348-4642-a6e6-8a4658c1c42f",
            "Type": 1,
            "Text": "using System;\n\nnamespace SecureFileTransferSystem.Models\n{\n    public class FileDownloadResponse\n    {\n        public string FileId { get; set; }\n        public string FileName { get; set; }\n        public byte[] Content { get; set; }\n        public DateTime UploadedAt { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "ce21bbd2-f791-45fa-8a30-9595211943f9",
            "Name": "FileRecord.cs",
            "ParentId": "c1274a59-6348-4642-a6e6-8a4658c1c42f",
            "Type": 1,
            "Text": "using System;\n\nnamespace SecureFileTransferSystem.Models\n{\n    public class FileRecord\n    {\n        public string FileId { get; set; }\n        public string FileName { get; set; }\n        public byte[] EncryptedContent { get; set; }\n        public DateTime UploadedAt { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "ac347c5d-8433-4526-8a36-28002773bd09",
        "Name": "Infrastructure",
        "ParentId": "219c773c-f12e-4972-9ca6-2ee050461a44",
        "Type": 0,
        "Items": [
          {
            "Id": "dceca437-2817-4ba0-adce-706f8ce166c4",
            "Name": "IFileRepository.cs",
            "ParentId": "ac347c5d-8433-4526-8a36-28002773bd09",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing SecureFileTransferSystem.Models;\n\nnamespace SecureFileTransferSystem.Infrastructure\n{\n    public interface IFileRepository\n    {\n        Task SaveFileAsync(FileRecord fileRecord);\n        Task<FileRecord> GetFileAsync(string fileId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "ba15cef7-b2c0-4d4a-a7b5-76b06054674e",
            "Name": "FileRepository.cs",
            "ParentId": "ac347c5d-8433-4526-8a36-28002773bd09",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing System.Threading.Tasks;\nusing SecureFileTransferSystem.Models;\n\nnamespace SecureFileTransferSystem.Infrastructure\n{\n    public class FileRepository : IFileRepository\n    {\n        // In-memory storage; replace with a persistent store in production\n        private readonly ConcurrentDictionary<string, FileRecord> _files = new ConcurrentDictionary<string, FileRecord>();\n\n        public Task SaveFileAsync(FileRecord fileRecord)\n        {\n            _files[fileRecord.FileId] = fileRecord;\n            return Task.CompletedTask;\n        }\n\n        public Task<FileRecord> GetFileAsync(string fileId)\n        {\n            _files.TryGetValue(fileId, out var fileRecord);\n            return Task.FromResult(fileRecord);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "9b90008e-5598-4047-8cdc-f9b9a3b6591d",
        "Name": "Utils",
        "ParentId": "219c773c-f12e-4972-9ca6-2ee050461a44",
        "Type": 0,
        "Items": [
          {
            "Id": "22f9a82b-f2fc-4073-87d9-b4d8b26b01b5",
            "Name": "EncryptionHelper.cs",
            "ParentId": "9b90008e-5598-4047-8cdc-f9b9a3b6591d",
            "Type": 1,
            "Text": "using System;\nusing System.IO;\nusing System.Security.Cryptography;\n\nnamespace SecureFileTransferSystem.Utils\n{\n    public static class EncryptionHelper\n    {\n        // A 256-bit key for AES encryption; in a production system, store this securely\n        private static readonly byte[] Key = Convert.FromBase64String(\"nN3+aXf2Vw9zm4yRkNdYK3JtL9sX5r9+9QL4JlsXbUM=\");\n\n        public static byte[] Encrypt(byte[] plainBytes)\n        {\n            using (Aes aesAlg = Aes.Create())\n            {\n                aesAlg.Key = Key;\n                aesAlg.Mode = CipherMode.CBC;\n                aesAlg.Padding = PaddingMode.PKCS7;\n                aesAlg.GenerateIV();\n                var iv = aesAlg.IV;\n\n                using var encryptor = aesAlg.CreateEncryptor(aesAlg.Key, iv);\n                using var msEncrypt = new MemoryStream();\n                // Prepend the IV to the encrypted data\n                msEncrypt.Write(iv, 0, iv.Length);\n                using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                {\n                    csEncrypt.Write(plainBytes, 0, plainBytes.Length);\n                    csEncrypt.FlushFinalBlock();\n                }\n                return msEncrypt.ToArray();\n            }\n        }\n\n        public static byte[] Decrypt(byte[] cipherBytes)\n        {\n            using (Aes aesAlg = Aes.Create())\n            {\n                aesAlg.Key = Key;\n                aesAlg.Mode = CipherMode.CBC;\n                aesAlg.Padding = PaddingMode.PKCS7;\n                int ivLength = aesAlg.BlockSize / 8;\n                byte[] iv = new byte[ivLength];\n                Array.Copy(cipherBytes, 0, iv, 0, ivLength);\n                aesAlg.IV = iv;\n\n                using var decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n                using var msDecrypt = new MemoryStream(cipherBytes, ivLength, cipherBytes.Length - ivLength);\n                using var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);\n                using var result = new MemoryStream();\n                csDecrypt.CopyTo(result);\n                return result.ToArray();\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "52e56e33-062f-46f1-bea0-f8c8b07f177d",
    "Name": "BiometricAuthenticationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "029cca8d-84db-46a5-80ff-1ff2e8dc0c21",
        "Name": "Program.cs",
        "ParentId": "52e56e33-062f-46f1-bea0-f8c8b07f177d",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing BiometricAuthenticationService.Services;\nusing BiometricAuthenticationService.Data;\nusing BiometricAuthenticationService.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IBiometricAuthService, BiometricAuthService>();\nbuilder.Services.AddSingleton<IUserRepository, UserRepository>();\nbuilder.Services.AddSingleton<AuditLogger>();\nbuilder.Services.AddSingleton<BiometricScanner>();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();\n",
        "Language": 0
      },
      {
        "Id": "dd1da46a-b2a5-4a28-b3ac-df63e60e9ed0",
        "Name": "Controllers",
        "ParentId": "52e56e33-062f-46f1-bea0-f8c8b07f177d",
        "Type": 0,
        "Items": [
          {
            "Id": "cd8ed537-e0f0-4c88-b6f0-09563ca46e20",
            "Name": "BiometricAuthController.cs",
            "ParentId": "dd1da46a-b2a5-4a28-b3ac-df63e60e9ed0",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing BiometricAuthenticationService.Models;\nusing BiometricAuthenticationService.Services;\n\nnamespace BiometricAuthenticationService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class BiometricAuthController : ControllerBase\n    {\n        private readonly IBiometricAuthService _authService;\n\n        public BiometricAuthController(IBiometricAuthService authService)\n        {\n            _authService = authService;\n        }\n\n        [HttpPost(\"register\")]\n        public ActionResult Register([FromBody] BiometricData biometricData)\n        {\n            var result = _authService.RegisterBiometricData(biometricData);\n            if(result)\n            {\n                return Ok(new { Success = true, Message = \"Biometric data registered successfully.\" });\n            }\n            return BadRequest(new { Success = false, Message = \"Registration failed.\" });\n        }\n\n        [HttpPost(\"authenticate\")]\n        public ActionResult<AuthenticationResponse> Authenticate([FromBody] AuthenticationRequest request)\n        {\n            var response = _authService.Authenticate(request);\n            if(response.IsAuthenticated)\n            {\n                return Ok(response);\n            }\n            return Unauthorized(response);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "23fa9584-fa81-4b48-82ed-adcfab380929",
        "Name": "Services",
        "ParentId": "52e56e33-062f-46f1-bea0-f8c8b07f177d",
        "Type": 0,
        "Items": [
          {
            "Id": "13b9aea3-88d3-46cc-9ee5-4c744bf741c3",
            "Name": "IBiometricAuthService.cs",
            "ParentId": "23fa9584-fa81-4b48-82ed-adcfab380929",
            "Type": 1,
            "Text": "using BiometricAuthenticationService.Models;\n\nnamespace BiometricAuthenticationService.Services\n{\n    public interface IBiometricAuthService\n    {\n        AuthenticationResponse Authenticate(AuthenticationRequest request);\n        bool RegisterBiometricData(BiometricData data);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "19b6fa58-869e-473a-8fa0-f3d993245faf",
            "Name": "BiometricAuthService.cs",
            "ParentId": "23fa9584-fa81-4b48-82ed-adcfab380929",
            "Type": 1,
            "Text": "using System;\nusing BiometricAuthenticationService.Models;\nusing BiometricAuthenticationService.Data;\nusing BiometricAuthenticationService.Infrastructure;\nusing BiometricAuthenticationService.Utils;\n\nnamespace BiometricAuthenticationService.Services\n{\n    public class BiometricAuthService : IBiometricAuthService\n    {\n        private readonly IUserRepository _userRepository;\n        private readonly BiometricScanner _scanner;\n        private readonly AuditLogger _auditLogger;\n\n        public BiometricAuthService(IUserRepository userRepository, BiometricScanner scanner, AuditLogger auditLogger)\n        {\n            _userRepository = userRepository;\n            _scanner = scanner;\n            _auditLogger = auditLogger;\n        }\n\n        public bool RegisterBiometricData(BiometricData data)\n        {\n            if (data == null || data.Template == null || string.IsNullOrWhiteSpace(data.UserId))\n            {\n                return false;\n            }\n            data.Timestamp = DateTime.UtcNow;\n            _userRepository.SaveBiometricData(data);\n            _auditLogger.Log($\"Registered biometric data for user: {data.UserId}\");\n            return true;\n        }\n\n        public AuthenticationResponse Authenticate(AuthenticationRequest request)\n        {\n            var storedData = _userRepository.GetBiometricData(request.UserId);\n            if (storedData == null)\n            {\n                return new AuthenticationResponse\n                {\n                    IsAuthenticated = false,\n                    Message = \"User biometric data not found.\"\n                };\n            }\n            bool isMatch = _scanner.Verify(request.BiometricSample, storedData.Template);\n           \n            if (isMatch)\n            {\n                _auditLogger.Log($\"User {request.UserId} authenticated successfully.\");\n                return new AuthenticationResponse\n                {\n                    IsAuthenticated = true,\n                    Message = \"Authentication successful.\"\n                };\n            }\n            \n            _auditLogger.Log($\"Failed authentication attempt for user {request.UserId}.\");\n            return new AuthenticationResponse\n            {\n                IsAuthenticated = false,\n                Message = \"Biometric verification failed.\"\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "471d887e-c35b-40d3-b548-45ca726f4098",
        "Name": "Models",
        "ParentId": "52e56e33-062f-46f1-bea0-f8c8b07f177d",
        "Type": 0,
        "Items": [
          {
            "Id": "5b4d5246-bf34-425e-a77b-06e9118223e8",
            "Name": "BiometricData.cs",
            "ParentId": "471d887e-c35b-40d3-b548-45ca726f4098",
            "Type": 1,
            "Text": "namespace BiometricAuthenticationService.Models\n{\n    public class BiometricData\n    {\n        public string UserId { get; set; }\n        public byte[] Template { get; set; }\n        public System.DateTime Timestamp { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "be80eeba-010e-4b9a-aa89-e3b60afc3ddd",
            "Name": "AuthenticationRequest.cs",
            "ParentId": "471d887e-c35b-40d3-b548-45ca726f4098",
            "Type": 1,
            "Text": "namespace BiometricAuthenticationService.Models\n{\n    public class AuthenticationRequest\n    {\n        public string UserId { get; set; }\n        public byte[] BiometricSample { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "a9641f6c-c866-414c-a4fa-03d386e98f6e",
            "Name": "AuthenticationResponse.cs",
            "ParentId": "471d887e-c35b-40d3-b548-45ca726f4098",
            "Type": 1,
            "Text": "namespace BiometricAuthenticationService.Models\n{\n    public class AuthenticationResponse\n    {\n        public bool IsAuthenticated { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "92d62e20-0550-4d65-aded-780e92745016",
        "Name": "Infrastructure",
        "ParentId": "52e56e33-062f-46f1-bea0-f8c8b07f177d",
        "Type": 0,
        "Items": [
          {
            "Id": "230f153f-0fee-4c32-be48-183748ad80b8",
            "Name": "BiometricScanner.cs",
            "ParentId": "92d62e20-0550-4d65-aded-780e92745016",
            "Type": 1,
            "Text": "using BiometricAuthenticationService.Utils;\n\nnamespace BiometricAuthenticationService.Infrastructure\n{\n    public class BiometricScanner\n    {\n        public bool Verify(byte[] sample, byte[] template)\n        {\n            if (sample == null || template == null || sample.Length == 0 || template.Length == 0)\n            {\n                return false;\n            }\n\n            // Use a secure comparison algorithm to compare biometric data\n            return BiometricHelper.CompareBiometrics(sample, template);\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "06aa1ad3-bce0-420b-a8b9-783751113fcb",
            "Name": "AuditLogger.cs",
            "ParentId": "92d62e20-0550-4d65-aded-780e92745016",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace BiometricAuthenticationService.Infrastructure\n{\n    public class AuditLogger\n    {\n        private readonly ILogger<AuditLogger> _logger;\n\n        public AuditLogger(ILogger<AuditLogger> logger)\n        {\n            _logger = logger;\n        }\n\n        public void Log(string message)\n        {\n            _logger.LogInformation($\"[Audit] {DateTime.UtcNow}: {message}\");\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "2db3ac45-029e-45c0-8700-162eb0f22c54",
        "Name": "Data",
        "ParentId": "52e56e33-062f-46f1-bea0-f8c8b07f177d",
        "Type": 0,
        "Items": [
          {
            "Id": "ab776141-6a15-4c3a-b965-82e71591dd8a",
            "Name": "IUserRepository.cs",
            "ParentId": "2db3ac45-029e-45c0-8700-162eb0f22c54",
            "Type": 1,
            "Text": "using BiometricAuthenticationService.Models;\n\nnamespace BiometricAuthenticationService.Data\n{\n    public interface IUserRepository\n    {\n        void SaveBiometricData(BiometricData data);\n        BiometricData GetBiometricData(string userId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "597aeced-a04b-4f57-b721-c67ffe288e9a",
            "Name": "UserRepository.cs",
            "ParentId": "2db3ac45-029e-45c0-8700-162eb0f22c54",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing BiometricAuthenticationService.Models;\n\nnamespace BiometricAuthenticationService.Data\n{\n    public class UserRepository : IUserRepository\n    {\n        private readonly ConcurrentDictionary<string, BiometricData> _store = new ConcurrentDictionary<string, BiometricData>();\n\n        public void SaveBiometricData(BiometricData data)\n        {\n            _store[data.UserId] = data;\n        }\n\n        public BiometricData GetBiometricData(string userId)\n        {\n            _store.TryGetValue(userId, out BiometricData data);\n            return data;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "d7278566-87dd-46a2-a977-8924671840aa",
        "Name": "Utils",
        "ParentId": "52e56e33-062f-46f1-bea0-f8c8b07f177d",
        "Type": 0,
        "Items": [
          {
            "Id": "cd8085b1-e41e-44d4-a2cb-9c2fa2e9b8d0",
            "Name": "BiometricHelper.cs",
            "ParentId": "d7278566-87dd-46a2-a977-8924671840aa",
            "Type": 1,
            "Text": "using System;\nusing System.Security.Cryptography;\n\nnamespace BiometricAuthenticationService.Utils\n{\n    public static class BiometricHelper\n    {\n        public static bool CompareBiometrics(byte[] sample, byte[] template)\n        {\n            if (sample.Length != template.Length)\n            {\n                return false;\n            }\n\n            // Compute SHA256 hashes for both sample and template\n            using (var sha256 = SHA256.Create())\n            {\n                var hashSample = sha256.ComputeHash(sample);\n                var hashTemplate = sha256.ComputeHash(template);\n                return AreHashesEqual(hashSample, hashTemplate);\n            }\n        }\n\n        private static bool AreHashesEqual(byte[] hash1, byte[] hash2)\n        {\n            for (int i = 0; i < hash1.Length; i++)\n            {\n                if (hash1[i] != hash2[i])\n                {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "d6194ff1-fb37-41f4-b9ea-a26b0e668828",
    "Name": "IdentityVerificationSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "65a5855d-aab9-4637-838e-668802ffae12",
        "Name": "Program.cs",
        "ParentId": "d6194ff1-fb37-41f4-b9ea-a26b0e668828",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace IdentityVerificationSystem\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "e58e6329-3511-4b42-bf5b-5b50d3d745bd",
        "Name": "Startup.cs",
        "ParentId": "d6194ff1-fb37-41f4-b9ea-a26b0e668828",
        "Type": 1,
        "Text": "using IdentityVerificationSystem.Data;\nusing IdentityVerificationSystem.Infrastructure;\nusing IdentityVerificationSystem.Services;\nusing IdentityVerificationSystem.Strategies;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace IdentityVerificationSystem\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IUserRepository, UserRepository>();\n            services.AddSingleton<IVerificationLogger, VerificationLogger>();\n\n            // Register verification strategies\n            services.AddSingleton<IVerificationStrategy, DocumentVerificationStrategy>();\n            services.AddSingleton<IVerificationStrategy, BiometricVerificationStrategy>();\n\n            services.AddSingleton<IIdentityVerificationService, IdentityVerificationService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "8a203373-78e6-43cf-b335-cc302c0a95e1",
        "Name": "Controllers",
        "ParentId": "d6194ff1-fb37-41f4-b9ea-a26b0e668828",
        "Type": 0,
        "Items": [
          {
            "Id": "8a6a8e6b-61a0-48ed-9839-0e4ff97aa4c3",
            "Name": "VerificationController.cs",
            "ParentId": "8a203373-78e6-43cf-b335-cc302c0a95e1",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing IdentityVerificationSystem.Models;\nusing IdentityVerificationSystem.Services;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace IdentityVerificationSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class VerificationController : ControllerBase\n    {\n        private readonly IIdentityVerificationService _verificationService;\n\n        public VerificationController(IIdentityVerificationService verificationService)\n        {\n            _verificationService = verificationService;\n        }\n\n        [HttpPost(\"verify\")]\n        public async Task<IActionResult> VerifyIdentity([FromBody] VerificationRequest request)\n        {\n            var result = await _verificationService.VerifyIdentityAsync(request);\n            if (result.IsVerified)\n            {\n                return Ok(new VerificationResponse { IsVerified = true, Message = result.Message });\n            }\n            return BadRequest(new VerificationResponse { IsVerified = false, Message = result.Message });\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "2b9dccd0-60bb-41a5-9730-0da597e4292e",
        "Name": "Services",
        "ParentId": "d6194ff1-fb37-41f4-b9ea-a26b0e668828",
        "Type": 0,
        "Items": [
          {
            "Id": "335a908a-e9c7-4795-90d4-4aff524a918f",
            "Name": "IIdentityVerificationService.cs",
            "ParentId": "2b9dccd0-60bb-41a5-9730-0da597e4292e",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing IdentityVerificationSystem.Models;\n\nnamespace IdentityVerificationSystem.Services\n{\n    public interface IIdentityVerificationService\n    {\n        Task<VerificationResult> VerifyIdentityAsync(VerificationRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "6d9fe8bd-b41c-44a2-b965-4536f54046e2",
            "Name": "IdentityVerificationService.cs",
            "ParentId": "2b9dccd0-60bb-41a5-9730-0da597e4292e",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing IdentityVerificationSystem.Data;\nusing IdentityVerificationSystem.Infrastructure;\nusing IdentityVerificationSystem.Models;\nusing IdentityVerificationSystem.Strategies;\n\nnamespace IdentityVerificationSystem.Services\n{\n    public class IdentityVerificationService : IIdentityVerificationService\n    {\n        private readonly IUserRepository _userRepository;\n        private readonly IVerificationLogger _logger;\n        private readonly IEnumerable<IVerificationStrategy> _strategies;\n\n        public IdentityVerificationService(IUserRepository userRepository, IVerificationLogger logger, IEnumerable<IVerificationStrategy> strategies)\n        {\n            _userRepository = userRepository;\n            _logger = logger;\n            _strategies = strategies;\n        }\n\n        public async Task<VerificationResult> VerifyIdentityAsync(VerificationRequest request)\n        {\n            // Retrieve the user identity from the repository\n            var user = await _userRepository.GetUserIdentityAsync(request.UserId);\n            if (user == null)\n            {\n                _logger.Log(\"User not found\", request.UserId);\n                return new VerificationResult { IsVerified = false, Message = \"User not found\" };\n            }\n            \n            // Execute all verification strategies\n            foreach (var strategy in _strategies)\n            {\n                var strategyResult = await strategy.VerifyAsync(user, request);\n                if (!strategyResult)\n                {\n                    _logger.Log($\"Verification failed using {strategy.GetType().Name}\", request.UserId);\n                    return new VerificationResult { IsVerified = false, Message = $\"Verification failed using {strategy.GetType().Name}\" };\n                }\n            }\n            \n            _logger.Log(\"User successfully verified\", request.UserId);\n            return new VerificationResult { IsVerified = true, Message = \"User verified successfully\" };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "ea90d7bf-7bec-4ce6-899f-d75446ee3146",
        "Name": "Models",
        "ParentId": "d6194ff1-fb37-41f4-b9ea-a26b0e668828",
        "Type": 0,
        "Items": [
          {
            "Id": "ad55ed25-9dd8-4676-a165-311255d5a211",
            "Name": "VerificationRequest.cs",
            "ParentId": "ea90d7bf-7bec-4ce6-899f-d75446ee3146",
            "Type": 1,
            "Text": "namespace IdentityVerificationSystem.Models\n{\n    public class VerificationRequest\n    {\n        public string UserId { get; set; }\n        public string DocumentId { get; set; } // Document identifier for verification\n        public byte[] BiometricData { get; set; } // Biometric data (e.g., fingerprint scan)\n        public string AdditionalData { get; set; } // Additional information if required\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "bc3b1bde-8a02-4c70-8f2e-6833ec8e2c57",
            "Name": "VerificationResponse.cs",
            "ParentId": "ea90d7bf-7bec-4ce6-899f-d75446ee3146",
            "Type": 1,
            "Text": "namespace IdentityVerificationSystem.Models\n{\n    public class VerificationResponse\n    {\n        public bool IsVerified { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "1f0ce5ca-d231-4022-bf8f-aca7a9653fd5",
            "Name": "VerificationResult.cs",
            "ParentId": "ea90d7bf-7bec-4ce6-899f-d75446ee3146",
            "Type": 1,
            "Text": "namespace IdentityVerificationSystem.Models\n{\n    public class VerificationResult\n    {\n        public bool IsVerified { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "c14bfc4d-5844-4a5f-b65e-f36e61777f89",
            "Name": "UserIdentity.cs",
            "ParentId": "ea90d7bf-7bec-4ce6-899f-d75446ee3146",
            "Type": 1,
            "Text": "namespace IdentityVerificationSystem.Models\n{\n    public class UserIdentity\n    {\n        public string UserId { get; set; }\n        public string FullName { get; set; }\n        public string DocumentId { get; set; }\n        public byte[] RegisteredBiometricData { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "0c7396a5-e70f-4f90-a123-521a9f4d098f",
        "Name": "Data",
        "ParentId": "d6194ff1-fb37-41f4-b9ea-a26b0e668828",
        "Type": 0,
        "Items": [
          {
            "Id": "1b32f2df-eae4-41cc-9ff9-297db85bda1d",
            "Name": "IUserRepository.cs",
            "ParentId": "0c7396a5-e70f-4f90-a123-521a9f4d098f",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing IdentityVerificationSystem.Models;\n\nnamespace IdentityVerificationSystem.Data\n{\n    public interface IUserRepository\n    {\n        Task<UserIdentity> GetUserIdentityAsync(string userId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "4a029e48-4ce6-4cc0-8bb6-eb50fb13aef4",
            "Name": "UserRepository.cs",
            "ParentId": "0c7396a5-e70f-4f90-a123-521a9f4d098f",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing System.Text;\nusing System.Threading.Tasks;\nusing IdentityVerificationSystem.Models;\n\nnamespace IdentityVerificationSystem.Data\n{\n    public class UserRepository : IUserRepository\n    {\n        private readonly ConcurrentDictionary<string, UserIdentity> _users = new ConcurrentDictionary<string, UserIdentity>();\n\n        public UserRepository()\n        {\n            // In a production environment, this data would be retrieved from a persistent datastore\n            var sampleUser = new UserIdentity\n            {\n                UserId = \"user123\",\n                FullName = \"Jane Doe\",\n                DocumentId = \"DOC123456\",\n                RegisteredBiometricData = Encoding.UTF8.GetBytes(\"sampleBiometric\")\n            };\n            _users.TryAdd(sampleUser.UserId, sampleUser);\n        }\n\n        public Task<UserIdentity> GetUserIdentityAsync(string userId)\n        {\n            _users.TryGetValue(userId, out UserIdentity user);\n            return Task.FromResult(user);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "a27066ee-8c06-4782-a03e-d72f07bf03ff",
        "Name": "Strategies",
        "ParentId": "d6194ff1-fb37-41f4-b9ea-a26b0e668828",
        "Type": 0,
        "Items": [
          {
            "Id": "57be6bdc-6817-494e-9f0d-0cdd26a97fe2",
            "Name": "IVerificationStrategy.cs",
            "ParentId": "a27066ee-8c06-4782-a03e-d72f07bf03ff",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing IdentityVerificationSystem.Models;\n\nnamespace IdentityVerificationSystem.Strategies\n{\n    public interface IVerificationStrategy\n    {\n        Task<bool> VerifyAsync(UserIdentity user, VerificationRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "8d87328b-7c16-41c1-abf4-e5e051a0a0fd",
            "Name": "DocumentVerificationStrategy.cs",
            "ParentId": "a27066ee-8c06-4782-a03e-d72f07bf03ff",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing IdentityVerificationSystem.Models;\n\nnamespace IdentityVerificationSystem.Strategies\n{\n    public class DocumentVerificationStrategy : IVerificationStrategy\n    {\n        public Task<bool> VerifyAsync(UserIdentity user, VerificationRequest request)\n        {\n            // Validate that the provided document ID matches the user's registered document ID\n            bool isValid = !string.IsNullOrEmpty(request.DocumentId) && request.DocumentId == user.DocumentId;\n            return Task.FromResult(isValid);\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "00527b97-e74b-4ff2-ac1d-a97132067ac4",
            "Name": "BiometricVerificationStrategy.cs",
            "ParentId": "a27066ee-8c06-4782-a03e-d72f07bf03ff",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing IdentityVerificationSystem.Models;\n\nnamespace IdentityVerificationSystem.Strategies\n{\n    public class BiometricVerificationStrategy : IVerificationStrategy\n    {\n        public Task<bool> VerifyAsync(UserIdentity user, VerificationRequest request)\n        {\n            if (request.BiometricData == null || user.RegisteredBiometricData == null)\n                return Task.FromResult(false);\n\n            if (request.BiometricData.Length != user.RegisteredBiometricData.Length)\n                return Task.FromResult(false);\n\n            bool match = true;\n            for (int i = 0; i < request.BiometricData.Length; i++)\n            {\n                if (request.BiometricData[i] != user.RegisteredBiometricData[i])\n                {\n                    match = false;\n                    break;\n                }\n            }\n            return Task.FromResult(match);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "28eb0b57-1e3f-49c4-a4cb-1e6222b452d8",
        "Name": "Infrastructure",
        "ParentId": "d6194ff1-fb37-41f4-b9ea-a26b0e668828",
        "Type": 0,
        "Items": [
          {
            "Id": "0d70fc76-880a-418b-8c38-61f7fab46d3b",
            "Name": "IVerificationLogger.cs",
            "ParentId": "28eb0b57-1e3f-49c4-a4cb-1e6222b452d8",
            "Type": 1,
            "Text": "namespace IdentityVerificationSystem.Infrastructure\n{\n    public interface IVerificationLogger\n    {\n        void Log(string message, string userId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "931611fc-45fd-4c93-abad-bb972b486c79",
            "Name": "VerificationLogger.cs",
            "ParentId": "28eb0b57-1e3f-49c4-a4cb-1e6222b452d8",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace IdentityVerificationSystem.Infrastructure\n{\n    public class VerificationLogger : IVerificationLogger\n    {\n        private readonly ILogger<VerificationLogger> _logger;\n\n        public VerificationLogger(ILogger<VerificationLogger> logger)\n        {\n            _logger = logger;\n        }\n\n        public void Log(string message, string userId)\n        {\n            _logger.LogInformation($\"Timestamp: {DateTime.UtcNow}, User: {userId}, Message: {message}\");\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "e23d090b-9bc9-4ab9-a9a9-295701bd3e2c",
    "Name": "ThirdPartyIntegrationHub",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "4fda0420-4e99-4af7-bfee-1f20efaaea2c",
        "Name": "Program.cs",
        "ParentId": "e23d090b-9bc9-4ab9-a9a9-295701bd3e2c",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing ThirdPartyIntegrationHub.Services;\nusing ThirdPartyIntegrationHub.Infrastructure;\nusing Microsoft.Extensions.Configuration;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddHttpClient();\nbuilder.Services.AddSingleton<IIntegrationService, IntegrationService>();\nbuilder.Services.AddSingleton<IHttpClientWrapper, HttpClientWrapper>();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\n\napp.UseRouting();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "9d040233-5d2a-4227-b07f-e190c752ca75",
        "Name": "Controllers",
        "ParentId": "e23d090b-9bc9-4ab9-a9a9-295701bd3e2c",
        "Type": 0,
        "Items": [
          {
            "Id": "86c14e71-ad34-4452-aa31-0e7bf94b5ab3",
            "Name": "IntegrationController.cs",
            "ParentId": "9d040233-5d2a-4227-b07f-e190c752ca75",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing ThirdPartyIntegrationHub.Models;\nusing ThirdPartyIntegrationHub.Services;\n\nnamespace ThirdPartyIntegrationHub.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class IntegrationController : ControllerBase\n    {\n        private readonly IIntegrationService _integrationService;\n\n        public IntegrationController(IIntegrationService integrationService)\n        {\n            _integrationService = integrationService;\n        }\n\n        [HttpPost(\"process\")]\n        public async Task<IActionResult> ProcessIntegration([FromBody] ThirdPartyRequest request)\n        {\n            if (request == null)\n            {\n                return BadRequest(\"Invalid request.\");\n            }\n\n            var response = await _integrationService.ProcessIntegrationAsync(request);\n            return Ok(response);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "9249d159-1a94-41e4-a7cb-34e9c8fbf3e9",
        "Name": "Services",
        "ParentId": "e23d090b-9bc9-4ab9-a9a9-295701bd3e2c",
        "Type": 0,
        "Items": [
          {
            "Id": "dbcf8488-864c-41e0-88ec-14b3774654b9",
            "Name": "IIntegrationService.cs",
            "ParentId": "9249d159-1a94-41e4-a7cb-34e9c8fbf3e9",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing ThirdPartyIntegrationHub.Models;\n\nnamespace ThirdPartyIntegrationHub.Services\n{\n    public interface IIntegrationService\n    {\n        Task<ThirdPartyResponse> ProcessIntegrationAsync(ThirdPartyRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "74bc1559-5d5e-454a-9c09-a6bc7253077b",
            "Name": "IntegrationService.cs",
            "ParentId": "9249d159-1a94-41e4-a7cb-34e9c8fbf3e9",
            "Type": 1,
            "Text": "using System;\nusing System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing ThirdPartyIntegrationHub.Models;\nusing ThirdPartyIntegrationHub.Infrastructure;\nusing Microsoft.Extensions.Configuration;\n\nnamespace ThirdPartyIntegrationHub.Services\n{\n    public class IntegrationService : IIntegrationService\n    {\n        private readonly IHttpClientWrapper _httpClientWrapper;\n        private readonly IConfiguration _configuration;\n\n        public IntegrationService(IHttpClientWrapper httpClientWrapper, IConfiguration configuration)\n        {\n            _httpClientWrapper = httpClientWrapper;\n            _configuration = configuration;\n        }\n\n        public async Task<ThirdPartyResponse> ProcessIntegrationAsync(ThirdPartyRequest request)\n        {\n            // Retrieve provider configuration from app settings (e.g., appsettings.json)\n            var providerConfigSection = _configuration.GetSection($\"Providers:{request.ProviderName}\");\n            if (!providerConfigSection.Exists())\n            {\n                throw new Exception($\"Configuration for provider '{request.ProviderName}' not found.\");\n            }\n            var providerConfig = providerConfigSection.Get<ProviderConfig>();\n            string url = $\"{providerConfig.BaseUrl}{request.Endpoint}\";\n\n            // Serialize the payload\n            string jsonContent = JsonSerializer.Serialize(request.Payload);\n            HttpResponseMessage httpResponse = await _httpClientWrapper.PostAsync(url, jsonContent, providerConfig.ApiKey);\n            string responseContent = await httpResponse.Content.ReadAsStringAsync();\n\n            var response = new ThirdPartyResponse\n            {\n                StatusCode = (int)httpResponse.StatusCode,\n                Content = responseContent,\n                IsSuccess = httpResponse.IsSuccessStatusCode\n            };\n\n            return response;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "e3f82625-fc14-45d5-a16d-31b65ca3c378",
        "Name": "Models",
        "ParentId": "e23d090b-9bc9-4ab9-a9a9-295701bd3e2c",
        "Type": 0,
        "Items": [
          {
            "Id": "8ace64ca-3543-434b-a5d2-ce05123211a6",
            "Name": "ThirdPartyRequest.cs",
            "ParentId": "e3f82625-fc14-45d5-a16d-31b65ca3c378",
            "Type": 1,
            "Text": "namespace ThirdPartyIntegrationHub.Models\n{\n    public class ThirdPartyRequest\n    {\n        public string ProviderName { get; set; }\n        public string Endpoint { get; set; }\n        public object Payload { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "d0f0924d-23af-48df-bbf2-4f3916b22bbb",
            "Name": "ThirdPartyResponse.cs",
            "ParentId": "e3f82625-fc14-45d5-a16d-31b65ca3c378",
            "Type": 1,
            "Text": "namespace ThirdPartyIntegrationHub.Models\n{\n    public class ThirdPartyResponse\n    {\n        public int StatusCode { get; set; }\n        public string Content { get; set; }\n        public bool IsSuccess { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "7029d7e3-5fc2-45cd-bcea-a7bb0030cf8b",
            "Name": "ProviderConfig.cs",
            "ParentId": "e3f82625-fc14-45d5-a16d-31b65ca3c378",
            "Type": 1,
            "Text": "namespace ThirdPartyIntegrationHub.Models\n{\n    public class ProviderConfig\n    {\n        public string BaseUrl { get; set; }\n        public string ApiKey { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "eeedc467-0dc9-4625-a6f5-241097e4dc4a",
        "Name": "Infrastructure",
        "ParentId": "e23d090b-9bc9-4ab9-a9a9-295701bd3e2c",
        "Type": 0,
        "Items": [
          {
            "Id": "3b04a072-55e6-43a3-9f12-fb93fabb837f",
            "Name": "IHttpClientWrapper.cs",
            "ParentId": "eeedc467-0dc9-4625-a6f5-241097e4dc4a",
            "Type": 1,
            "Text": "using System.Net.Http;\nusing System.Threading.Tasks;\n\nnamespace ThirdPartyIntegrationHub.Infrastructure\n{\n    public interface IHttpClientWrapper\n    {\n        Task<HttpResponseMessage> PostAsync(string url, string jsonContent, string apiKey);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "100ce93c-659f-4d83-bf4e-8d38a8327d72",
            "Name": "HttpClientWrapper.cs",
            "ParentId": "eeedc467-0dc9-4625-a6f5-241097e4dc4a",
            "Type": 1,
            "Text": "using System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ThirdPartyIntegrationHub.Infrastructure\n{\n    public class HttpClientWrapper : IHttpClientWrapper\n    {\n        private readonly HttpClient _httpClient;\n\n        public HttpClientWrapper(IHttpClientFactory httpClientFactory)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n        }\n\n        public async Task<HttpResponseMessage> PostAsync(string url, string jsonContent, string apiKey)\n        {\n            using var requestMessage = new HttpRequestMessage(HttpMethod.Post, url);\n            requestMessage.Content = new StringContent(jsonContent, Encoding.UTF8, \"application/json\");\n            if (!string.IsNullOrWhiteSpace(apiKey))\n            {\n                requestMessage.Headers.Add(\"Authorization\", $\"Bearer {apiKey}\");\n            }\n\n            var response = await _httpClient.SendAsync(requestMessage);\n            return response;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "e7cd808c-3d48-4b05-bb14-a28769ab9153",
    "Name": "APIRateLimitingService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "0b57acb9-2530-4eed-8b7c-588ea059e049",
        "Name": "Program.cs",
        "ParentId": "e7cd808c-3d48-4b05-bb14-a28769ab9153",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing APIRateLimitingService.Middleware;\nusing APIRateLimitingService.Services;\nusing APIRateLimitingService.Models;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Configure services\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IRateLimitingService, RateLimitingService>();\nbuilder.Services.Configure<RateLimitConfiguration>(builder.Configuration.GetSection(\"RateLimitConfiguration\"));\nbuilder.Services.AddHttpContextAccessor();\n\nvar app = builder.Build();\n\n// Use rate limiting middleware\napp.UseMiddleware<RateLimitingMiddleware>();\n\napp.UseRouting();\napp.MapControllers();\n\napp.Run();\n",
        "Language": 0
      },
      {
        "Id": "c7ead19f-632f-4528-a15d-e6b9c661652b",
        "Name": "Controllers",
        "ParentId": "e7cd808c-3d48-4b05-bb14-a28769ab9153",
        "Type": 0,
        "Items": [
          {
            "Id": "e399aae5-1a33-45e4-b837-31accfb8a457",
            "Name": "RateLimitController.cs",
            "ParentId": "c7ead19f-632f-4528-a15d-e6b9c661652b",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing APIRateLimitingService.Services;\nusing APIRateLimitingService.Models;\n\nnamespace APIRateLimitingService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class RateLimitController : ControllerBase\n    {\n        private readonly IRateLimitingService _rateLimitingService;\n\n        public RateLimitController(IRateLimitingService rateLimitingService)\n        {\n            _rateLimitingService = rateLimitingService;\n        }\n\n        [HttpGet(\"status\")]\n        public ActionResult<RateLimitResult> GetStatus([FromQuery] string clientId)\n        {\n            if(string.IsNullOrEmpty(clientId))\n                return BadRequest(\"ClientId is required\");\n\n            var result = _rateLimitingService.GetRateLimitStatus(clientId);\n            return Ok(result);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "9292b2f5-84d6-42cc-a5c7-195886e3ee63",
        "Name": "Services",
        "ParentId": "e7cd808c-3d48-4b05-bb14-a28769ab9153",
        "Type": 0,
        "Items": [
          {
            "Id": "910f7170-94a9-493a-b514-31c606d6e70b",
            "Name": "IRateLimitingService.cs",
            "ParentId": "9292b2f5-84d6-42cc-a5c7-195886e3ee63",
            "Type": 1,
            "Text": "using APIRateLimitingService.Models;\n\nnamespace APIRateLimitingService.Services\n{\n    public interface IRateLimitingService\n    {\n        bool IsLimitExceeded(string clientIdentifier);\n        void RecordRequest(string clientIdentifier);\n        RateLimitResult GetRateLimitStatus(string clientIdentifier);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "c92d7ee3-1bd6-44c0-8f81-60f23bef639a",
            "Name": "RateLimitingService.cs",
            "ParentId": "9292b2f5-84d6-42cc-a5c7-195886e3ee63",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Concurrent;\nusing Microsoft.Extensions.Options;\nusing APIRateLimitingService.Models;\n\nnamespace APIRateLimitingService.Services\n{\n    public class RateLimitingService : IRateLimitingService\n    {\n        private class ClientRateLimit\n        {\n            public DateTime WindowStart { get; set; }\n            public int RequestCount { get; set; }\n        }\n\n        private readonly ConcurrentDictionary<string, ClientRateLimit> _clients = new ConcurrentDictionary<string, ClientRateLimit>();\n        private readonly int _maxRequests;\n        private readonly TimeSpan _windowTime;\n\n        public RateLimitingService(IOptions<RateLimitConfiguration> options)\n        {\n            var config = options.Value;\n            _maxRequests = config.MaxRequests;\n            _windowTime = TimeSpan.FromSeconds(config.WindowSeconds);\n        }\n\n        public bool IsLimitExceeded(string clientIdentifier)\n        {\n            if (!_clients.TryGetValue(clientIdentifier, out ClientRateLimit clientLimit))\n            {\n                return false;\n            }\n\n            var now = DateTime.UtcNow;\n            if (now - clientLimit.WindowStart > _windowTime)\n            {\n                return false;\n            }\n            return clientLimit.RequestCount >= _maxRequests;\n        }\n\n        public void RecordRequest(string clientIdentifier)\n        {\n            var now = DateTime.UtcNow;\n            _clients.AddOrUpdate(clientIdentifier,\n                key => new ClientRateLimit { WindowStart = now, RequestCount = 1 },\n                (key, existing) =>\n                {\n                    if (now - existing.WindowStart > _windowTime)\n                    {\n                        existing.WindowStart = now;\n                        existing.RequestCount = 1;\n                    }\n                    else\n                    {\n                        existing.RequestCount++;\n                    }\n                    return existing;\n                });\n        }\n\n        public RateLimitResult GetRateLimitStatus(string clientIdentifier)\n        {\n            var now = DateTime.UtcNow;\n            if (!_clients.TryGetValue(clientIdentifier, out ClientRateLimit clientLimit) || (now - clientLimit.WindowStart > _windowTime))\n            {\n                return new RateLimitResult\n                {\n                    RequestCount = 0,\n                    RemainingRequests = _maxRequests,\n                    ResetAfterSeconds = (int)_windowTime.TotalSeconds\n                };\n            }\n            int remaining = Math.Max(0, _maxRequests - clientLimit.RequestCount);\n            int resetAfter = (int)(_windowTime.TotalSeconds - (now - clientLimit.WindowStart).TotalSeconds);\n            return new RateLimitResult\n            {\n                RequestCount = clientLimit.RequestCount,\n                RemainingRequests = remaining,\n                ResetAfterSeconds = resetAfter\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "d3b117c5-dd37-495c-a443-b4f5f949430d",
        "Name": "Middleware",
        "ParentId": "e7cd808c-3d48-4b05-bb14-a28769ab9153",
        "Type": 0,
        "Items": [
          {
            "Id": "30d3dd56-8477-4f67-8cb3-fe1c6f01755b",
            "Name": "RateLimitingMiddleware.cs",
            "ParentId": "d3b117c5-dd37-495c-a443-b4f5f949430d",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing APIRateLimitingService.Services;\nusing Microsoft.Extensions.Logging;\n\nnamespace APIRateLimitingService.Middleware\n{\n    public class RateLimitingMiddleware\n    {\n        private readonly RequestDelegate _next;\n        private readonly IRateLimitingService _rateLimitingService;\n        private readonly ILogger<RateLimitingMiddleware> _logger;\n\n        public RateLimitingMiddleware(RequestDelegate next, IRateLimitingService rateLimitingService, ILogger<RateLimitingMiddleware> logger)\n        {\n            _next = next;\n            _rateLimitingService = rateLimitingService;\n            _logger = logger;\n        }\n\n        public async Task InvokeAsync(HttpContext context)\n        {\n            string clientIdentifier = context.Request.Headers[\"X-Client-ID\"];\n            if (string.IsNullOrEmpty(clientIdentifier))\n            {\n                clientIdentifier = context.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n            }\n\n            _rateLimitingService.RecordRequest(clientIdentifier);\n\n            if (_rateLimitingService.IsLimitExceeded(clientIdentifier))\n            {\n                _logger.LogWarning(\"Rate limit exceeded for client {ClientIdentifier}\", clientIdentifier);\n                context.Response.StatusCode = StatusCodes.Status429TooManyRequests;\n                await context.Response.WriteAsync(\"Too Many Requests\");\n                return;\n            }\n\n            await _next(context);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "1214baf6-5944-4792-939d-ade34cfe229a",
        "Name": "Models",
        "ParentId": "e7cd808c-3d48-4b05-bb14-a28769ab9153",
        "Type": 0,
        "Items": [
          {
            "Id": "8904dbef-d2ae-451e-b3e6-7263abf20814",
            "Name": "RateLimitConfiguration.cs",
            "ParentId": "1214baf6-5944-4792-939d-ade34cfe229a",
            "Type": 1,
            "Text": "namespace APIRateLimitingService.Models\n{\n    public class RateLimitConfiguration\n    {\n        public int MaxRequests { get; set; }\n        public int WindowSeconds { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "21d55927-93b4-4d8e-a5ee-aabd55dce975",
            "Name": "RateLimitResult.cs",
            "ParentId": "1214baf6-5944-4792-939d-ade34cfe229a",
            "Type": 1,
            "Text": "namespace APIRateLimitingService.Models\n{\n    public class RateLimitResult\n    {\n        public int RequestCount { get; set; }\n        public int RemainingRequests { get; set; }\n        public int ResetAfterSeconds { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "ecc79491-a984-4349-9adf-e7ce8dc33c6b",
    "Name": "ServiceRateLimiter",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "9b9e5132-9e36-4d96-9d59-7f5035f74854",
        "Name": "Program.cs",
        "ParentId": "ecc79491-a984-4349-9adf-e7ce8dc33c6b",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing ServiceRateLimiter.Middleware;\nusing ServiceRateLimiter.Extensions;\nusing ServiceRateLimiter.Services;\nusing ServiceRateLimiter.Data;\nusing ServiceRateLimiter.Models;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Configure services\nbuilder.Services.AddMemoryCache();\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IRateLimitStore, InMemoryRateLimitStore>();\nbuilder.Services.AddSingleton<IRateLimiterService, RateLimiterService>();\n\n// Bind RateLimitPolicy from configuration with defaults if not set\nvar rateLimitPolicy = new RateLimitPolicy();\nbuilder.Configuration.GetSection(\"RateLimitPolicy\").Bind(rateLimitPolicy);\nif(rateLimitPolicy.Limit == 0) rateLimitPolicy.Limit = 100;\nif(rateLimitPolicy.WindowSeconds == 0) rateLimitPolicy.WindowSeconds = 60;\nbuilder.Services.AddSingleton(rateLimitPolicy);\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseRateLimiter(); // Apply the rate limiting middleware\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "7f1f858f-cf46-47aa-92dd-04b83cec6c8a",
        "Name": "Middleware",
        "ParentId": "ecc79491-a984-4349-9adf-e7ce8dc33c6b",
        "Type": 0,
        "Items": [
          {
            "Id": "e2902539-2bf4-40d6-9293-b111321ceea4",
            "Name": "RateLimiterMiddleware.cs",
            "ParentId": "7f1f858f-cf46-47aa-92dd-04b83cec6c8a",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing ServiceRateLimiter.Services;\nusing System.Net;\n\nnamespace ServiceRateLimiter.Middleware\n{\n    public class RateLimiterMiddleware\n    {\n        private readonly RequestDelegate _next;\n        private readonly IRateLimiterService _rateLimiterService;\n\n        public RateLimiterMiddleware(RequestDelegate next, IRateLimiterService rateLimiterService)\n        {\n            _next = next;\n            _rateLimiterService = rateLimiterService;\n        }\n\n        public async Task Invoke(HttpContext context)\n        {\n            // Use the remote IP as the unique client identifier\n            var clientIdentifier = context.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n\n            if (!await _rateLimiterService.IsAllowedAsync(clientIdentifier, context.RequestAborted))\n            {\n                context.Response.StatusCode = (int)HttpStatusCode.TooManyRequests;\n                await context.Response.WriteAsync(\"Too Many Requests. Please try again later.\");\n                return;\n            }\n\n            await _next(context);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "ce03eabd-6c4b-4d1f-bd93-474e244c258b",
        "Name": "Extensions",
        "ParentId": "ecc79491-a984-4349-9adf-e7ce8dc33c6b",
        "Type": 0,
        "Items": [
          {
            "Id": "e6c40ff7-751a-4551-a9e9-4004c55f0598",
            "Name": "RateLimiterExtensions.cs",
            "ParentId": "ce03eabd-6c4b-4d1f-bd93-474e244c258b",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Builder;\nusing ServiceRateLimiter.Middleware;\n\nnamespace ServiceRateLimiter.Extensions\n{\n    public static class RateLimiterExtensions\n    {\n        public static IApplicationBuilder UseRateLimiter(this IApplicationBuilder app)\n        {\n            return app.UseMiddleware<RateLimiterMiddleware>();\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "d3b4b372-b010-47ec-a0d5-0b4f0a757065",
        "Name": "Services",
        "ParentId": "ecc79491-a984-4349-9adf-e7ce8dc33c6b",
        "Type": 0,
        "Items": [
          {
            "Id": "d914325d-d5a4-4aa6-b0b4-7bd64035f9d8",
            "Name": "IRateLimiterService.cs",
            "ParentId": "d3b4b372-b010-47ec-a0d5-0b4f0a757065",
            "Type": 1,
            "Text": "using System.Threading;\nusing System.Threading.Tasks;\n\nnamespace ServiceRateLimiter.Services\n{\n    public interface IRateLimiterService\n    {\n        Task<bool> IsAllowedAsync(string key, CancellationToken cancellationToken);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "89e7586a-879f-4770-9b03-ab29c9688451",
            "Name": "RateLimiterService.cs",
            "ParentId": "d3b4b372-b010-47ec-a0d5-0b4f0a757065",
            "Type": 1,
            "Text": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing ServiceRateLimiter.Data;\nusing ServiceRateLimiter.Models;\n\nnamespace ServiceRateLimiter.Services\n{\n    public class RateLimiterService : IRateLimiterService\n    {\n        private readonly IRateLimitStore _store;\n        private readonly RateLimitPolicy _policy;\n\n        public RateLimiterService(IRateLimitStore store, RateLimitPolicy policy)\n        {\n            _store = store;\n            _policy = policy;\n        }\n\n        public async Task<bool> IsAllowedAsync(string key, CancellationToken cancellationToken)\n        {\n            var now = DateTime.UtcNow;\n            var entry = await _store.GetRateLimitEntryAsync(key);\n            \n            if (entry == null)\n            {\n                await _store.SetRateLimitEntryAsync(key, 1, now);\n                return true;\n            }\n            else\n            {\n                // Check if the current time window has expired\n                if ((now - entry.Value.WindowStart).TotalSeconds > _policy.WindowSeconds)\n                {\n                    await _store.SetRateLimitEntryAsync(key, 1, now);\n                    return true;\n                }\n                else\n                {\n                    if (entry.Value.Count < _policy.Limit)\n                    {\n                        await _store.SetRateLimitEntryAsync(key, entry.Value.Count + 1, entry.Value.WindowStart);\n                        return true;\n                    }\n                    else\n                    {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "3211bb17-5ac4-4828-8c7c-c9647393c307",
        "Name": "Models",
        "ParentId": "ecc79491-a984-4349-9adf-e7ce8dc33c6b",
        "Type": 0,
        "Items": [
          {
            "Id": "26c88054-f135-4cab-83ab-3f0c62022ede",
            "Name": "RateLimitPolicy.cs",
            "ParentId": "3211bb17-5ac4-4828-8c7c-c9647393c307",
            "Type": 1,
            "Text": "namespace ServiceRateLimiter.Models\n{\n    public class RateLimitPolicy\n    {\n        public int Limit { get; set; }\n        public int WindowSeconds { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "bbaa0032-6bcd-4f09-b9ab-6037854003a7",
        "Name": "Data",
        "ParentId": "ecc79491-a984-4349-9adf-e7ce8dc33c6b",
        "Type": 0,
        "Items": [
          {
            "Id": "4405b451-4486-4d32-b207-6519245f13bb",
            "Name": "IRateLimitStore.cs",
            "ParentId": "bbaa0032-6bcd-4f09-b9ab-6037854003a7",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\n\nnamespace ServiceRateLimiter.Data\n{\n    public interface IRateLimitStore\n    {\n         Task<(int Count, DateTime WindowStart)?> GetRateLimitEntryAsync(string key);\n         Task SetRateLimitEntryAsync(string key, int count, DateTime windowStart);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "4cf30f29-06dc-41cf-9e20-67163019ed59",
            "Name": "InMemoryRateLimitStore.cs",
            "ParentId": "bbaa0032-6bcd-4f09-b9ab-6037854003a7",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Concurrent;\nusing System.Threading.Tasks;\n\nnamespace ServiceRateLimiter.Data\n{\n    public class InMemoryRateLimitStore : IRateLimitStore\n    {\n        private readonly ConcurrentDictionary<string, (int Count, DateTime WindowStart)> _store = new();\n\n        public Task<(int Count, DateTime WindowStart)?> GetRateLimitEntryAsync(string key)\n        {\n            if (_store.TryGetValue(key, out var value))\n            {\n                return Task.FromResult<(int, DateTime)?>(value);\n            }\n            return Task.FromResult<(int, DateTime)?>(null);\n        }\n\n        public Task SetRateLimitEntryAsync(string key, int count, DateTime windowStart)\n        {\n            _store.AddOrUpdate(key, (count, windowStart), (k, existing) => (count, windowStart));\n            return Task.CompletedTask;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "e82b3fd4-0946-4f5a-acc4-1bbdaffd7dbc",
        "Name": "Controllers",
        "ParentId": "ecc79491-a984-4349-9adf-e7ce8dc33c6b",
        "Type": 0,
        "Items": [
          {
            "Id": "f2d6e40e-9a2d-4275-bcd9-ed006fc87696",
            "Name": "TestController.cs",
            "ParentId": "e82b3fd4-0946-4f5a-acc4-1bbdaffd7dbc",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\n\nnamespace ServiceRateLimiter.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TestController : ControllerBase\n    {\n         [HttpGet(\"ping\")]\n         public IActionResult Ping() => Ok(\"pong\");\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "01e48628-adbc-4a1b-9c54-a5c72cf4c504",
    "Name": "ServiceHealthMonitor",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "7f65affa-82e2-47f1-9028-6b347cffce77",
        "Name": "Program.cs",
        "ParentId": "01e48628-adbc-4a1b-9c54-a5c72cf4c504",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ServiceHealthMonitor\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "ed6b38fb-bb73-4d9e-9d62-22613e7a75e8",
        "Name": "Startup.cs",
        "ParentId": "01e48628-adbc-4a1b-9c54-a5c72cf4c504",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing ServiceHealthMonitor.Services;\n\nnamespace ServiceHealthMonitor\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient();\n            // Register health check service as a singleton for continuous monitoring\n            services.AddSingleton<IHealthCheckService, HealthCheckService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "4079faa5-1828-4e78-9e57-d4d894af2511",
        "Name": "Controllers",
        "ParentId": "01e48628-adbc-4a1b-9c54-a5c72cf4c504",
        "Type": 0,
        "Items": [
          {
            "Id": "d404bd42-dd94-4ee4-91b3-79f28a43c3ed",
            "Name": "HealthController.cs",
            "ParentId": "4079faa5-1828-4e78-9e57-d4d894af2511",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing ServiceHealthMonitor.Services;\n\nnamespace ServiceHealthMonitor.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class HealthController : ControllerBase\n    {\n        private readonly IHealthCheckService _healthCheckService;\n\n        public HealthController(IHealthCheckService healthCheckService)\n        {\n            _healthCheckService = healthCheckService;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetServiceHealth()\n        {\n            try\n            {\n                var statuses = await _healthCheckService.CheckHealthAsync();\n                return Ok(statuses);\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, new { Message = \"An error occurred while checking service health.\", Details = ex.Message });\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "b4151898-8ac8-43c3-97a3-2704e12d132f",
        "Name": "Services",
        "ParentId": "01e48628-adbc-4a1b-9c54-a5c72cf4c504",
        "Type": 0,
        "Items": [
          {
            "Id": "bcb76a80-f217-4ce4-b7c2-f8ba69492d00",
            "Name": "IHealthCheckService.cs",
            "ParentId": "b4151898-8ac8-43c3-97a3-2704e12d132f",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing ServiceHealthMonitor.Models;\n\nnamespace ServiceHealthMonitor.Services\n{\n    public interface IHealthCheckService\n    {\n        Task<List<ServiceStatus>> CheckHealthAsync();\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "fbb9f7e4-7edb-4b9b-ba02-604787583362",
            "Name": "HealthCheckService.cs",
            "ParentId": "b4151898-8ac8-43c3-97a3-2704e12d132f",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing ServiceHealthMonitor.Models;\n\nnamespace ServiceHealthMonitor.Services\n{\n    public class HealthCheckService : IHealthCheckService\n    {\n        private readonly IHttpClientFactory _httpClientFactory;\n\n        // In production, these endpoints should be configurable\n        private readonly List<(string ServiceName, string Url)> _servicesToCheck = new List<(string, string)>\n        {\n            (\"AuthenticationService\", \"https://auth.example.com/health\"),\n            (\"PaymentService\", \"https://payment.example.com/health\"),\n            (\"NotificationService\", \"https://notification.example.com/health\")\n        };\n\n        public HealthCheckService(IHttpClientFactory httpClientFactory)\n        {\n            _httpClientFactory = httpClientFactory;\n        }\n\n        public async Task<List<ServiceStatus>> CheckHealthAsync()\n        {\n            var results = new List<ServiceStatus>();\n            var client = _httpClientFactory.CreateClient();\n\n            foreach (var service in _servicesToCheck)\n            {\n                var status = new ServiceStatus\n                {\n                    ServiceName = service.ServiceName,\n                    CheckedAt = DateTime.UtcNow\n                };\n\n                var stopwatch = Stopwatch.StartNew();\n\n                try\n                {\n                    // In a production environment, proper timeout and retry policies should be applied\n                    var response = await client.GetAsync(service.Url);\n                    stopwatch.Stop();\n                    status.ResponseTimeMs = stopwatch.ElapsedMilliseconds;\n                    status.IsHealthy = response.IsSuccessStatusCode;\n\n                    if (!response.IsSuccessStatusCode)\n                    {\n                        status.ErrorMessage = $\"Received status code {response.StatusCode}\";\n                    }\n                }\n                catch (Exception ex)\n                {\n                    stopwatch.Stop();\n                    status.ResponseTimeMs = stopwatch.ElapsedMilliseconds;\n                    status.IsHealthy = false;\n                    status.ErrorMessage = ex.Message;\n                }\n\n                results.Add(status);\n            }\n\n            return results;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "9cbbc7d5-3efd-4a8e-896e-3791ec610ca7",
        "Name": "Models",
        "ParentId": "01e48628-adbc-4a1b-9c54-a5c72cf4c504",
        "Type": 0,
        "Items": [
          {
            "Id": "362c2106-2d31-49a9-bae6-aeaf4d0836af",
            "Name": "ServiceStatus.cs",
            "ParentId": "9cbbc7d5-3efd-4a8e-896e-3791ec610ca7",
            "Type": 1,
            "Text": "using System;\n\nnamespace ServiceHealthMonitor.Models\n{\n    public class ServiceStatus\n    {\n        public string ServiceName { get; set; }\n        public bool IsHealthy { get; set; }\n        public long ResponseTimeMs { get; set; }\n        public DateTime CheckedAt { get; set; }\n        public string ErrorMessage { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "f3aab522-29c3-4841-8f5d-9c91a33f837d",
    "Name": "IncidentManagementSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "c95e0df3-6fbe-4d92-a45f-158983648585",
        "Name": "Program.cs",
        "ParentId": "f3aab522-29c3-4841-8f5d-9c91a33f837d",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing IncidentManagementSystem.Services;\nusing IncidentManagementSystem.Data;\nusing IncidentManagementSystem.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IIncidentService, IncidentService>();\nbuilder.Services.AddSingleton<IIncidentRepository, IncidentRepository>();\nbuilder.Services.AddSingleton<INotificationService, NotificationService>();\nbuilder.Services.AddSingleton<ILoggerService, LoggerService>();\nbuilder.Services.AddSingleton<IAuditService, AuditService>();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "ec4104c5-0a89-4ff3-be59-7b467c5f3eaf",
        "Name": "Controllers",
        "ParentId": "f3aab522-29c3-4841-8f5d-9c91a33f837d",
        "Type": 0,
        "Items": [
          {
            "Id": "9c40c5ef-ce18-45fc-9d03-e7a10a15b400",
            "Name": "IncidentController.cs",
            "ParentId": "ec4104c5-0a89-4ff3-be59-7b467c5f3eaf",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing IncidentManagementSystem.Models;\nusing IncidentManagementSystem.Services;\n\nnamespace IncidentManagementSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class IncidentController : ControllerBase\n    {\n        private readonly IIncidentService _incidentService;\n        \n        public IncidentController(IIncidentService incidentService)\n        {\n            _incidentService = incidentService;\n        }\n\n        [HttpPost(\"report\")]\n        public IActionResult ReportIncident([FromBody] IncidentReport report)\n        {\n            var incident = _incidentService.CreateIncident(report);\n            return CreatedAtAction(nameof(GetIncidentById), new { id = incident.IncidentId }, incident);\n        }\n\n        [HttpPost(\"resolve\")]\n        public IActionResult ResolveIncident([FromBody] IncidentResolution resolution)\n        {\n            var updatedIncident = _incidentService.ResolveIncident(resolution.IncidentId, resolution.ResolutionDetails);\n            if(updatedIncident == null)\n                return NotFound();\n            return Ok(updatedIncident);\n        }\n\n        [HttpGet(\"{id}\")]\n        public IActionResult GetIncidentById(string id)\n        {\n            var incident = _incidentService.GetIncidentById(id);\n            if(incident == null)\n                return NotFound();\n            return Ok(incident);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "7239aabe-8f21-454f-b255-346577dc1e01",
        "Name": "Models",
        "ParentId": "f3aab522-29c3-4841-8f5d-9c91a33f837d",
        "Type": 0,
        "Items": [
          {
            "Id": "34ae57a0-569f-4d03-bb51-3e028515e43f",
            "Name": "Incident.cs",
            "ParentId": "7239aabe-8f21-454f-b255-346577dc1e01",
            "Type": 1,
            "Text": "using System;\n\nnamespace IncidentManagementSystem.Models\n{\n    public class Incident\n    {\n        public string IncidentId { get; set; } = Guid.NewGuid().ToString();\n        public string Title { get; set; }\n        public string Description { get; set; }\n        public string Status { get; set; } = \"Reported\";\n        public DateTime ReportedAt { get; set; } = DateTime.UtcNow;\n        public DateTime? ResolvedAt { get; set; }\n        public string ResolutionDetails { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "6827a05f-0944-4cf6-bd00-d32dcf081038",
            "Name": "IncidentReport.cs",
            "ParentId": "7239aabe-8f21-454f-b255-346577dc1e01",
            "Type": 1,
            "Text": "namespace IncidentManagementSystem.Models\n{\n    public class IncidentReport\n    {\n        public string Title { get; set; }\n        public string Description { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "abe4ddba-5387-4190-a1a9-a24814dbc160",
            "Name": "IncidentResolution.cs",
            "ParentId": "7239aabe-8f21-454f-b255-346577dc1e01",
            "Type": 1,
            "Text": "namespace IncidentManagementSystem.Models\n{\n    public class IncidentResolution\n    {\n        public string IncidentId { get; set; }\n        public string ResolutionDetails { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "4ac0e3f0-a426-4ad1-abce-692d770345aa",
        "Name": "Services",
        "ParentId": "f3aab522-29c3-4841-8f5d-9c91a33f837d",
        "Type": 0,
        "Items": [
          {
            "Id": "db838924-0dab-4a63-bd53-cdbce7281066",
            "Name": "IIncidentService.cs",
            "ParentId": "4ac0e3f0-a426-4ad1-abce-692d770345aa",
            "Type": 1,
            "Text": "using IncidentManagementSystem.Models;\n\nnamespace IncidentManagementSystem.Services\n{\n    public interface IIncidentService\n    {\n        Incident CreateIncident(IncidentReport report);\n        Incident ResolveIncident(string incidentId, string resolutionDetails);\n        Incident GetIncidentById(string incidentId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "3cff2b48-c76d-4b40-a053-d1e608c322c1",
            "Name": "IncidentService.cs",
            "ParentId": "4ac0e3f0-a426-4ad1-abce-692d770345aa",
            "Type": 1,
            "Text": "using System;\nusing IncidentManagementSystem.Models;\nusing IncidentManagementSystem.Data;\nusing IncidentManagementSystem.Infrastructure;\n\nnamespace IncidentManagementSystem.Services\n{\n    public class IncidentService : IIncidentService\n    {\n        private readonly IIncidentRepository _repository;\n        private readonly INotificationService _notificationService;\n        private readonly IAuditService _auditService;\n        private readonly ILoggerService _logger;\n\n        public IncidentService(IIncidentRepository repository, INotificationService notificationService, IAuditService auditService, ILoggerService logger)\n        {\n            _repository = repository;\n            _notificationService = notificationService;\n            _auditService = auditService;\n            _logger = logger;\n        }\n\n        public Incident CreateIncident(IncidentReport report)\n        {\n            var incident = new Incident\n            {\n                Title = report.Title,\n                Description = report.Description\n            };\n            _repository.AddIncident(incident);\n            _auditService.LogAudit($\"Incident reported: {incident.IncidentId}\");\n            _logger.LogInfo($\"Incident created: {incident.IncidentId}\");\n            _notificationService.SendNotification($\"New incident reported: {incident.Title}\");\n            return incident;\n        }\n\n        public Incident ResolveIncident(string incidentId, string resolutionDetails)\n        {\n            var incident = _repository.GetIncident(incidentId);\n            if (incident == null)\n                return null;\n            incident.Status = \"Resolved\";\n            incident.ResolutionDetails = resolutionDetails;\n            incident.ResolvedAt = DateTime.UtcNow;\n            _repository.UpdateIncident(incident);\n            _auditService.LogAudit($\"Incident resolved: {incident.IncidentId}\");\n            _logger.LogInfo($\"Incident resolved: {incident.IncidentId}\");\n            _notificationService.SendNotification($\"Incident resolved: {incident.Title}\");\n            return incident;\n        }\n\n        public Incident GetIncidentById(string incidentId)\n        {\n            return _repository.GetIncident(incidentId);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "f7e2c90b-043f-4099-a2ed-2a142cb2f2cb",
        "Name": "Data",
        "ParentId": "f3aab522-29c3-4841-8f5d-9c91a33f837d",
        "Type": 0,
        "Items": [
          {
            "Id": "f92d9938-3d99-4741-91e7-cb8d33126cc6",
            "Name": "IIncidentRepository.cs",
            "ParentId": "f7e2c90b-043f-4099-a2ed-2a142cb2f2cb",
            "Type": 1,
            "Text": "using IncidentManagementSystem.Models;\n\nnamespace IncidentManagementSystem.Data\n{\n    public interface IIncidentRepository\n    {\n        void AddIncident(Incident incident);\n        Incident GetIncident(string incidentId);\n        void UpdateIncident(Incident incident);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "0be24602-5519-4e6c-a5d4-fb1fe63cf6bf",
            "Name": "IncidentRepository.cs",
            "ParentId": "f7e2c90b-043f-4099-a2ed-2a142cb2f2cb",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing IncidentManagementSystem.Models;\n\nnamespace IncidentManagementSystem.Data\n{\n    public class IncidentRepository : IIncidentRepository\n    {\n        private readonly ConcurrentDictionary<string, Incident> _store = new ConcurrentDictionary<string, Incident>();\n\n        public void AddIncident(Incident incident)\n        {\n            _store[incident.IncidentId] = incident;\n        }\n\n        public Incident GetIncident(string incidentId)\n        {\n            _store.TryGetValue(incidentId, out Incident incident);\n            return incident;\n        }\n\n        public void UpdateIncident(Incident incident)\n        {\n            _store[incident.IncidentId] = incident;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "74c8467e-6f6d-407e-9a2a-17490b2f5470",
        "Name": "Infrastructure",
        "ParentId": "f3aab522-29c3-4841-8f5d-9c91a33f837d",
        "Type": 0,
        "Items": [
          {
            "Id": "556065cc-3998-4d1a-8961-351c5a157baa",
            "Name": "NotificationService.cs",
            "ParentId": "74c8467e-6f6d-407e-9a2a-17490b2f5470",
            "Type": 1,
            "Text": "using System.Net.Mail;\n\nnamespace IncidentManagementSystem.Infrastructure\n{\n    public interface INotificationService\n    {\n        void SendNotification(string message);\n    }\n\n    public class NotificationService : INotificationService\n    {\n        public void SendNotification(string message)\n        {\n            using(var smtp = new SmtpClient(\"smtp.digitalbank.com\"))\n            {\n                var mail = new MailMessage(\"noreply@digitalbank.com\", \"alerts@digitalbank.com\")\n                {\n                    Subject = \"Incident Alert\",\n                    Body = message\n                };\n                smtp.Send(mail);\n            }\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "505f849c-d06b-4ed9-947c-769c80f64a6c",
            "Name": "LoggerService.cs",
            "ParentId": "74c8467e-6f6d-407e-9a2a-17490b2f5470",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace IncidentManagementSystem.Infrastructure\n{\n    public interface ILoggerService\n    {\n        void LogInfo(string message);\n        void LogError(string message, Exception ex);\n    }\n\n    public class LoggerService : ILoggerService\n    {\n        private readonly ILogger<LoggerService> _logger;\n        \n        public LoggerService(ILogger<LoggerService> logger)\n        {\n            _logger = logger;\n        }\n\n        public void LogInfo(string message)\n        {\n            _logger.LogInformation(message);\n        }\n\n        public void LogError(string message, Exception ex)\n        {\n            _logger.LogError(ex, message);\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "fc914c81-00b7-40fa-8629-5c34f1281533",
            "Name": "AuditService.cs",
            "ParentId": "74c8467e-6f6d-407e-9a2a-17490b2f5470",
            "Type": 1,
            "Text": "using System;\nusing System.IO;\n\nnamespace IncidentManagementSystem.Infrastructure\n{\n    public interface IAuditService\n    {\n        void LogAudit(string message);\n    }\n\n    public class AuditService : IAuditService\n    {\n        private readonly string _auditFilePath;\n\n        public AuditService()\n        {\n            _auditFilePath = \"audit.log\";\n        }\n\n        public void LogAudit(string message)\n        {\n            var logEntry = $\"{DateTime.UtcNow:o}: {message}{Environment.NewLine}\";\n            File.AppendAllText(_auditFilePath, logEntry);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "36b286d8-4e34-4d31-b114-a63eee9282a7",
    "Name": "BackupAndRecoveryService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "35b1e6a7-04df-4232-b690-a676cbb56aae",
        "Name": "Program.cs",
        "ParentId": "36b286d8-4e34-4d31-b114-a63eee9282a7",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace BackupAndRecoveryService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "c640c6ce-c469-43df-a592-6bffe10f5032",
        "Name": "Startup.cs",
        "ParentId": "36b286d8-4e34-4d31-b114-a63eee9282a7",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing BackupAndRecoveryService.Services;\nusing BackupAndRecoveryService.Data;\nusing BackupAndRecoveryService.Infrastructure;\n\nnamespace BackupAndRecoveryService\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IBackupService, BackupService>();\n            services.AddSingleton<IBackupRepository, BackupRepository>();\n            services.AddSingleton<IBackupLogger, BackupLogger>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            \n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "fa9c39fd-70a1-4a6e-bfc8-9ad6bca72514",
        "Name": "Controllers",
        "ParentId": "36b286d8-4e34-4d31-b114-a63eee9282a7",
        "Type": 0,
        "Items": [
          {
            "Id": "316ba385-2d03-45a0-958f-7cc29b64067c",
            "Name": "BackupController.cs",
            "ParentId": "fa9c39fd-70a1-4a6e-bfc8-9ad6bca72514",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing BackupAndRecoveryService.Models;\nusing BackupAndRecoveryService.Services;\n\nnamespace BackupAndRecoveryService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class BackupController : ControllerBase\n    {\n        private readonly IBackupService _backupService;\n\n        public BackupController(IBackupService backupService)\n        {\n            _backupService = backupService;\n        }\n\n        [HttpPost(\"backup\")]\n        public async Task<IActionResult> InitiateBackup([FromBody] BackupRequest request)\n        {\n            try\n            {\n                var result = await _backupService.StartBackupAsync(request);\n                return Ok(result);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { error = ex.Message });\n            }\n        }\n\n        [HttpPost(\"recovery\")]\n        public async Task<IActionResult> InitiateRecovery([FromBody] RecoveryRequest request)\n        {\n            try\n            {\n                var result = await _backupService.StartRecoveryAsync(request);\n                return Ok(result);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { error = ex.Message });\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "53fd15d2-f208-4f78-a65d-6e08d5102df5",
        "Name": "Services",
        "ParentId": "36b286d8-4e34-4d31-b114-a63eee9282a7",
        "Type": 0,
        "Items": [
          {
            "Id": "6aab7243-adc2-460f-90e2-81d7ceaee682",
            "Name": "IBackupService.cs",
            "ParentId": "53fd15d2-f208-4f78-a65d-6e08d5102df5",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing BackupAndRecoveryService.Models;\n\nnamespace BackupAndRecoveryService.Services\n{\n    public interface IBackupService\n    {\n        Task<BackupResponse> StartBackupAsync(BackupRequest request);\n        Task<RecoveryResponse> StartRecoveryAsync(RecoveryRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "85b9c0b9-09b7-4074-b157-d9f697d86f19",
            "Name": "BackupService.cs",
            "ParentId": "53fd15d2-f208-4f78-a65d-6e08d5102df5",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing BackupAndRecoveryService.Models;\nusing BackupAndRecoveryService.Infrastructure;\nusing BackupAndRecoveryService.Data;\nusing BackupAndRecoveryService.Utils;\n\nnamespace BackupAndRecoveryService.Services\n{\n    public class BackupService : IBackupService\n    {\n        private readonly IBackupRepository _repository;\n        private readonly IBackupLogger _logger;\n\n        public BackupService(IBackupRepository repository, IBackupLogger logger)\n        {\n            _repository = repository;\n            _logger = logger;\n        }\n\n        public async Task<BackupResponse> StartBackupAsync(BackupRequest request)\n        {\n            _logger.LogInfo($\"Initiating backup for database '{request.DatabaseName}' scheduled at {request.ScheduledTime}.\");\n\n            var backupJob = new BackupJob\n            {\n                JobId = Guid.NewGuid(),\n                DatabaseName = request.DatabaseName,\n                BackupDestination = request.BackupDestination,\n                ScheduledTime = request.ScheduledTime,\n                CreatedAt = DateTime.UtcNow,\n                Status = \"Scheduled\"\n            };\n\n            _repository.AddBackupJob(backupJob);\n\n            bool backupSuccess = await FileBackupHelper.PerformBackupAsync(request.DatabaseName, request.BackupDestination);\n\n            backupJob.Status = backupSuccess ? \"Completed\" : \"Failed\";\n            _repository.UpdateBackupJob(backupJob);\n\n            _logger.LogInfo($\"Backup job {backupJob.JobId} for database '{request.DatabaseName}' completed with status: {backupJob.Status}.\");\n\n            return new BackupResponse\n            {\n                Success = backupSuccess,\n                Message = backupSuccess ? \"Backup completed successfully.\" : \"Backup failed.\",\n                Timestamp = DateTime.UtcNow\n            };\n        }\n\n        public async Task<RecoveryResponse> StartRecoveryAsync(RecoveryRequest request)\n        {\n            _logger.LogInfo($\"Initiating recovery for database '{request.DatabaseName}' using backup file '{request.BackupFilePath}'.\");\n\n            bool recoverySuccess = await FileBackupHelper.PerformRecoveryAsync(request.DatabaseName, request.BackupFilePath);\n            string message = recoverySuccess ? \"Recovery completed successfully.\" : \"Recovery failed.\";\n\n            _logger.LogInfo($\"Recovery for database '{request.DatabaseName}' completed with status: {(recoverySuccess ? \"Completed\" : \"Failed\")}.\" );\n\n            return new RecoveryResponse\n            {\n                Success = recoverySuccess,\n                Message = message,\n                Timestamp = DateTime.UtcNow\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "2eac3b3e-a0bf-479a-96dc-d289ce586bbb",
        "Name": "Models",
        "ParentId": "36b286d8-4e34-4d31-b114-a63eee9282a7",
        "Type": 0,
        "Items": [
          {
            "Id": "d87832c4-fb56-49a2-bb4e-f2a1907ae78c",
            "Name": "BackupRequest.cs",
            "ParentId": "2eac3b3e-a0bf-479a-96dc-d289ce586bbb",
            "Type": 1,
            "Text": "using System;\n\nnamespace BackupAndRecoveryService.Models\n{\n    public class BackupRequest\n    {\n        public string DatabaseName { get; set; }\n        public string BackupDestination { get; set; }\n        public DateTime ScheduledTime { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "6c74037f-0d1e-4d6b-bb3b-5d6d4119c66b",
            "Name": "BackupResponse.cs",
            "ParentId": "2eac3b3e-a0bf-479a-96dc-d289ce586bbb",
            "Type": 1,
            "Text": "using System;\n\nnamespace BackupAndRecoveryService.Models\n{\n    public class BackupResponse\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n        public DateTime Timestamp { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "7da73c08-ab06-4706-a2ca-84ccf812374a",
            "Name": "RecoveryRequest.cs",
            "ParentId": "2eac3b3e-a0bf-479a-96dc-d289ce586bbb",
            "Type": 1,
            "Text": "namespace BackupAndRecoveryService.Models\n{\n    public class RecoveryRequest\n    {\n        public string DatabaseName { get; set; }\n        public string BackupFilePath { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "47749e9a-9e4f-4f52-8ec9-a292ab5ec93b",
            "Name": "RecoveryResponse.cs",
            "ParentId": "2eac3b3e-a0bf-479a-96dc-d289ce586bbb",
            "Type": 1,
            "Text": "using System;\n\nnamespace BackupAndRecoveryService.Models\n{\n    public class RecoveryResponse\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n        public DateTime Timestamp { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "574aec5c-5db3-4941-8b9f-2218296d2817",
            "Name": "BackupJob.cs",
            "ParentId": "2eac3b3e-a0bf-479a-96dc-d289ce586bbb",
            "Type": 1,
            "Text": "using System;\n\nnamespace BackupAndRecoveryService.Models\n{\n    public class BackupJob\n    {\n        public Guid JobId { get; set; }\n        public string DatabaseName { get; set; }\n        public string BackupDestination { get; set; }\n        public DateTime ScheduledTime { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public string Status { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "a2a42daf-db77-4ba4-b5e7-0353d7c60137",
        "Name": "Data",
        "ParentId": "36b286d8-4e34-4d31-b114-a63eee9282a7",
        "Type": 0,
        "Items": [
          {
            "Id": "7cb576f8-6a28-4abe-bf29-9952954fc7cd",
            "Name": "IBackupRepository.cs",
            "ParentId": "a2a42daf-db77-4ba4-b5e7-0353d7c60137",
            "Type": 1,
            "Text": "using System;\nusing BackupAndRecoveryService.Models;\n\nnamespace BackupAndRecoveryService.Data\n{\n    public interface IBackupRepository\n    {\n        void AddBackupJob(BackupJob job);\n        void UpdateBackupJob(BackupJob job);\n        BackupJob GetBackupJob(Guid jobId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "5bad2c93-b734-43fa-b738-679de68bfda8",
            "Name": "BackupRepository.cs",
            "ParentId": "a2a42daf-db77-4ba4-b5e7-0353d7c60137",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Concurrent;\nusing BackupAndRecoveryService.Models;\n\nnamespace BackupAndRecoveryService.Data\n{\n    public class BackupRepository : IBackupRepository\n    {\n        private readonly ConcurrentDictionary<Guid, BackupJob> _jobs = new ConcurrentDictionary<Guid, BackupJob>();\n\n        public void AddBackupJob(BackupJob job)\n        {\n            _jobs[job.JobId] = job;\n        }\n\n        public void UpdateBackupJob(BackupJob job)\n        {\n            _jobs[job.JobId] = job;\n        }\n\n        public BackupJob GetBackupJob(Guid jobId)\n        {\n            _jobs.TryGetValue(jobId, out BackupJob job);\n            return job;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "3670b349-3ca8-4300-bed1-39213f255b44",
        "Name": "Infrastructure",
        "ParentId": "36b286d8-4e34-4d31-b114-a63eee9282a7",
        "Type": 0,
        "Items": [
          {
            "Id": "8312e47d-c2ac-4c73-b96c-05665b6aecb1",
            "Name": "IBackupLogger.cs",
            "ParentId": "3670b349-3ca8-4300-bed1-39213f255b44",
            "Type": 1,
            "Text": "using System;\n\nnamespace BackupAndRecoveryService.Infrastructure\n{\n    public interface IBackupLogger\n    {\n        void LogInfo(string message);\n        void LogError(string message, Exception ex);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "f91a4518-22ba-481b-9218-3789e3c6de10",
            "Name": "BackupLogger.cs",
            "ParentId": "3670b349-3ca8-4300-bed1-39213f255b44",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace BackupAndRecoveryService.Infrastructure\n{\n    public class BackupLogger : IBackupLogger\n    {\n        private readonly ILogger<BackupLogger> _logger;\n\n        public BackupLogger(ILogger<BackupLogger> logger)\n        {\n            _logger = logger;\n        }\n\n        public void LogInfo(string message)\n        {\n            _logger.LogInformation(message);\n        }\n\n        public void LogError(string message, Exception ex)\n        {\n            _logger.LogError(ex, message);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "fc1b527e-c1f6-4196-bab2-38b81faee1d8",
        "Name": "Utils",
        "ParentId": "36b286d8-4e34-4d31-b114-a63eee9282a7",
        "Type": 0,
        "Items": [
          {
            "Id": "28bf4e8c-6a7f-4b28-8b65-7a02880eb88c",
            "Name": "FileBackupHelper.cs",
            "ParentId": "fc1b527e-c1f6-4196-bab2-38b81faee1d8",
            "Type": 1,
            "Text": "using System;\nusing System.IO;\nusing System.Threading.Tasks;\n\nnamespace BackupAndRecoveryService.Utils\n{\n    public static class FileBackupHelper\n    {\n        public static async Task<bool> PerformBackupAsync(string databaseName, string backupDestination)\n        {\n            try\n            {\n                string sourceFile = $\"/data/{databaseName}.db\";\n                string timestamp = DateTime.UtcNow.ToString(\"yyyyMMddHHmmss\");\n                string destFile = Path.Combine(backupDestination, $\"{databaseName}_{timestamp}.db\");\n\n                Directory.CreateDirectory(backupDestination);\n\n                using var sourceStream = new FileStream(sourceFile, FileMode.Open, FileAccess.Read, FileShare.Read);\n                using var destinationStream = new FileStream(destFile, FileMode.Create, FileAccess.Write, FileShare.None);\n                await sourceStream.CopyToAsync(destinationStream);\n\n                return true;\n            }\n            catch (Exception)\n            {\n                return false;\n            }\n        }\n\n        public static async Task<bool> PerformRecoveryAsync(string databaseName, string backupFilePath)\n        {\n            try\n            {\n                string destinationFile = $\"/data/{databaseName}.db\";\n                string destDir = Path.GetDirectoryName(destinationFile);\n                Directory.CreateDirectory(destDir);\n\n                using var sourceStream = new FileStream(backupFilePath, FileMode.Open, FileAccess.Read, FileShare.Read);\n                using var destinationStream = new FileStream(destinationFile, FileMode.Create, FileAccess.Write, FileShare.None);\n                await sourceStream.CopyToAsync(destinationStream);\n\n                return true;\n            }\n            catch (Exception)\n            {\n                return false;\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "a7e3c112-7f0c-4280-9719-ff0f91385938",
    "Name": "DisasterRecoveryModule",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "b8bd752b-65f8-4149-8356-69839bb4b6d2",
        "Name": "Program.cs",
        "ParentId": "a7e3c112-7f0c-4280-9719-ff0f91385938",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace DisasterRecoveryModule\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = WebApplication.CreateBuilder(args);\n\n            // Register services\n            builder.Services.AddControllers();\n            builder.Services.AddSingleton<Services.IRecoveryService, Services.RecoveryService>();\n            builder.Services.AddHostedService<Infrastructure.RecoveryMonitorService>();\n\n            var app = builder.Build();\n\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n\n            app.Run();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "fe1f4846-743a-4fdd-8fb7-3f01eba16009",
        "Name": "Controllers",
        "ParentId": "a7e3c112-7f0c-4280-9719-ff0f91385938",
        "Type": 0,
        "Items": [
          {
            "Id": "d04b8546-ecee-47b9-9872-ba230adf6500",
            "Name": "RecoveryController.cs",
            "ParentId": "fe1f4846-743a-4fdd-8fb7-3f01eba16009",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing DisasterRecoveryModule.Models;\nusing DisasterRecoveryModule.Services;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace DisasterRecoveryModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class RecoveryController : ControllerBase\n    {\n        private readonly IRecoveryService _recoveryService;\n\n        public RecoveryController(IRecoveryService recoveryService)\n        {\n            _recoveryService = recoveryService;\n        }\n\n        [HttpGet(\"health\")]\n        public async Task<ActionResult<RecoveryStatus>> GetHealthStatus()\n        {\n            var status = await _recoveryService.CheckHealthAsync();\n            return Ok(status);\n        }\n\n        [HttpPost(\"recover\")]\n        public async Task<ActionResult> InitiateRecovery([FromBody] RecoveryRequest request)\n        {\n            bool result = await _recoveryService.InitiateRecoveryAsync(request);\n            if (result)\n            {\n                return Ok(new { Message = \"Recovery process completed successfully.\" });\n            }\n            else\n            {\n                return StatusCode(500, new { Message = \"Recovery process failed. Check system logs for details.\" });\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "d2a884f1-3ddb-4fd1-b73f-2d57efbf9418",
        "Name": "Services",
        "ParentId": "a7e3c112-7f0c-4280-9719-ff0f91385938",
        "Type": 0,
        "Items": [
          {
            "Id": "736c70cc-454e-45bb-9100-a185865633ea",
            "Name": "IRecoveryService.cs",
            "ParentId": "d2a884f1-3ddb-4fd1-b73f-2d57efbf9418",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing DisasterRecoveryModule.Models;\n\nnamespace DisasterRecoveryModule.Services\n{\n    public interface IRecoveryService\n    {\n        Task<RecoveryStatus> CheckHealthAsync();\n        Task<bool> InitiateRecoveryAsync(RecoveryRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "427ea85c-aa9d-41b8-b034-3c79cb46711a",
            "Name": "RecoveryService.cs",
            "ParentId": "d2a884f1-3ddb-4fd1-b73f-2d57efbf9418",
            "Type": 1,
            "Text": "using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing DisasterRecoveryModule.Models;\nusing Microsoft.Extensions.Logging;\n\nnamespace DisasterRecoveryModule.Services\n{\n    public class RecoveryService : IRecoveryService\n    {\n        private readonly ILogger<RecoveryService> _logger;\n        private const string BackupDirectory = \"Backup\";\n        private const string ActiveDirectory = \"Active\";\n\n        public RecoveryService(ILogger<RecoveryService> logger)\n        {\n            _logger = logger;\n        }\n\n        public async Task<RecoveryStatus> CheckHealthAsync()\n        {\n            var status = new RecoveryStatus\n            {\n                LastChecked = DateTime.UtcNow\n            };\n\n            // Check if backup directory exists as a sign of system recoverability\n            if (Directory.Exists(BackupDirectory))\n            {\n                status.IsHealthy = true;\n                status.Message = \"Backup directory is available. System recovery can be initiated if needed.\";\n            }\n            else\n            {\n                status.IsHealthy = false;\n                status.Message = \"Backup directory is missing. System recovery may not be possible.\";\n            }\n            \n            await Task.CompletedTask;\n            return status;\n        }\n\n        public async Task<bool> InitiateRecoveryAsync(RecoveryRequest request)\n        {\n            try\n            {\n                _logger.LogInformation(\"Starting recovery process with force flag: {Force}\", request.Force);\n\n                if (!Directory.Exists(BackupDirectory))\n                {\n                    _logger.LogError(\"Backup directory not found. Recovery aborted.\");\n                    return false;\n                }\n\n                // Ensure the Active directory exists\n                if (!Directory.Exists(ActiveDirectory))\n                {\n                    Directory.CreateDirectory(ActiveDirectory);\n                }\n\n                // Copy all files from Backup to Active directory\n                var backupFiles = Directory.GetFiles(BackupDirectory);\n                if (backupFiles.Length == 0)\n                {\n                    _logger.LogError(\"No backup files found in the backup directory. Recovery aborted.\");\n                    return false;\n                }\n\n                foreach (var file in backupFiles)\n                {\n                    var fileName = Path.GetFileName(file);\n                    var destPath = Path.Combine(ActiveDirectory, fileName);\n                    File.Copy(file, destPath, true);\n                    _logger.LogInformation(\"Recovered file: {FileName}\", fileName);\n                }\n\n                // Additional recovery operations can be placed here, such as reinitializing services or clearing caches.\n                _logger.LogInformation(\"Recovery process completed successfully.\");\n                \n                await Task.CompletedTask;\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"An error occurred during the recovery process.\");\n                return false;\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "01f66bc3-6fc9-459e-8dbd-e062047a8045",
        "Name": "Models",
        "ParentId": "a7e3c112-7f0c-4280-9719-ff0f91385938",
        "Type": 0,
        "Items": [
          {
            "Id": "dfe081b7-819a-45d2-b2a3-73f3e3bbc7d0",
            "Name": "RecoveryStatus.cs",
            "ParentId": "01f66bc3-6fc9-459e-8dbd-e062047a8045",
            "Type": 1,
            "Text": "using System;\n\nnamespace DisasterRecoveryModule.Models\n{\n    public class RecoveryStatus\n    {\n        public bool IsHealthy { get; set; }\n        public string Message { get; set; }\n        public DateTime LastChecked { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "2445bf14-8dce-4282-b67f-7efbcf9ec3e7",
            "Name": "RecoveryRequest.cs",
            "ParentId": "01f66bc3-6fc9-459e-8dbd-e062047a8045",
            "Type": 1,
            "Text": "namespace DisasterRecoveryModule.Models\n{\n    public class RecoveryRequest\n    {\n        // Indicates whether to force the recovery even if the health check passes\n        public bool Force { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "b0ead103-2084-4cfa-9654-b0d4f7aea300",
        "Name": "Infrastructure",
        "ParentId": "a7e3c112-7f0c-4280-9719-ff0f91385938",
        "Type": 0,
        "Items": [
          {
            "Id": "95ce70fb-d92c-4476-b159-2b47cb0e1955",
            "Name": "RecoveryMonitorService.cs",
            "ParentId": "b0ead103-2084-4cfa-9654-b0d4f7aea300",
            "Type": 1,
            "Text": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing DisasterRecoveryModule.Services;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\n\nnamespace DisasterRecoveryModule.Infrastructure\n{\n    public class RecoveryMonitorService : BackgroundService\n    {\n        private readonly ILogger<RecoveryMonitorService> _logger;\n        private readonly IRecoveryService _recoveryService;\n\n        public RecoveryMonitorService(ILogger<RecoveryMonitorService> logger, IRecoveryService recoveryService)\n        {\n            _logger = logger;\n            _recoveryService = recoveryService;\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            _logger.LogInformation(\"Recovery Monitor Service is starting.\");\n            \n            while (!stoppingToken.IsCancellationRequested)\n            {\n                try\n                {\n                    var status = await _recoveryService.CheckHealthAsync();\n                    _logger.LogInformation(\"System Health Check at {Time}: {Message}\", status.LastChecked, status.Message);\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"Error during system health check in Recovery Monitor Service.\");\n                }\n\n                // Wait for 5 minutes before next health check\n                await Task.Delay(TimeSpan.FromMinutes(5), stoppingToken);\n            }\n            \n            _logger.LogInformation(\"Recovery Monitor Service is stopping.\");\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "95721616-e6e0-4916-b041-72de8da1d6f3",
    "Name": "SystemPerformanceProfiler",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "b12114ae-8923-445e-8106-7171ad9f4cc8",
        "Name": "Program.cs",
        "ParentId": "95721616-e6e0-4916-b041-72de8da1d6f3",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace SystemPerformanceProfiler\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "56f223fa-48fb-40a4-a607-3cffad901c1b",
        "Name": "Startup.cs",
        "ParentId": "95721616-e6e0-4916-b041-72de8da1d6f3",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing SystemPerformanceProfiler.Services;\n\nnamespace SystemPerformanceProfiler\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IPerformanceService, PerformanceService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "f1cf5d13-4901-45c8-ae4f-36fafed8e0c3",
        "Name": "Controllers",
        "ParentId": "95721616-e6e0-4916-b041-72de8da1d6f3",
        "Type": 0,
        "Items": [
          {
            "Id": "be95e47b-4eb9-422e-a12b-fcda48f68311",
            "Name": "PerformanceController.cs",
            "ParentId": "f1cf5d13-4901-45c8-ae4f-36fafed8e0c3",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing SystemPerformanceProfiler.Models;\nusing SystemPerformanceProfiler.Services;\n\nnamespace SystemPerformanceProfiler.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class PerformanceController : ControllerBase\n    {\n        private readonly IPerformanceService _performanceService;\n\n        public PerformanceController(IPerformanceService performanceService)\n        {\n            _performanceService = performanceService;\n        }\n\n        [HttpGet(\"metrics\")]\n        public ActionResult<PerformanceMetrics> GetMetrics()\n        {\n            var metrics = _performanceService.RetrieveMetrics();\n            return Ok(metrics);\n        }\n\n        [HttpGet(\"report\")]\n        public ActionResult<PerformanceReport> GetReport()\n        {\n            var report = _performanceService.AnalyzeMetrics();\n            return Ok(report);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "92a28136-f50a-4487-934b-e467b3c2d33b",
        "Name": "Services",
        "ParentId": "95721616-e6e0-4916-b041-72de8da1d6f3",
        "Type": 0,
        "Items": [
          {
            "Id": "364742f0-7184-4bd2-aa62-92f09f3105a9",
            "Name": "IPerformanceService.cs",
            "ParentId": "92a28136-f50a-4487-934b-e467b3c2d33b",
            "Type": 1,
            "Text": "using SystemPerformanceProfiler.Models;\n\nnamespace SystemPerformanceProfiler.Services\n{\n    public interface IPerformanceService\n    {\n        PerformanceMetrics RetrieveMetrics();\n        PerformanceReport AnalyzeMetrics();\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "555385cd-6d59-4fca-805c-a2b01926cdf2",
            "Name": "PerformanceService.cs",
            "ParentId": "92a28136-f50a-4487-934b-e467b3c2d33b",
            "Type": 1,
            "Text": "using System;\nusing System.Diagnostics;\nusing SystemPerformanceProfiler.Models;\n\nnamespace SystemPerformanceProfiler.Services\n{\n    public class PerformanceService : IPerformanceService\n    {\n        private readonly Process _process;\n        private DateTime _prevTime;\n        private double _prevCpuTime;\n        private readonly int _processorCount;\n        private const double CpuThreshold = 80.0;\n        private const double MemoryThreshold = 500.0; // in MB\n        private const int ThreadThreshold = 100;\n        private readonly object _lock = new object();\n        \n        public PerformanceService()\n        {\n            _process = Process.GetCurrentProcess();\n            _prevTime = DateTime.UtcNow;\n            _prevCpuTime = _process.TotalProcessorTime.TotalMilliseconds;\n            _processorCount = Environment.ProcessorCount;\n        }\n        \n        public PerformanceMetrics RetrieveMetrics()\n        {\n            lock (_lock)\n            {\n                DateTime currentTime = DateTime.UtcNow;\n                double currentCpuTime = _process.TotalProcessorTime.TotalMilliseconds;\n                double elapsedMilliseconds = (currentTime - _prevTime).TotalMilliseconds;\n                double cpuUsage = 0;\n\n                if (elapsedMilliseconds > 0)\n                {\n                    cpuUsage = ((currentCpuTime - _prevCpuTime) * 100.0) / (elapsedMilliseconds * _processorCount);\n                }\n\n                double memoryUsage = _process.WorkingSet64 / (1024.0 * 1024.0);\n                int threadCount = _process.Threads.Count;\n\n                PerformanceMetrics metrics = new PerformanceMetrics\n                {\n                    Timestamp = currentTime,\n                    CPUUsage = Math.Round(cpuUsage, 2),\n                    MemoryUsage = Math.Round(memoryUsage, 2),\n                    ThreadCount = threadCount\n                };\n\n                _prevTime = currentTime;\n                _prevCpuTime = currentCpuTime;\n                return metrics;\n            }\n        }\n        \n        public PerformanceReport AnalyzeMetrics()\n        {\n            PerformanceMetrics metrics = RetrieveMetrics();\n            bool cpuIssue = metrics.CPUUsage > CpuThreshold;\n            bool memoryIssue = metrics.MemoryUsage > MemoryThreshold;\n            bool threadIssue = metrics.ThreadCount > ThreadThreshold;\n            \n            bool isBottleneck = cpuIssue || memoryIssue || threadIssue;\n            string summary = \"System performance is within acceptable parameters.\";\n            string recommendations = \"No immediate actions required.\";\n            \n            if (isBottleneck)\n            {\n                summary = \"Potential performance bottlenecks detected.\";\n                recommendations = \"\";\n                if (cpuIssue)\n                {\n                    recommendations += \"High CPU usage detected. Consider optimizing processing tasks or scaling resources. \";\n                }\n                if (memoryIssue)\n                {\n                    recommendations += \"Excessive memory usage detected. Optimize memory utilization or upgrade memory capacity. \";\n                }\n                if (threadIssue)\n                {\n                    recommendations += \"High thread count detected. Review concurrent processing logic and thread management. \";\n                }\n                recommendations = recommendations.Trim();\n            }\n            \n            return new PerformanceReport\n            {\n                Summary = summary,\n                IsBottleneckDetected = isBottleneck,\n                Recommendations = recommendations,\n                Metrics = metrics\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "35804fb1-6758-4c03-a409-682c151f6754",
        "Name": "Models",
        "ParentId": "95721616-e6e0-4916-b041-72de8da1d6f3",
        "Type": 0,
        "Items": [
          {
            "Id": "3b502fda-0ea6-4e1f-ac47-306c67962099",
            "Name": "PerformanceMetrics.cs",
            "ParentId": "35804fb1-6758-4c03-a409-682c151f6754",
            "Type": 1,
            "Text": "using System;\n\nnamespace SystemPerformanceProfiler.Models\n{\n    public class PerformanceMetrics\n    {\n        public DateTime Timestamp { get; set; }\n        public double CPUUsage { get; set; }\n        public double MemoryUsage { get; set; }\n        public int ThreadCount { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "d806320a-8b7e-4ce9-a40f-56d458837164",
            "Name": "PerformanceReport.cs",
            "ParentId": "35804fb1-6758-4c03-a409-682c151f6754",
            "Type": 1,
            "Text": "namespace SystemPerformanceProfiler.Models\n{\n    public class PerformanceReport\n    {\n        public string Summary { get; set; }\n        public bool IsBottleneckDetected { get; set; }\n        public string Recommendations { get; set; }\n        public PerformanceMetrics Metrics { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "669c11ff-f143-473f-b4f9-2919a76e6038",
    "Name": "ErrorReportingService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "4e261a9f-f81f-47da-bc72-3fbd729136e2",
        "Name": "Program.cs",
        "ParentId": "669c11ff-f143-473f-b4f9-2919a76e6038",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing ErrorReportingService.Services;\nusing ErrorReportingService.Repositories;\nusing ErrorReportingService.Infrastructure;\nusing ErrorReportingService.Configurations;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Bind EmailSettings configuration\nbuilder.Services.Configure<EmailSettings>(builder.Configuration.GetSection(\"EmailSettings\"));\n\n// Register services, repositories, and infrastructure components\nbuilder.Services.AddSingleton<IErrorService, ErrorService>();\nbuilder.Services.AddSingleton<IErrorRepository, ErrorRepository>();\nbuilder.Services.AddSingleton<INotificationService, NotificationService>();\n\n// Add controllers\nbuilder.Services.AddControllers();\n\nvar app = builder.Build();\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "9debbdba-3da7-4167-9730-a386373c9488",
        "Name": "Controllers",
        "ParentId": "669c11ff-f143-473f-b4f9-2919a76e6038",
        "Type": 0,
        "Items": [
          {
            "Id": "2234f024-059b-441a-bc56-cdfab9b771fc",
            "Name": "ErrorController.cs",
            "ParentId": "9debbdba-3da7-4167-9730-a386373c9488",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing ErrorReportingService.Models;\nusing ErrorReportingService.Services;\nusing System.Collections.Generic;\n\nnamespace ErrorReportingService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ErrorController : ControllerBase\n    {\n        private readonly IErrorService _errorService;\n\n        public ErrorController(IErrorService errorService)\n        {\n            _errorService = errorService;\n        }\n\n        [HttpPost(\"report\")]\n        public async Task<IActionResult> ReportError([FromBody] ErrorReport report)\n        {\n            if(report == null)\n                return BadRequest(\"Error report is null.\");\n\n            await _errorService.ReportErrorAsync(report);\n            return Ok(new { Success = true });\n        }\n\n        [HttpGet(\"reports\")]\n        public async Task<ActionResult<IEnumerable<ErrorReport>>> GetReports()\n        {\n            var reports = await _errorService.GetErrorReportsAsync();\n            return Ok(reports);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "38646999-80b7-426d-96d0-054246e1a1e8",
        "Name": "Models",
        "ParentId": "669c11ff-f143-473f-b4f9-2919a76e6038",
        "Type": 0,
        "Items": [
          {
            "Id": "53b9fb00-c473-442b-acdd-9fc07375af0e",
            "Name": "ErrorReport.cs",
            "ParentId": "38646999-80b7-426d-96d0-054246e1a1e8",
            "Type": 1,
            "Text": "using System;\n\nnamespace ErrorReportingService.Models\n{\n    public class ErrorReport\n    {\n        public Guid ReportId { get; set; } = Guid.NewGuid();\n        public DateTime Timestamp { get; set; } = DateTime.UtcNow;\n        public string ErrorMessage { get; set; }\n        public string StackTrace { get; set; }\n        public string Severity { get; set; }\n        public string Source { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "f4ec27ad-a809-4e75-9d92-79591bde473c",
        "Name": "Configurations",
        "ParentId": "669c11ff-f143-473f-b4f9-2919a76e6038",
        "Type": 0,
        "Items": [
          {
            "Id": "768b9999-54be-4625-a80c-3e9fd10a2ca9",
            "Name": "EmailSettings.cs",
            "ParentId": "f4ec27ad-a809-4e75-9d92-79591bde473c",
            "Type": 1,
            "Text": "namespace ErrorReportingService.Configurations\n{\n    public class EmailSettings\n    {\n        public string SmtpServer { get; set; }\n        public int Port { get; set; }\n        public string Username { get; set; }\n        public string Password { get; set; }\n        public string FromEmail { get; set; }\n        public string ToEmail { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "38af926e-e86e-4a09-b2aa-6363ed45810e",
        "Name": "Services",
        "ParentId": "669c11ff-f143-473f-b4f9-2919a76e6038",
        "Type": 0,
        "Items": [
          {
            "Id": "c1b3eb52-4400-4906-9354-918788267383",
            "Name": "IErrorService.cs",
            "ParentId": "38af926e-e86e-4a09-b2aa-6363ed45810e",
            "Type": 1,
            "Text": "using ErrorReportingService.Models;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace ErrorReportingService.Services\n{\n    public interface IErrorService\n    {\n        Task ReportErrorAsync(ErrorReport report);\n        Task<IEnumerable<ErrorReport>> GetErrorReportsAsync();\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "47cf1a42-5a02-4469-b56e-7b2329fb9be3",
            "Name": "ErrorService.cs",
            "ParentId": "38af926e-e86e-4a09-b2aa-6363ed45810e",
            "Type": 1,
            "Text": "using ErrorReportingService.Models;\nusing ErrorReportingService.Repositories;\nusing ErrorReportingService.Infrastructure;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\n\nnamespace ErrorReportingService.Services\n{\n    public class ErrorService : IErrorService\n    {\n        private readonly IErrorRepository _repository;\n        private readonly INotificationService _notificationService;\n        private readonly ILogger<ErrorService> _logger;\n\n        public ErrorService(IErrorRepository repository, INotificationService notificationService, ILogger<ErrorService> logger)\n        {\n            _repository = repository;\n            _notificationService = notificationService;\n            _logger = logger;\n        }\n\n        public async Task ReportErrorAsync(ErrorReport report)\n        {\n            // Persist the error report\n            await _repository.SaveErrorReportAsync(report);\n            _logger.LogError(\"Error reported: {ErrorMessage}, Severity: {Severity}\", report.ErrorMessage, report.Severity);\n\n            // Send notification for high severity errors\n            if(report.Severity?.ToLower() == \"high\" || report.Severity?.ToLower() == \"critical\")\n            {\n                await _notificationService.NotifyAsync(report);\n            }\n        }\n\n        public async Task<IEnumerable<ErrorReport>> GetErrorReportsAsync()\n        {\n            return await _repository.GetErrorReportsAsync();\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "481e22b2-48d0-41f4-ae6c-6e3da454df55",
        "Name": "Infrastructure",
        "ParentId": "669c11ff-f143-473f-b4f9-2919a76e6038",
        "Type": 0,
        "Items": [
          {
            "Id": "b308ef18-4d0a-46ef-bce4-98ec8ac80bb3",
            "Name": "INotificationService.cs",
            "ParentId": "481e22b2-48d0-41f4-ae6c-6e3da454df55",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing ErrorReportingService.Models;\n\nnamespace ErrorReportingService.Infrastructure\n{\n    public interface INotificationService\n    {\n        Task NotifyAsync(ErrorReport report);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "4c3975b0-bc57-4568-a508-cb00b3f9553e",
            "Name": "NotificationService.cs",
            "ParentId": "481e22b2-48d0-41f4-ae6c-6e3da454df55",
            "Type": 1,
            "Text": "using System.Net;\nusing System.Net.Mail;\nusing System.Threading.Tasks;\nusing ErrorReportingService.Models;\nusing ErrorReportingService.Configurations;\nusing Microsoft.Extensions.Options;\n\nnamespace ErrorReportingService.Infrastructure\n{\n    public class NotificationService : INotificationService\n    {\n        private readonly EmailSettings _emailSettings;\n\n        public NotificationService(IOptions<EmailSettings> emailSettings)\n        {\n            _emailSettings = emailSettings.Value;\n        }\n\n        public async Task NotifyAsync(ErrorReport report)\n        {\n            using (var client = new SmtpClient(_emailSettings.SmtpServer, _emailSettings.Port))\n            {\n                client.EnableSsl = true;\n                client.Credentials = new NetworkCredential(_emailSettings.Username, _emailSettings.Password);\n\n                var mail = new MailMessage\n                {\n                    From = new MailAddress(_emailSettings.FromEmail),\n                    Subject = \"Critical Error Reported\",\n                    Body = $\"A critical error was reported at {report.Timestamp}.\\nMessage: {report.ErrorMessage}\\nSource: {report.Source}\\nStackTrace: {report.StackTrace}\",\n                    IsBodyHtml = false\n                };\n\n                mail.To.Add(_emailSettings.ToEmail);\n                await client.SendMailAsync(mail);\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "0358742a-8bd6-4775-8f8e-4dcafafb85b4",
        "Name": "Repositories",
        "ParentId": "669c11ff-f143-473f-b4f9-2919a76e6038",
        "Type": 0,
        "Items": [
          {
            "Id": "5fdfbf61-9c1b-47e5-b08e-10ba7eaa9c3a",
            "Name": "IErrorRepository.cs",
            "ParentId": "0358742a-8bd6-4775-8f8e-4dcafafb85b4",
            "Type": 1,
            "Text": "using ErrorReportingService.Models;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace ErrorReportingService.Repositories\n{\n    public interface IErrorRepository\n    {\n        Task SaveErrorReportAsync(ErrorReport report);\n        Task<IEnumerable<ErrorReport>> GetErrorReportsAsync();\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "1fd9a3e8-b971-4726-9771-7f8849bf3869",
            "Name": "ErrorRepository.cs",
            "ParentId": "0358742a-8bd6-4775-8f8e-4dcafafb85b4",
            "Type": 1,
            "Text": "using ErrorReportingService.Models;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Data.SqlClient;\nusing System;\n\nnamespace ErrorReportingService.Repositories\n{\n    public class ErrorRepository : IErrorRepository\n    {\n        private readonly string _connectionString;\n\n        public ErrorRepository()\n        {\n            // In production, retrieve the connection string from a secure configuration source\n            _connectionString = Environment.GetEnvironmentVariable(\"ErrorReportingDbConnectionString\") \n                                ?? throw new InvalidOperationException(\"Database connection string not configured.\");\n        }\n\n        public async Task SaveErrorReportAsync(ErrorReport report)\n        {\n            var query = @\"INSERT INTO ErrorReports (ReportId, Timestamp, ErrorMessage, StackTrace, Severity, Source)\n                          VALUES (@ReportId, @Timestamp, @ErrorMessage, @StackTrace, @Severity, @Source)\";\n\n            using (var connection = new SqlConnection(_connectionString))\n            {\n                await connection.OpenAsync();\n                using (var command = new SqlCommand(query, connection))\n                {\n                    command.Parameters.AddWithValue(\"@ReportId\", report.ReportId);\n                    command.Parameters.AddWithValue(\"@Timestamp\", report.Timestamp);\n                    command.Parameters.AddWithValue(\"@ErrorMessage\", report.ErrorMessage);\n                    command.Parameters.AddWithValue(\"@StackTrace\", report.StackTrace ?? (object)DBNull.Value);\n                    command.Parameters.AddWithValue(\"@Severity\", report.Severity);\n                    command.Parameters.AddWithValue(\"@Source\", report.Source);\n\n                    await command.ExecuteNonQueryAsync();\n                }\n            }\n        }\n\n        public async Task<IEnumerable<ErrorReport>> GetErrorReportsAsync()\n        {\n            var query = \"SELECT ReportId, Timestamp, ErrorMessage, StackTrace, Severity, Source FROM ErrorReports\";\n            var reports = new List<ErrorReport>();\n\n            using (var connection = new SqlConnection(_connectionString))\n            {\n                await connection.OpenAsync();\n                using (var command = new SqlCommand(query, connection))\n                using (var reader = await command.ExecuteReaderAsync())\n                {\n                    while (await reader.ReadAsync())\n                    {\n                        reports.Add(new ErrorReport\n                        {\n                            ReportId = reader.GetGuid(0),\n                            Timestamp = reader.GetDateTime(1),\n                            ErrorMessage = reader.GetString(2),\n                            StackTrace = reader.IsDBNull(3) ? null : reader.GetString(3),\n                            Severity = reader.GetString(4),\n                            Source = reader.GetString(5)\n                        });\n                    }\n                }\n            }\n            return reports;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "741688f1-7f37-45f1-a001-3967a4bf9a14",
    "Name": "BusinessIntelligenceDashboard",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "c60176d2-61f1-4fb1-b505-bc00d1ac3e24",
        "Name": "Program.cs",
        "ParentId": "741688f1-7f37-45f1-a001-3967a4bf9a14",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace BusinessIntelligenceDashboard\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "f7972c04-714f-4d5b-b406-6778a5067fc5",
        "Name": "Startup.cs",
        "ParentId": "741688f1-7f37-45f1-a001-3967a4bf9a14",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing BusinessIntelligenceDashboard.Services;\nusing BusinessIntelligenceDashboard.Data;\nusing Microsoft.Extensions.Logging;\n\nnamespace BusinessIntelligenceDashboard\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IDashboardService, DashboardService>();\n            services.AddSingleton<IMetricRepository, MetricRepository>();\n            services.AddLogging(config =>\n            {\n                config.AddConsole();\n                config.AddDebug();\n            });\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            \n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "4432be08-c4cc-4140-91d8-d5b645b5d7e4",
        "Name": "Controllers",
        "ParentId": "741688f1-7f37-45f1-a001-3967a4bf9a14",
        "Type": 0,
        "Items": [
          {
            "Id": "0ab71b34-1583-4b40-a478-8e2f80e7ab70",
            "Name": "DashboardController.cs",
            "ParentId": "4432be08-c4cc-4140-91d8-d5b645b5d7e4",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing BusinessIntelligenceDashboard.Models;\nusing BusinessIntelligenceDashboard.Services;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\n\nnamespace BusinessIntelligenceDashboard.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class DashboardController : ControllerBase\n    {\n        private readonly IDashboardService _dashboardService;\n        private readonly ILogger<DashboardController> _logger;\n\n        public DashboardController(IDashboardService dashboardService, ILogger<DashboardController> logger)\n        {\n            _dashboardService = dashboardService;\n            _logger = logger;\n        }\n\n        [HttpGet(\"metrics\")]\n        public async Task<ActionResult<DashboardMetrics>> GetMetrics()\n        {\n            try\n            {\n                var metrics = await _dashboardService.GetDashboardMetricsAsync();\n                return Ok(metrics);\n            }\n            catch (System.Exception ex)\n            {\n                _logger.LogError(ex, \"Error while retrieving dashboard metrics.\");\n                return StatusCode(500, \"An error occurred while retrieving metrics.\");\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "9b0d9488-fd55-4037-9134-a37c5078da18",
        "Name": "Services",
        "ParentId": "741688f1-7f37-45f1-a001-3967a4bf9a14",
        "Type": 0,
        "Items": [
          {
            "Id": "7d8700c1-0baf-4ace-8851-290a67265b5f",
            "Name": "IDashboardService.cs",
            "ParentId": "9b0d9488-fd55-4037-9134-a37c5078da18",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing BusinessIntelligenceDashboard.Models;\n\nnamespace BusinessIntelligenceDashboard.Services\n{\n    public interface IDashboardService\n    {\n        Task<DashboardMetrics> GetDashboardMetricsAsync();\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "b68c3af4-a065-476e-b9a9-b96dc4619f03",
            "Name": "DashboardService.cs",
            "ParentId": "9b0d9488-fd55-4037-9134-a37c5078da18",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing BusinessIntelligenceDashboard.Data;\nusing BusinessIntelligenceDashboard.Models;\n\nnamespace BusinessIntelligenceDashboard.Services\n{\n    public class DashboardService : IDashboardService\n    {\n        private readonly IMetricRepository _metricRepository;\n\n        public DashboardService(IMetricRepository metricRepository)\n        {\n            _metricRepository = metricRepository;\n        }\n\n        public async Task<DashboardMetrics> GetDashboardMetricsAsync()\n        {\n            // Retrieve and aggregate metrics from the repository\n            var metrics = await _metricRepository.RetrieveMetricsAsync();\n            return metrics;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "a30a4e05-dfa7-4cbc-90cf-82d0b5f9aa39",
        "Name": "Data",
        "ParentId": "741688f1-7f37-45f1-a001-3967a4bf9a14",
        "Type": 0,
        "Items": [
          {
            "Id": "03de9f6b-bbcb-4901-8300-ae3a371ec54c",
            "Name": "IMetricRepository.cs",
            "ParentId": "a30a4e05-dfa7-4cbc-90cf-82d0b5f9aa39",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing BusinessIntelligenceDashboard.Models;\n\nnamespace BusinessIntelligenceDashboard.Data\n{\n    public interface IMetricRepository\n    {\n        Task<DashboardMetrics> RetrieveMetricsAsync();\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "5e6c9e46-3eaa-42ba-bb09-4ecb444f79d8",
            "Name": "MetricRepository.cs",
            "ParentId": "a30a4e05-dfa7-4cbc-90cf-82d0b5f9aa39",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing BusinessIntelligenceDashboard.Models;\nusing System.Collections.Generic;\n\nnamespace BusinessIntelligenceDashboard.Data\n{\n    public class MetricRepository : IMetricRepository\n    {\n        public async Task<DashboardMetrics> RetrieveMetricsAsync()\n        {\n            // In a production system, this method would interface with a database or external analytics service.\n            var metrics = new DashboardMetrics\n            {\n                TotalTransactions = 125000,\n                SuccessfulTransactions = 123450,\n                FailedTransactions = 1550,\n                AverageTransactionValue = 250.75m,\n                Revenue = 31250000m,\n                ActiveUsers = 45000,\n                NewAccounts = 1200,\n                Insights = new List<string>\n                {\n                    \"Revenue increased by 5% in the last quarter.\",\n                    \"User activity peaked during mid-week.\",\n                    \"Transaction failure rate is below industry average.\"\n                }\n            };\n            \n            return await Task.FromResult(metrics);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "02049bbe-bb25-4e1b-876f-9569a0c21501",
        "Name": "Models",
        "ParentId": "741688f1-7f37-45f1-a001-3967a4bf9a14",
        "Type": 0,
        "Items": [
          {
            "Id": "e7cd2a4b-a943-4e68-98b4-97eed81ed74e",
            "Name": "DashboardMetrics.cs",
            "ParentId": "02049bbe-bb25-4e1b-876f-9569a0c21501",
            "Type": 1,
            "Text": "using System.Collections.Generic;\n\nnamespace BusinessIntelligenceDashboard.Models\n{\n    public class DashboardMetrics\n    {\n        public int TotalTransactions { get; set; }\n        public int SuccessfulTransactions { get; set; }\n        public int FailedTransactions { get; set; }\n        public decimal AverageTransactionValue { get; set; }\n        public decimal Revenue { get; set; }\n        public int ActiveUsers { get; set; }\n        public int NewAccounts { get; set; }\n        public List<string> Insights { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "1f10e1e0-827b-4d5c-bcc3-036b855fd76b",
    "Name": "DataWarehouseConnector",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "5ae68329-1089-41b0-9198-485670a04d73",
        "Name": "Program.cs",
        "ParentId": "1f10e1e0-827b-4d5c-bcc3-036b855fd76b",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing DataWarehouseConnector.Services;\nusing DataWarehouseConnector.Connectors;\nusing DataWarehouseConnector.Configurations;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Bind warehouse configuration from appsettings.json\nbuilder.Services.Configure<WarehouseConfiguration>(builder.Configuration.GetSection(\"WarehouseConfiguration\"));\n\n// Register application services\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IWarehouseConnector, WarehouseConnector>();\nbuilder.Services.AddSingleton<IAnalyticsService, AnalyticsService>();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "7c7e0c73-a754-49cf-ae6b-3be7b678ada6",
        "Name": "Controllers",
        "ParentId": "1f10e1e0-827b-4d5c-bcc3-036b855fd76b",
        "Type": 0,
        "Items": [
          {
            "Id": "94c5b6c3-f0ff-4ab1-a547-781bca261306",
            "Name": "WarehouseController.cs",
            "ParentId": "7c7e0c73-a754-49cf-ae6b-3be7b678ada6",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing DataWarehouseConnector.Services;\nusing DataWarehouseConnector.Models;\n\nnamespace DataWarehouseConnector.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class WarehouseController : ControllerBase\n    {\n        private readonly IAnalyticsService _analyticsService;\n\n        public WarehouseController(IAnalyticsService analyticsService)\n        {\n            _analyticsService = analyticsService;\n        }\n\n        [HttpPost(\"query\")]\n        public IActionResult QueryWarehouse([FromBody] WarehouseQueryRequest request)\n        {\n            var result = _analyticsService.QueryData(request);\n            if (result == null || result.Data.Rows.Count == 0)\n            {\n                return NotFound();\n            }\n            return Ok(result);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "2ed8b8a1-0c91-49b1-b48c-0cb0cff923b0",
        "Name": "Services",
        "ParentId": "1f10e1e0-827b-4d5c-bcc3-036b855fd76b",
        "Type": 0,
        "Items": [
          {
            "Id": "643a73f5-6f9e-4535-a23f-08d37bcec3a8",
            "Name": "IAnalyticsService.cs",
            "ParentId": "2ed8b8a1-0c91-49b1-b48c-0cb0cff923b0",
            "Type": 1,
            "Text": "using DataWarehouseConnector.Models;\n\nnamespace DataWarehouseConnector.Services\n{\n    public interface IAnalyticsService\n    {\n        WarehouseQueryResult QueryData(WarehouseQueryRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "b16e3d7c-78c6-4a41-bffe-a9b5cbc92a2b",
            "Name": "AnalyticsService.cs",
            "ParentId": "2ed8b8a1-0c91-49b1-b48c-0cb0cff923b0",
            "Type": 1,
            "Text": "using System;\nusing DataWarehouseConnector.Connectors;\nusing DataWarehouseConnector.Models;\n\nnamespace DataWarehouseConnector.Services\n{\n    public class AnalyticsService : IAnalyticsService\n    {\n        private readonly IWarehouseConnector _warehouseConnector;\n\n        public AnalyticsService(IWarehouseConnector warehouseConnector)\n        {\n            _warehouseConnector = warehouseConnector;\n        }\n\n        public WarehouseQueryResult QueryData(WarehouseQueryRequest request)\n        {\n            try\n            {\n                var data = _warehouseConnector.ExecuteQuery(request.Query);\n                return new WarehouseQueryResult\n                {\n                    Data = data,\n                    RetrievedAt = DateTime.UtcNow\n                };\n            }\n            catch (Exception ex)\n            {\n                throw new ApplicationException(\"Error retrieving data from the warehouse.\", ex);\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "c8e3915e-425a-461f-a995-4b2aae84e78a",
        "Name": "Connectors",
        "ParentId": "1f10e1e0-827b-4d5c-bcc3-036b855fd76b",
        "Type": 0,
        "Items": [
          {
            "Id": "d5fd21df-7339-47d6-a295-6517081354e8",
            "Name": "IWarehouseConnector.cs",
            "ParentId": "c8e3915e-425a-461f-a995-4b2aae84e78a",
            "Type": 1,
            "Text": "using System.Data;\n\nnamespace DataWarehouseConnector.Connectors\n{\n    public interface IWarehouseConnector\n    {\n        DataTable ExecuteQuery(string query);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "ca8ee2ad-aeb0-425f-b475-7d261739afb0",
            "Name": "WarehouseConnector.cs",
            "ParentId": "c8e3915e-425a-461f-a995-4b2aae84e78a",
            "Type": 1,
            "Text": "using System.Data;\nusing System.Data.SqlClient;\nusing DataWarehouseConnector.Configurations;\nusing Microsoft.Extensions.Options;\n\nnamespace DataWarehouseConnector.Connectors\n{\n    public class WarehouseConnector : IWarehouseConnector\n    {\n        private readonly WarehouseConfiguration _config;\n\n        public WarehouseConnector(IOptions<WarehouseConfiguration> configOptions)\n        {\n            _config = configOptions.Value;\n        }\n\n        public DataTable ExecuteQuery(string query)\n        {\n            using (SqlConnection connection = new SqlConnection(_config.ConnectionString))\n            {\n                using (SqlCommand command = new SqlCommand(query, connection))\n                {\n                    command.CommandTimeout = _config.CommandTimeout;\n                    connection.Open();\n                    using (SqlDataReader reader = command.ExecuteReader())\n                    {\n                        DataTable dt = new DataTable();\n                        dt.Load(reader);\n                        return dt;\n                    }\n                }\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "5c0f93d8-b619-4c58-8ea2-fc684b994931",
        "Name": "Configurations",
        "ParentId": "1f10e1e0-827b-4d5c-bcc3-036b855fd76b",
        "Type": 0,
        "Items": [
          {
            "Id": "a3d9d4c3-451b-4bdb-b5c7-c09a2a4fee1b",
            "Name": "WarehouseConfiguration.cs",
            "ParentId": "5c0f93d8-b619-4c58-8ea2-fc684b994931",
            "Type": 1,
            "Text": "namespace DataWarehouseConnector.Configurations\n{\n    public class WarehouseConfiguration\n    {\n        public string ConnectionString { get; set; }\n        public int CommandTimeout { get; set; } = 30;\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "af9c108d-7eaa-426e-b0c9-8a7705be0997",
        "Name": "Models",
        "ParentId": "1f10e1e0-827b-4d5c-bcc3-036b855fd76b",
        "Type": 0,
        "Items": [
          {
            "Id": "fbb6173d-eac5-4479-9e8c-fc3e1626753d",
            "Name": "WarehouseQueryRequest.cs",
            "ParentId": "af9c108d-7eaa-426e-b0c9-8a7705be0997",
            "Type": 1,
            "Text": "namespace DataWarehouseConnector.Models\n{\n    public class WarehouseQueryRequest\n    {\n        public string Query { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "db766cd7-1c2a-4bc6-8598-5825f1627816",
            "Name": "WarehouseQueryResult.cs",
            "ParentId": "af9c108d-7eaa-426e-b0c9-8a7705be0997",
            "Type": 1,
            "Text": "using System;\nusing System.Data;\n\nnamespace DataWarehouseConnector.Models\n{\n    public class WarehouseQueryResult\n    {\n        public DataTable Data { get; set; }\n        public DateTime RetrievedAt { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "abb154f6-12ca-41bb-b237-1a1fc412e2ad",
    "Name": "MachineLearningIntegration",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "3ee72f6d-3ae9-4057-b555-640977d83428",
        "Name": "Program.cs",
        "ParentId": "abb154f6-12ca-41bb-b237-1a1fc412e2ad",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace MachineLearningIntegration\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "a2b7549b-c8a8-4d62-84ee-6d7d9a3314c0",
        "Name": "Startup.cs",
        "ParentId": "abb154f6-12ca-41bb-b237-1a1fc412e2ad",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing MachineLearningIntegration.Services;\nusing MachineLearningIntegration.Infrastructure;\n\nnamespace MachineLearningIntegration\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient();\n            services.AddSingleton<IMLService, MLService>();\n            services.AddSingleton<IMLModelClient, MLModelClient>();\n            services.AddSingleton<ILogService, LogService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "42343766-b6ad-4a99-8848-1b6ae814ef7e",
        "Name": "Controllers",
        "ParentId": "abb154f6-12ca-41bb-b237-1a1fc412e2ad",
        "Type": 0,
        "Items": [
          {
            "Id": "092f0b1f-f5f7-42ed-949d-af319dc8a4bd",
            "Name": "MLIntegrationController.cs",
            "ParentId": "42343766-b6ad-4a99-8848-1b6ae814ef7e",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing MachineLearningIntegration.Models;\nusing MachineLearningIntegration.Services;\n\nnamespace MachineLearningIntegration.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class MLIntegrationController : ControllerBase\n    {\n        private readonly IMLService _mlService;\n\n        public MLIntegrationController(IMLService mlService)\n        {\n            _mlService = mlService;\n        }\n\n        [HttpPost(\"process\")]\n        public async Task<IActionResult> ProcessInput([FromBody] InputData input)\n        {\n            if (input == null)\n            {\n                return BadRequest(\"Invalid input data\");\n            }\n            try\n            {\n                MLResult result = await _mlService.ProcessInputAsync(input);\n                return Ok(result);\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ex.Message);\n            }\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "a01b8e7b-aef6-41dd-803d-9a4320a6b2c7",
        "Name": "Services",
        "ParentId": "abb154f6-12ca-41bb-b237-1a1fc412e2ad",
        "Type": 0,
        "Items": [
          {
            "Id": "4400c9aa-af01-43df-8d59-7422361bafac",
            "Name": "IMLService.cs",
            "ParentId": "a01b8e7b-aef6-41dd-803d-9a4320a6b2c7",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing MachineLearningIntegration.Models;\n\nnamespace MachineLearningIntegration.Services\n{\n    public interface IMLService\n    {\n        Task<MLResult> ProcessInputAsync(InputData input);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "b557ad06-dd3a-4b69-a6cf-32788a869bbb",
            "Name": "MLService.cs",
            "ParentId": "a01b8e7b-aef6-41dd-803d-9a4320a6b2c7",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing MachineLearningIntegration.Models;\nusing MachineLearningIntegration.Infrastructure;\nusing MachineLearningIntegration.Utils;\n\nnamespace MachineLearningIntegration.Services\n{\n    public class MLService : IMLService\n    {\n        private readonly IMLModelClient _mlModelClient;\n        private readonly ILogService _logService;\n\n        public MLService(IMLModelClient mlModelClient, ILogService logService)\n        {\n            _mlModelClient = mlModelClient;\n            _logService = logService;\n        }\n\n        public async Task<MLResult> ProcessInputAsync(InputData input)\n        {\n            if (input == null)\n            {\n                throw new ArgumentNullException(nameof(input));\n            }\n\n            _logService.LogInformation($\"Processing machine learning input for customer {input.CustomerId}\");\n\n            // Call the external ML service via the model client\n            MLResult result = await _mlModelClient.CallModelAsync(input);\n\n            // Optionally process or transform the result according to business logic\n            _logService.LogInformation($\"Received ML result with score: {result.Score}\");\n\n            return result;\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "83ed06d9-b12a-4533-98ae-c91bdf1bdd6f",
        "Name": "Models",
        "ParentId": "abb154f6-12ca-41bb-b237-1a1fc412e2ad",
        "Type": 0,
        "Items": [
          {
            "Id": "14dd582c-0bb1-4c4e-bbd1-4658efbffc02",
            "Name": "InputData.cs",
            "ParentId": "83ed06d9-b12a-4533-98ae-c91bdf1bdd6f",
            "Type": 1,
            "Text": "using System.Collections.Generic;\n\nnamespace MachineLearningIntegration.Models\n{\n    public class InputData\n    {\n        public string CustomerId { get; set; }\n        public List<decimal> TransactionHistory { get; set; }\n        public Dictionary<string, string> AdditionalData { get; set; }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "ca87b02f-d91f-4fda-9589-5a1f4351d2aa",
            "Name": "MLResult.cs",
            "ParentId": "83ed06d9-b12a-4533-98ae-c91bdf1bdd6f",
            "Type": 1,
            "Text": "using System;\n\nnamespace MachineLearningIntegration.Models\n{\n    public class MLResult\n    {\n        public double Score { get; set; }\n        public string Prediction { get; set; }\n        public DateTime AnalysisTime { get; set; }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "22c9692d-8d5b-48ab-a79e-7f547aacd167",
        "Name": "Infrastructure",
        "ParentId": "abb154f6-12ca-41bb-b237-1a1fc412e2ad",
        "Type": 0,
        "Items": [
          {
            "Id": "d947368b-0c25-4aa3-a327-487b563f25b1",
            "Name": "IMLModelClient.cs",
            "ParentId": "22c9692d-8d5b-48ab-a79e-7f547aacd167",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing MachineLearningIntegration.Models;\n\nnamespace MachineLearningIntegration.Infrastructure\n{\n    public interface IMLModelClient\n    {\n        Task<MLResult> CallModelAsync(InputData input);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "a42255ee-a5a6-404f-a115-80d9078d4528",
            "Name": "MLModelClient.cs",
            "ParentId": "22c9692d-8d5b-48ab-a79e-7f547aacd167",
            "Type": 1,
            "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing MachineLearningIntegration.Models;\n\nnamespace MachineLearningIntegration.Infrastructure\n{\n    public class MLModelClient : IMLModelClient\n    {\n        private readonly HttpClient _httpClient;\n\n        public MLModelClient(IHttpClientFactory httpClientFactory)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n        }\n\n        public async Task<MLResult> CallModelAsync(InputData input)\n        {\n            // URL of the external machine learning prediction service\n            var url = \"https://mlservice.digitalbank.com/api/predict\";\n            \n            string jsonInput = JsonSerializer.Serialize(input);\n            var content = new StringContent(jsonInput, Encoding.UTF8, \"application/json\");\n            \n            HttpResponseMessage response = await _httpClient.PostAsync(url, content);\n            response.EnsureSuccessStatusCode();\n            \n            string responseString = await response.Content.ReadAsStringAsync();\n            var mlResult = JsonSerializer.Deserialize<MLResult>(responseString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n            \n            if (mlResult == null)\n            {\n                throw new Exception(\"Failed to parse response from ML service.\");\n            }\n            \n            return mlResult;\n        }\n    }\n}",
            "Language": 0
          },
          {
            "Id": "a58b21a8-1ee9-4ab7-9d7b-a5c63d2b44bd",
            "Name": "ILogService.cs",
            "ParentId": "22c9692d-8d5b-48ab-a79e-7f547aacd167",
            "Type": 1,
            "Text": "using System;\n\nnamespace MachineLearningIntegration.Infrastructure\n{\n    public interface ILogService\n    {\n        void LogInformation(string message);\n        void LogError(string message, Exception ex);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e59bb7ac-e2e2-46a6-977b-9cb2213fa7aa",
            "Name": "LogService.cs",
            "ParentId": "22c9692d-8d5b-48ab-a79e-7f547aacd167",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace MachineLearningIntegration.Infrastructure\n{\n    public class LogService : ILogService\n    {\n        private readonly ILogger<LogService> _logger;\n\n        public LogService(ILogger<LogService> logger)\n        {\n            _logger = logger;\n        }\n\n        public void LogInformation(string message)\n        {\n            _logger.LogInformation(message);\n        }\n\n        public void LogError(string message, Exception ex)\n        {\n            _logger.LogError(ex, message);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "b6761d9f-f0b2-40ea-b354-cfe9bdbf4a8a",
        "Name": "Utils",
        "ParentId": "abb154f6-12ca-41bb-b237-1a1fc412e2ad",
        "Type": 0,
        "Items": [
          {
            "Id": "e2d92929-8cd4-482f-ab51-d634d38ccf3b",
            "Name": "DataTransformer.cs",
            "ParentId": "b6761d9f-f0b2-40ea-b354-cfe9bdbf4a8a",
            "Type": 1,
            "Text": "using System.Collections.Generic;\n\nnamespace MachineLearningIntegration.Utils\n{\n    public static class DataTransformer\n    {\n        public static double ComputeAverage(List<decimal> values)\n        {\n            if (values == null || values.Count == 0)\n            {\n                return 0;\n            }\n            decimal sum = 0;\n            foreach (var value in values)\n            {\n                sum += value;\n            }\n            return (double)(sum / values.Count);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "e80a6661-9e5b-4788-9bff-4c03d516830b",
    "Name": "AnomalyDetectionEngine",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "4fa50f7a-9a1e-4add-b9f3-0cc409a16dcc",
        "Name": "Program.cs",
        "ParentId": "e80a6661-9e5b-4788-9bff-4c03d516830b",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing AnomalyDetectionEngine.Services;\nusing AnomalyDetectionEngine.Data;\nusing AnomalyDetectionEngine.Utils;\n\nnamespace AnomalyDetectionEngine\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = WebApplication.CreateBuilder(args);\n            builder.Services.AddControllers();\n            builder.Services.AddSingleton<IAnomalyDetectionService, AnomalyDetectionService>();\n            builder.Services.AddSingleton<IAnomalyRepository, AnomalyRepository>();\n            builder.Services.AddSingleton<AnomalyDetector>();\n            builder.Services.AddLogging();\n            \n            var app = builder.Build();\n            \n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n            \n            app.Run();\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "b9ca3ebe-202e-47a2-857c-44f1ce5de3df",
        "Name": "Controllers",
        "ParentId": "e80a6661-9e5b-4788-9bff-4c03d516830b",
        "Type": 0,
        "Items": [
          {
            "Id": "e373377c-58bb-4e74-a925-63f3271ec6ff",
            "Name": "AnomalyDetectionController.cs",
            "ParentId": "b9ca3ebe-202e-47a2-857c-44f1ce5de3df",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing AnomalyDetectionEngine.Services;\nusing AnomalyDetectionEngine.Models;\n\nnamespace AnomalyDetectionEngine.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class AnomalyDetectionController : ControllerBase\n    {\n        private readonly IAnomalyDetectionService _anomalyService;\n\n        public AnomalyDetectionController(IAnomalyDetectionService anomalyService)\n        {\n            _anomalyService = anomalyService;\n        }\n\n        [HttpPost(\"analyze\")]\n        public IActionResult AnalyzeTransaction([FromBody] Transaction transaction)\n        {\n            if (transaction == null)\n            {\n                return BadRequest(\"Invalid transaction data.\");\n            }\n            var report = _anomalyService.AnalyzeTransaction(transaction);\n            return Ok(report);\n        }\n\n        [HttpGet(\"{transactionId}\")]\n        public IActionResult GetAnomalyReport(string transactionId)\n        {\n            var report = _anomalyService.GetAnomalyReport(transactionId);\n            if (report == null)\n            {\n                return NotFound(\"Report not found.\");\n            }\n            return Ok(report);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "9d1909da-081e-4a05-ada9-7922799b3565",
        "Name": "Services",
        "ParentId": "e80a6661-9e5b-4788-9bff-4c03d516830b",
        "Type": 0,
        "Items": [
          {
            "Id": "51ecfc0e-8865-4619-962e-e94c41272408",
            "Name": "IAnomalyDetectionService.cs",
            "ParentId": "9d1909da-081e-4a05-ada9-7922799b3565",
            "Type": 1,
            "Text": "using AnomalyDetectionEngine.Models;\n\nnamespace AnomalyDetectionEngine.Services\n{\n    public interface IAnomalyDetectionService\n    {\n        AnomalyReport AnalyzeTransaction(Transaction transaction);\n        AnomalyReport GetAnomalyReport(string transactionId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "0953cb25-e0a0-4900-aa31-179c8b30ef9b",
            "Name": "AnomalyDetectionService.cs",
            "ParentId": "9d1909da-081e-4a05-ada9-7922799b3565",
            "Type": 1,
            "Text": "using System;\nusing AnomalyDetectionEngine.Models;\nusing AnomalyDetectionEngine.Data;\nusing AnomalyDetectionEngine.Utils;\n\nnamespace AnomalyDetectionEngine.Services\n{\n    public class AnomalyDetectionService : IAnomalyDetectionService\n    {\n        private readonly IAnomalyRepository _repository;\n        private readonly AnomalyDetector _detector;\n\n        public AnomalyDetectionService(IAnomalyRepository repository, AnomalyDetector detector)\n        {\n            _repository = repository;\n            _detector = detector;\n        }\n\n        public AnomalyReport AnalyzeTransaction(Transaction transaction)\n        {\n            if (transaction == null)\n            {\n                throw new ArgumentNullException(nameof(transaction));\n            }\n            bool isAnomalous = _detector.IsAnomalous(transaction);\n            var report = new AnomalyReport\n            {\n                TransactionId = transaction.TransactionId,\n                IsAnomalous = isAnomalous,\n                AnomalyScore = _detector.CalculateAnomalyScore(transaction),\n                AnalysisDate = DateTime.UtcNow,\n                Details = isAnomalous ? \"Transaction flagged as anomalous due to deviation from historical patterns.\" : \"Transaction is within normal parameters.\"\n            };\n            _repository.SaveReport(report);\n            return report;\n        }\n\n        public AnomalyReport GetAnomalyReport(string transactionId)\n        {\n            return _repository.GetReport(transactionId);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "ff286860-7657-4672-bf90-6cdb580156d3",
        "Name": "Models",
        "ParentId": "e80a6661-9e5b-4788-9bff-4c03d516830b",
        "Type": 0,
        "Items": [
          {
            "Id": "0a1d68e7-647e-4c1a-9379-4c97f6736a44",
            "Name": "Transaction.cs",
            "ParentId": "ff286860-7657-4672-bf90-6cdb580156d3",
            "Type": 1,
            "Text": "using System;\n\nnamespace AnomalyDetectionEngine.Models\n{\n    public class Transaction\n    {\n        public string TransactionId { get; set; }\n        public string SourceAccount { get; set; }\n        public string DestinationAccount { get; set; }\n        public decimal Amount { get; set; }\n        public DateTime Timestamp { get; set; }\n        public string Currency { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "904d0759-671e-40b6-adb0-38f835d268cd",
            "Name": "AnomalyReport.cs",
            "ParentId": "ff286860-7657-4672-bf90-6cdb580156d3",
            "Type": 1,
            "Text": "using System;\n\nnamespace AnomalyDetectionEngine.Models\n{\n    public class AnomalyReport\n    {\n        public string TransactionId { get; set; }\n        public bool IsAnomalous { get; set; }\n        public double AnomalyScore { get; set; }\n        public DateTime AnalysisDate { get; set; }\n        public string Details { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "37bdcfab-3dbf-43ec-9af2-4f2a59ba9d4f",
        "Name": "Data",
        "ParentId": "e80a6661-9e5b-4788-9bff-4c03d516830b",
        "Type": 0,
        "Items": [
          {
            "Id": "063cbb25-1f5b-4c8e-95e5-62457d6d02ed",
            "Name": "IAnomalyRepository.cs",
            "ParentId": "37bdcfab-3dbf-43ec-9af2-4f2a59ba9d4f",
            "Type": 1,
            "Text": "using AnomalyDetectionEngine.Models;\n\nnamespace AnomalyDetectionEngine.Data\n{\n    public interface IAnomalyRepository\n    {\n        void SaveReport(AnomalyReport report);\n        AnomalyReport GetReport(string transactionId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "8bfcd39d-8a82-4467-89e3-223aa99362a0",
            "Name": "AnomalyRepository.cs",
            "ParentId": "37bdcfab-3dbf-43ec-9af2-4f2a59ba9d4f",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing AnomalyDetectionEngine.Models;\n\nnamespace AnomalyDetectionEngine.Data\n{\n    public class AnomalyRepository : IAnomalyRepository\n    {\n        private readonly ConcurrentDictionary<string, AnomalyReport> _reportStore = new ConcurrentDictionary<string, AnomalyReport>();\n\n        public void SaveReport(AnomalyReport report)\n        {\n            _reportStore[report.TransactionId] = report;\n        }\n\n        public AnomalyReport GetReport(string transactionId)\n        {\n            _reportStore.TryGetValue(transactionId, out AnomalyReport report);\n            return report;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "9d2e954c-9d4a-4034-844d-a34e40011b79",
        "Name": "Utils",
        "ParentId": "e80a6661-9e5b-4788-9bff-4c03d516830b",
        "Type": 0,
        "Items": [
          {
            "Id": "352981b5-4753-4774-b340-719d4b8707c8",
            "Name": "AnomalyDetector.cs",
            "ParentId": "9d2e954c-9d4a-4034-844d-a34e40011b79",
            "Type": 1,
            "Text": "using AnomalyDetectionEngine.Models;\n\nnamespace AnomalyDetectionEngine.Utils\n{\n    public class AnomalyDetector\n    {\n        // Determines if a transaction is anomalous based on a predefined threshold.\n        public bool IsAnomalous(Transaction transaction)\n        {\n            // Example logic: a transaction is anomalous if the amount exceeds a set threshold.\n            decimal threshold = 10000m;\n            return transaction.Amount > threshold;\n        }\n\n        // Calculates an anomaly score where 0 indicates normal and 1 indicates high anomaly.\n        public double CalculateAnomalyScore(Transaction transaction)\n        {\n            decimal threshold = 10000m;\n            if (transaction.Amount <= threshold)\n            {\n                return 0.0;\n            }\n            double score = (double)((transaction.Amount - threshold) / threshold);\n            return score > 1.0 ? 1.0 : score;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "b32a8949-2e61-486f-ad3d-787ddbc6a723",
    "Name": "CustomerSegmentationTool",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "50e07f4f-8e1b-47d8-a60a-bbd477cfde49",
        "Name": "Program.cs",
        "ParentId": "b32a8949-2e61-486f-ad3d-787ddbc6a723",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace CustomerSegmentationTool\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "43f3e4d0-74cc-4997-b8ae-075199f807b8",
        "Name": "Startup.cs",
        "ParentId": "b32a8949-2e61-486f-ad3d-787ddbc6a723",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing CustomerSegmentationTool.Services;\nusing CustomerSegmentationTool.Data;\n\nnamespace CustomerSegmentationTool\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<ISegmentationService, SegmentationService>();\n            services.AddSingleton<ICustomerRepository, CustomerRepository>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "dc712e21-5211-4b64-ae83-12264ad9c2c7",
        "Name": "Controllers",
        "ParentId": "b32a8949-2e61-486f-ad3d-787ddbc6a723",
        "Type": 0,
        "Items": [
          {
            "Id": "94babf24-9833-4d30-9ef7-a4701e35ad3e",
            "Name": "CustomerSegmentationController.cs",
            "ParentId": "dc712e21-5211-4b64-ae83-12264ad9c2c7",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing CustomerSegmentationTool.Services;\nusing CustomerSegmentationTool.Models;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\n\nnamespace CustomerSegmentationTool.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class CustomerSegmentationController : ControllerBase\n    {\n        private readonly ISegmentationService _segmentationService;\n\n        public CustomerSegmentationController(ISegmentationService segmentationService)\n        {\n            _segmentationService = segmentationService;\n        }\n\n        [HttpGet(\"segments\")]\n        public async Task<ActionResult<IEnumerable<Segment>>> GetCustomerSegments()\n        {\n            var segments = await _segmentationService.GenerateCustomerSegmentsAsync();\n            return Ok(segments);\n        }\n\n        [HttpPost(\"segment\")]\n        public async Task<ActionResult<SegmentationResponse>> SegmentCustomer([FromBody] SegmentationRequest request)\n        {\n            var response = await _segmentationService.SegmentCustomerAsync(request);\n            return Ok(response);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "916ddf30-9d00-47fa-b1b1-e84fc960a357",
        "Name": "Services",
        "ParentId": "b32a8949-2e61-486f-ad3d-787ddbc6a723",
        "Type": 0,
        "Items": [
          {
            "Id": "dff2b372-7582-4ff8-9052-2deb7c40daa1",
            "Name": "ISegmentationService.cs",
            "ParentId": "916ddf30-9d00-47fa-b1b1-e84fc960a357",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing CustomerSegmentationTool.Models;\n\nnamespace CustomerSegmentationTool.Services\n{\n    public interface ISegmentationService\n    {\n        Task<IEnumerable<Segment>> GenerateCustomerSegmentsAsync();\n        Task<SegmentationResponse> SegmentCustomerAsync(SegmentationRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "92dd1075-352e-42b3-85cc-d13509e3ce07",
            "Name": "SegmentationService.cs",
            "ParentId": "916ddf30-9d00-47fa-b1b1-e84fc960a357",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing CustomerSegmentationTool.Models;\nusing CustomerSegmentationTool.Data;\nusing CustomerSegmentationTool.Utils;\n\nnamespace CustomerSegmentationTool.Services\n{\n    public class SegmentationService : ISegmentationService\n    {\n        private readonly ICustomerRepository _customerRepository;\n\n        public SegmentationService(ICustomerRepository customerRepository)\n        {\n            _customerRepository = customerRepository;\n        }\n\n        public async Task<IEnumerable<Segment>> GenerateCustomerSegmentsAsync()\n        {\n            var customers = await _customerRepository.GetAllCustomersAsync();\n            var segments = customers.Select(c => SegmentCalculator.CalculateSegment(c)).ToList();\n            return segments;\n        }\n\n        public async Task<SegmentationResponse> SegmentCustomerAsync(SegmentationRequest request)\n        {\n            var customer = await _customerRepository.GetCustomerByIdAsync(request.CustomerId);\n            if (customer == null)\n            {\n                return new SegmentationResponse { Success = false, Message = \"Customer not found\", CustomerSegment = null };\n            }\n            var segment = SegmentCalculator.CalculateSegment(customer);\n            return new SegmentationResponse { Success = true, Message = \"Segmentation successful\", CustomerSegment = segment };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "99db82b4-e604-4251-8a7f-c6721d4ac46f",
        "Name": "Data",
        "ParentId": "b32a8949-2e61-486f-ad3d-787ddbc6a723",
        "Type": 0,
        "Items": [
          {
            "Id": "bf846b7a-ee0a-4072-8bcc-ab14631b4a69",
            "Name": "ICustomerRepository.cs",
            "ParentId": "99db82b4-e604-4251-8a7f-c6721d4ac46f",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing CustomerSegmentationTool.Models;\n\nnamespace CustomerSegmentationTool.Data\n{\n    public interface ICustomerRepository\n    {\n        Task<IEnumerable<Customer>> GetAllCustomersAsync();\n        Task<Customer> GetCustomerByIdAsync(string customerId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "b506b26d-85ca-47d8-9db6-d7233f77616a",
            "Name": "CustomerRepository.cs",
            "ParentId": "99db82b4-e604-4251-8a7f-c6721d4ac46f",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing System.Data.SqlClient;\nusing System.Threading.Tasks;\nusing CustomerSegmentationTool.Models;\nusing Microsoft.Extensions.Configuration;\n\nnamespace CustomerSegmentationTool.Data\n{\n    public class CustomerRepository : ICustomerRepository\n    {\n        private readonly string _connectionString;\n\n        public CustomerRepository(IConfiguration configuration)\n        {\n            _connectionString = configuration.GetConnectionString(\"DefaultConnection\");\n        }\n\n        public async Task<IEnumerable<Customer>> GetAllCustomersAsync()\n        {\n            var customers = new List<Customer>();\n            using (var connection = new SqlConnection(_connectionString))\n            {\n                await connection.OpenAsync();\n                var command = new SqlCommand(\"SELECT CustomerId, Name, Age, AnnualIncome, TransactionHistoryScore FROM Customers\", connection);\n                using (var reader = await command.ExecuteReaderAsync())\n                {\n                    while (await reader.ReadAsync())\n                    {\n                        customers.Add(new Customer\n                        {\n                            CustomerId = reader[\"CustomerId\"].ToString(),\n                            Name = reader[\"Name\"].ToString(),\n                            Age = int.Parse(reader[\"Age\"].ToString()),\n                            AnnualIncome = decimal.Parse(reader[\"AnnualIncome\"].ToString()),\n                            TransactionHistoryScore = double.Parse(reader[\"TransactionHistoryScore\"].ToString())\n                        });\n                    }\n                }\n            }\n            return customers;\n        }\n\n        public async Task<Customer> GetCustomerByIdAsync(string customerId)\n        {\n            Customer customer = null;\n            using (var connection = new SqlConnection(_connectionString))\n            {\n                await connection.OpenAsync();\n                var command = new SqlCommand(\"SELECT CustomerId, Name, Age, AnnualIncome, TransactionHistoryScore FROM Customers WHERE CustomerId = @CustomerId\", connection);\n                command.Parameters.AddWithValue(\"@CustomerId\", customerId);\n                using (var reader = await command.ExecuteReaderAsync())\n                {\n                    if (await reader.ReadAsync())\n                    {\n                        customer = new Customer\n                        {\n                            CustomerId = reader[\"CustomerId\"].ToString(),\n                            Name = reader[\"Name\"].ToString(),\n                            Age = int.Parse(reader[\"Age\"].ToString()),\n                            AnnualIncome = decimal.Parse(reader[\"AnnualIncome\"].ToString()),\n                            TransactionHistoryScore = double.Parse(reader[\"TransactionHistoryScore\"].ToString())\n                        };\n                    }\n                }\n            }\n            return customer;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "b2c3bc5f-ba33-4f57-bb85-e800c27354f9",
        "Name": "Models",
        "ParentId": "b32a8949-2e61-486f-ad3d-787ddbc6a723",
        "Type": 0,
        "Items": [
          {
            "Id": "6c49ca25-789d-4809-b71b-95e82fc77f4e",
            "Name": "Customer.cs",
            "ParentId": "b2c3bc5f-ba33-4f57-bb85-e800c27354f9",
            "Type": 1,
            "Text": "namespace CustomerSegmentationTool.Models\n{\n    public class Customer\n    {\n        public string CustomerId { get; set; }\n        public string Name { get; set; }\n        public int Age { get; set; }\n        public decimal AnnualIncome { get; set; }\n        public double TransactionHistoryScore { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "43f3dd0c-0513-4fb8-8e7e-b2b2d514cc24",
            "Name": "Segment.cs",
            "ParentId": "b2c3bc5f-ba33-4f57-bb85-e800c27354f9",
            "Type": 1,
            "Text": "namespace CustomerSegmentationTool.Models\n{\n    public class Segment\n    {\n        public string CustomerId { get; set; }\n        public string SegmentName { get; set; }\n        public string Description { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "39e94b2d-bfba-4d53-9c3c-dbe9e76dc7ce",
            "Name": "SegmentationRequest.cs",
            "ParentId": "b2c3bc5f-ba33-4f57-bb85-e800c27354f9",
            "Type": 1,
            "Text": "namespace CustomerSegmentationTool.Models\n{\n    public class SegmentationRequest\n    {\n        public string CustomerId { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "6436bd18-824a-4fc7-9c9e-c61f21b6e8cc",
            "Name": "SegmentationResponse.cs",
            "ParentId": "b2c3bc5f-ba33-4f57-bb85-e800c27354f9",
            "Type": 1,
            "Text": "namespace CustomerSegmentationTool.Models\n{\n    public class SegmentationResponse\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n        public Segment CustomerSegment { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "60dab82e-fc8e-4ee2-8765-552d057a832d",
        "Name": "Utils",
        "ParentId": "b32a8949-2e61-486f-ad3d-787ddbc6a723",
        "Type": 0,
        "Items": [
          {
            "Id": "29856ea4-3c7c-4e7b-b525-651800a561da",
            "Name": "SegmentCalculator.cs",
            "ParentId": "60dab82e-fc8e-4ee2-8765-552d057a832d",
            "Type": 1,
            "Text": "using CustomerSegmentationTool.Models;\n\nnamespace CustomerSegmentationTool.Utils\n{\n    public static class SegmentCalculator\n    {\n        public static Segment CalculateSegment(Customer customer)\n        {\n            string segmentName;\n            string description;\n\n            if (customer.AnnualIncome >= 100000 && customer.TransactionHistoryScore >= 80)\n            {\n                segmentName = \"Premium\";\n                description = \"High income and excellent transaction history.\";\n            }\n            else if (customer.AnnualIncome >= 50000 && customer.TransactionHistoryScore >= 60)\n            {\n                segmentName = \"Gold\";\n                description = \"Moderate income with good transaction history.\";\n            }\n            else\n            {\n                segmentName = \"Standard\";\n                description = \"Average income or transaction history.\";\n            }\n\n            return new Segment\n            {\n                CustomerId = customer.CustomerId,\n                SegmentName = segmentName,\n                Description = description\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "a4a2b958-fa69-49ef-adf8-86f839f3685c",
    "Name": "MarketingCampaignManager",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "e424158f-4020-42c8-a350-eaccde436788",
        "Name": "Program.cs",
        "ParentId": "a4a2b958-fa69-49ef-adf8-86f839f3685c",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing MarketingCampaignManager.Services;\nusing MarketingCampaignManager.Data;\nusing MarketingCampaignManager.Integration;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Register application services\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<ICampaignService, CampaignService>();\nbuilder.Services.AddSingleton<ICampaignRepository, CampaignRepository>();\nbuilder.Services.AddSingleton<INotificationService, NotificationService>();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseEndpoints(endpoints => {\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "eb676e52-7ca1-4a87-ba84-24215f4791b9",
        "Name": "Controllers",
        "ParentId": "a4a2b958-fa69-49ef-adf8-86f839f3685c",
        "Type": 0,
        "Items": [
          {
            "Id": "2e306a04-dea2-48d4-ab70-b8eabc0d09ed",
            "Name": "CampaignController.cs",
            "ParentId": "eb676e52-7ca1-4a87-ba84-24215f4791b9",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing MarketingCampaignManager.Models;\nusing MarketingCampaignManager.Services;\n\nnamespace MarketingCampaignManager.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class CampaignController : ControllerBase\n    {\n        private readonly ICampaignService _campaignService;\n\n        public CampaignController(ICampaignService campaignService)\n        {\n            _campaignService = campaignService;\n        }\n        \n        [HttpGet]\n        public async Task<ActionResult<IEnumerable<Campaign>>> GetCampaigns()\n        {\n            var campaigns = await _campaignService.GetAllCampaignsAsync();\n            return Ok(campaigns);\n        }\n        \n        [HttpGet(\"{id}\")]\n        public async Task<ActionResult<Campaign>> GetCampaign(Guid id)\n        {\n            var campaign = await _campaignService.GetCampaignByIdAsync(id);\n            if (campaign == null)\n                return NotFound();\n            return Ok(campaign);\n        }\n        \n        [HttpPost]\n        public async Task<ActionResult<Campaign>> CreateCampaign([FromBody] Campaign campaign)\n        {\n            var createdCampaign = await _campaignService.CreateCampaignAsync(campaign);\n            return CreatedAtAction(nameof(GetCampaign), new { id = createdCampaign.Id }, createdCampaign);\n        }\n        \n        [HttpPut(\"{id}\")]\n        public async Task<ActionResult> UpdateCampaign(Guid id, [FromBody] Campaign campaign)\n        {\n            if (id != campaign.Id)\n                return BadRequest(\"Campaign ID mismatch.\");\n            \n            var updated = await _campaignService.UpdateCampaignAsync(campaign);\n            if (!updated)\n                return NotFound();\n            return NoContent();\n        }\n        \n        [HttpDelete(\"{id}\")]\n        public async Task<ActionResult> DeleteCampaign(Guid id)\n        {\n            var deleted = await _campaignService.DeleteCampaignAsync(id);\n            if (!deleted)\n                return NotFound();\n            return NoContent();\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "cd339a8e-1905-4cb4-b684-130b540eb361",
        "Name": "Services",
        "ParentId": "a4a2b958-fa69-49ef-adf8-86f839f3685c",
        "Type": 0,
        "Items": [
          {
            "Id": "2f5249fd-f6dc-4d8b-9f63-697aca7f4fc6",
            "Name": "ICampaignService.cs",
            "ParentId": "cd339a8e-1905-4cb4-b684-130b540eb361",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing MarketingCampaignManager.Models;\n\nnamespace MarketingCampaignManager.Services\n{\n    public interface ICampaignService\n    {\n        Task<IEnumerable<Campaign>> GetAllCampaignsAsync();\n        Task<Campaign> GetCampaignByIdAsync(Guid id);\n        Task<Campaign> CreateCampaignAsync(Campaign campaign);\n        Task<bool> UpdateCampaignAsync(Campaign campaign);\n        Task<bool> DeleteCampaignAsync(Guid id);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e885df80-f5fa-4f72-9e97-f58037679618",
            "Name": "CampaignService.cs",
            "ParentId": "cd339a8e-1905-4cb4-b684-130b540eb361",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing MarketingCampaignManager.Models;\nusing MarketingCampaignManager.Data;\nusing MarketingCampaignManager.Integration;\n\nnamespace MarketingCampaignManager.Services\n{\n    public class CampaignService : ICampaignService\n    {\n        private readonly ICampaignRepository _campaignRepository;\n        private readonly INotificationService _notificationService;\n\n        public CampaignService(ICampaignRepository campaignRepository, INotificationService notificationService)\n        {\n            _campaignRepository = campaignRepository;\n            _notificationService = notificationService;\n        }\n        \n        public async Task<IEnumerable<Campaign>> GetAllCampaignsAsync()\n        {\n            return await _campaignRepository.GetAllAsync();\n        }\n        \n        public async Task<Campaign> GetCampaignByIdAsync(Guid id)\n        {\n            return await _campaignRepository.GetByIdAsync(id);\n        }\n        \n        public async Task<Campaign> CreateCampaignAsync(Campaign campaign)\n        {\n            campaign.Id = Guid.NewGuid();\n            campaign.CreatedOn = DateTime.UtcNow;\n            await _campaignRepository.AddAsync(campaign);\n            // Trigger notifications for the new campaign\n            await _notificationService.SendCampaignNotificationAsync(campaign);\n            return campaign;\n        }\n        \n        public async Task<bool> UpdateCampaignAsync(Campaign campaign)\n        {\n            var existing = await _campaignRepository.GetByIdAsync(campaign.Id);\n            if (existing == null)\n                return false;\n            \n            existing.Name = campaign.Name;\n            existing.Description = campaign.Description;\n            existing.StartDate = campaign.StartDate;\n            existing.EndDate = campaign.EndDate;\n            await _campaignRepository.UpdateAsync(existing);\n            return true;\n        }\n        \n        public async Task<bool> DeleteCampaignAsync(Guid id)\n        {\n            return await _campaignRepository.DeleteAsync(id);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "af248ac1-924b-47d6-8b5a-bb0c34ca3040",
        "Name": "Data",
        "ParentId": "a4a2b958-fa69-49ef-adf8-86f839f3685c",
        "Type": 0,
        "Items": [
          {
            "Id": "82e4e78f-13d3-49d8-a396-4186a0da4955",
            "Name": "ICampaignRepository.cs",
            "ParentId": "af248ac1-924b-47d6-8b5a-bb0c34ca3040",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing MarketingCampaignManager.Models;\n\nnamespace MarketingCampaignManager.Data\n{\n    public interface ICampaignRepository\n    {\n        Task<IEnumerable<Campaign>> GetAllAsync();\n        Task<Campaign> GetByIdAsync(Guid id);\n        Task AddAsync(Campaign campaign);\n        Task UpdateAsync(Campaign campaign);\n        Task<bool> DeleteAsync(Guid id);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "83d4e5e1-c210-43dd-8ab2-a7e704970d57",
            "Name": "CampaignRepository.cs",
            "ParentId": "af248ac1-924b-47d6-8b5a-bb0c34ca3040",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing MarketingCampaignManager.Models;\n\nnamespace MarketingCampaignManager.Data\n{\n    public class CampaignRepository : ICampaignRepository\n    {\n        private readonly ConcurrentDictionary<Guid, Campaign> _campaignStore = new ConcurrentDictionary<Guid, Campaign>();\n\n        public Task<IEnumerable<Campaign>> GetAllAsync()\n        {\n            return Task.FromResult(_campaignStore.Values.AsEnumerable());\n        }\n        \n        public Task<Campaign> GetByIdAsync(Guid id)\n        {\n            _campaignStore.TryGetValue(id, out var campaign);\n            return Task.FromResult(campaign);\n        }\n        \n        public Task AddAsync(Campaign campaign)\n        {\n            _campaignStore[campaign.Id] = campaign;\n            return Task.CompletedTask;\n        }\n        \n        public Task UpdateAsync(Campaign campaign)\n        {\n            _campaignStore[campaign.Id] = campaign;\n            return Task.CompletedTask;\n        }\n        \n        public Task<bool> DeleteAsync(Guid id)\n        {\n            return Task.FromResult(_campaignStore.TryRemove(id, out var _));\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "9636d2dd-5412-43a3-b2c2-0e7418bab1b3",
        "Name": "Models",
        "ParentId": "a4a2b958-fa69-49ef-adf8-86f839f3685c",
        "Type": 0,
        "Items": [
          {
            "Id": "a9fecdae-4760-4cdf-8811-3de2f4ceaf45",
            "Name": "Campaign.cs",
            "ParentId": "9636d2dd-5412-43a3-b2c2-0e7418bab1b3",
            "Type": 1,
            "Text": "using System;\n\nnamespace MarketingCampaignManager.Models\n{\n    public class Campaign\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public DateTime StartDate { get; set; }\n        public DateTime EndDate { get; set; }\n        public DateTime CreatedOn { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "8d8951a2-450c-4fa2-8a7b-a2813f73c976",
        "Name": "Integration",
        "ParentId": "a4a2b958-fa69-49ef-adf8-86f839f3685c",
        "Type": 0,
        "Items": [
          {
            "Id": "cd4541a8-7fb2-402c-9055-732c21493337",
            "Name": "INotificationService.cs",
            "ParentId": "8d8951a2-450c-4fa2-8a7b-a2813f73c976",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing MarketingCampaignManager.Models;\n\nnamespace MarketingCampaignManager.Integration\n{\n    public interface INotificationService\n    {\n        Task SendCampaignNotificationAsync(Campaign campaign);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "cb7c4c1b-274b-4249-8de6-e5c287647492",
            "Name": "NotificationService.cs",
            "ParentId": "8d8951a2-450c-4fa2-8a7b-a2813f73c976",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing MarketingCampaignManager.Models;\nusing MarketingCampaignManager.Utils;\n\nnamespace MarketingCampaignManager.Integration\n{\n    public class NotificationService : INotificationService\n    {\n        private readonly EmailClient _emailClient;\n\n        public NotificationService()\n        {\n            _emailClient = new EmailClient();\n        }\n        \n        public async Task SendCampaignNotificationAsync(Campaign campaign)\n        {\n            // In a production environment, recipients would be retrieved from a customer data source\n            var recipients = new[] { \"customer1@digitalbank.com\", \"customer2@digitalbank.com\" };\n            var subject = $\"New Marketing Campaign: {campaign.Name}\";\n            var body = $\"Dear Customer,\\n\\nWe are excited to announce our new campaign: {campaign.Description}.\\nStart Date: {campaign.StartDate:yyyy-MM-dd}\\nEnd Date: {campaign.EndDate:yyyy-MM-dd}\\n\\nBest regards,\\nDigital Bank Marketing Team\";\n            \n            foreach (var recipient in recipients)\n            {\n                await _emailClient.SendEmailAsync(recipient, subject, body);\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "44b2d305-092d-40dc-953d-e7572d823f2e",
        "Name": "Utils",
        "ParentId": "a4a2b958-fa69-49ef-adf8-86f839f3685c",
        "Type": 0,
        "Items": [
          {
            "Id": "f0ba3f19-847b-4a09-b2e1-20ed00080f6c",
            "Name": "EmailClient.cs",
            "ParentId": "44b2d305-092d-40dc-953d-e7572d823f2e",
            "Type": 1,
            "Text": "using System.Net;\nusing System.Net.Mail;\nusing System.Threading.Tasks;\n\nnamespace MarketingCampaignManager.Utils\n{\n    public class EmailClient\n    {\n        private readonly SmtpClient _smtpClient;\n\n        public EmailClient()\n        {\n            // Configuration for SMTP client in a production digital bank setting\n            _smtpClient = new SmtpClient(\"smtp.digitalbank.com\")\n            {\n                Port = 587,\n                Credentials = new NetworkCredential(\"noreply@digitalbank.com\", \"SecurePassword123!\"),\n                EnableSsl = true\n            };\n        }\n        \n        public async Task SendEmailAsync(string to, string subject, string body)\n        {\n            var mailMessage = new MailMessage(\"noreply@digitalbank.com\", to, subject, body);\n            await _smtpClient.SendMailAsync(mailMessage);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "c137de94-1677-40b8-8fa3-965b4878df5a",
    "Name": "SocialMediaIntegrationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "1e8b09ab-18b6-4bd5-8e06-9888b64c1318",
        "Name": "Program.cs",
        "ParentId": "c137de94-1677-40b8-8fa3-965b4878df5a",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing SocialMediaIntegrationService.Services;\nusing SocialMediaIntegrationService.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers();\nbuilder.Services.AddHttpClient();\nbuilder.Services.AddSingleton<ISocialMediaService, SocialMediaService>();\nbuilder.Services.AddSingleton<ISocialMediaAdapter, SocialMediaAdapter>();\nbuilder.Services.AddLogging();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "28209eae-7c5a-4cf3-8097-4c66d601399f",
        "Name": "Controllers",
        "ParentId": "c137de94-1677-40b8-8fa3-965b4878df5a",
        "Type": 0,
        "Items": [
          {
            "Id": "dd45ff22-3dd8-4cb8-8373-e4d02924a007",
            "Name": "SocialMediaController.cs",
            "ParentId": "28209eae-7c5a-4cf3-8097-4c66d601399f",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing SocialMediaIntegrationService.Models;\nusing SocialMediaIntegrationService.Services;\n\nnamespace SocialMediaIntegrationService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class SocialMediaController : ControllerBase\n    {\n        private readonly ISocialMediaService _socialMediaService;\n\n        public SocialMediaController(ISocialMediaService socialMediaService)\n        {\n            _socialMediaService = socialMediaService;\n        }\n\n        [HttpPost(\"send\")]\n        public async Task<IActionResult> SendMessage([FromBody] SocialMediaMessage message)\n        {\n            if (message == null)\n            {\n                return BadRequest(\"Message cannot be null.\");\n            }\n            try\n            {\n                SocialMediaResponse response = await _socialMediaService.PostMessageAsync(message);\n                return Ok(response);\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, new SocialMediaResponse { Success = false, Message = ex.Message });\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "16ac3944-734c-4d2b-b002-a99f934d51b6",
        "Name": "Services",
        "ParentId": "c137de94-1677-40b8-8fa3-965b4878df5a",
        "Type": 0,
        "Items": [
          {
            "Id": "42a2761b-1133-4f24-8a90-8d0fee0f8688",
            "Name": "ISocialMediaService.cs",
            "ParentId": "16ac3944-734c-4d2b-b002-a99f934d51b6",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing SocialMediaIntegrationService.Models;\n\nnamespace SocialMediaIntegrationService.Services\n{\n    public interface ISocialMediaService\n    {\n        Task<SocialMediaResponse> PostMessageAsync(SocialMediaMessage message);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "8c4e2e11-4fe8-4682-a43c-6eb5bab10d93",
            "Name": "SocialMediaService.cs",
            "ParentId": "16ac3944-734c-4d2b-b002-a99f934d51b6",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing SocialMediaIntegrationService.Models;\nusing SocialMediaIntegrationService.Infrastructure;\nusing Microsoft.Extensions.Logging;\n\nnamespace SocialMediaIntegrationService.Services\n{\n    public class SocialMediaService : ISocialMediaService\n    {\n        private readonly ISocialMediaAdapter _socialMediaAdapter;\n        private readonly ILogger<SocialMediaService> _logger;\n\n        public SocialMediaService(ISocialMediaAdapter socialMediaAdapter, ILogger<SocialMediaService> logger)\n        {\n            _socialMediaAdapter = socialMediaAdapter;\n            _logger = logger;\n        }\n\n        public async Task<SocialMediaResponse> PostMessageAsync(SocialMediaMessage message)\n        {\n            if (message == null)\n                throw new ArgumentNullException(nameof(message));\n\n            if (string.IsNullOrWhiteSpace(message.Channel))\n                throw new ArgumentException(\"Channel must be specified.\");\n\n            if (string.IsNullOrWhiteSpace(message.Content))\n                throw new ArgumentException(\"Content cannot be empty.\");\n\n            try\n            {\n                var response = await _socialMediaAdapter.PostToSocialMediaAsync(message);\n                _logger.LogInformation($\"Message posted to {message.Channel}, ExternalId: {response?.ExternalId}\");\n                return response;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, $\"Error posting message to {message.Channel}\");\n                throw;\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "f748c06c-0148-4461-a7e7-594d683f9269",
        "Name": "Infrastructure",
        "ParentId": "c137de94-1677-40b8-8fa3-965b4878df5a",
        "Type": 0,
        "Items": [
          {
            "Id": "9e6e1211-b8ad-40e2-bfc8-f9e26205eed4",
            "Name": "ISocialMediaAdapter.cs",
            "ParentId": "f748c06c-0148-4461-a7e7-594d683f9269",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing SocialMediaIntegrationService.Models;\n\nnamespace SocialMediaIntegrationService.Infrastructure\n{\n    public interface ISocialMediaAdapter\n    {\n        Task<SocialMediaResponse> PostToSocialMediaAsync(SocialMediaMessage message);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e0f4d821-29dc-4f01-bf20-f99d0f191052",
            "Name": "SocialMediaAdapter.cs",
            "ParentId": "f748c06c-0148-4461-a7e7-594d683f9269",
            "Type": 1,
            "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing SocialMediaIntegrationService.Models;\nusing Microsoft.Extensions.Logging;\n\nnamespace SocialMediaIntegrationService.Infrastructure\n{\n    public class SocialMediaAdapter : ISocialMediaAdapter\n    {\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<SocialMediaAdapter> _logger;\n\n        public SocialMediaAdapter(IHttpClientFactory httpClientFactory, ILogger<SocialMediaAdapter> logger)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n            _logger = logger;\n        }\n\n        public async Task<SocialMediaResponse> PostToSocialMediaAsync(SocialMediaMessage message)\n        {\n            if (message == null)\n                throw new ArgumentNullException(nameof(message));\n\n            string endpoint = GetEndpointForChannel(message.Channel);\n            if (string.IsNullOrEmpty(endpoint))\n                throw new InvalidOperationException(\"Unsupported social media channel.\");\n\n            var jsonContent = JsonSerializer.Serialize(message);\n            var content = new StringContent(jsonContent, Encoding.UTF8, \"application/json\");\n\n            var httpResponse = await _httpClient.PostAsync(endpoint, content);\n            httpResponse.EnsureSuccessStatusCode();\n\n            var responseString = await httpResponse.Content.ReadAsStringAsync();\n            var socialResponse = JsonSerializer.Deserialize<SocialMediaResponse>(responseString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n            if (socialResponse == null)\n                throw new Exception(\"Failed to deserialize social media response.\");\n\n            socialResponse.Channel = message.Channel;\n            socialResponse.PostedAt = DateTime.UtcNow;\n            return socialResponse;\n        }\n\n        private string GetEndpointForChannel(string channel)\n        {\n            return channel.ToLower() switch\n            {\n                \"twitter\" => \"https://api.twitter.com/2/tweets\",\n                \"facebook\" => \"https://graph.facebook.com/v9.0/me/feed\",\n                \"linkedin\" => \"https://api.linkedin.com/v2/shares\",\n                _ => string.Empty,\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "340fc54f-bc72-4caa-a211-0cf9c6f9ecd3",
        "Name": "Models",
        "ParentId": "c137de94-1677-40b8-8fa3-965b4878df5a",
        "Type": 0,
        "Items": [
          {
            "Id": "5eca443f-1e01-438f-b192-ade674cde3c4",
            "Name": "SocialMediaMessage.cs",
            "ParentId": "340fc54f-bc72-4caa-a211-0cf9c6f9ecd3",
            "Type": 1,
            "Text": "using System;\n\nnamespace SocialMediaIntegrationService.Models\n{\n    public class SocialMediaMessage\n    {\n        public string Channel { get; set; }\n        public string Content { get; set; }\n        public string UserId { get; set; }\n        public DateTime Timestamp { get; set; } = DateTime.UtcNow;\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "eb881684-1c26-49a2-b609-9e232197abe8",
            "Name": "SocialMediaResponse.cs",
            "ParentId": "340fc54f-bc72-4caa-a211-0cf9c6f9ecd3",
            "Type": 1,
            "Text": "using System;\n\nnamespace SocialMediaIntegrationService.Models\n{\n    public class SocialMediaResponse\n    {\n        public bool Success { get; set; }\n        public string ExternalId { get; set; }\n        public string Channel { get; set; }\n        public DateTime PostedAt { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "5111a20e-9039-4221-a702-802e986c41c8",
    "Name": "SMSGatewayConnector",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "80ff98b3-d6db-42ae-88e3-7eb90507b658",
        "Name": "Program.cs",
        "ParentId": "5111a20e-9039-4221-a702-802e986c41c8",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace SMSGatewayConnector\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "723bb374-e563-4be5-9410-67381a7880cb",
        "Name": "Startup.cs",
        "ParentId": "5111a20e-9039-4221-a702-802e986c41c8",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing SMSGatewayConnector.Services;\nusing SMSGatewayConnector.Infrastructure;\n\nnamespace SMSGatewayConnector\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient<ISMSGatewayAdapter, SMSGatewayAdapter>();\n            services.AddSingleton<ISMSService, SMSService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            \n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "5ffc9e00-a9f2-41e6-baac-9851daee4a1c",
        "Name": "Controllers",
        "ParentId": "5111a20e-9039-4221-a702-802e986c41c8",
        "Type": 0,
        "Items": [
          {
            "Id": "74d709c4-133d-47e1-8b6d-c0201a89b525",
            "Name": "SMSController.cs",
            "ParentId": "5ffc9e00-a9f2-41e6-baac-9851daee4a1c",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing SMSGatewayConnector.Models;\nusing SMSGatewayConnector.Services;\n\nnamespace SMSGatewayConnector.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class SMSController : ControllerBase\n    {\n        private readonly ISMSService _smsService;\n\n        public SMSController(ISMSService smsService)\n        {\n            _smsService = smsService;\n        }\n\n        [HttpPost(\"send\")]\n        public async Task<IActionResult> SendSMS([FromBody] SMSRequest request)\n        {\n            SMSResponse response = await _smsService.SendSmsAsync(request);\n            if (response.IsSuccess)\n            {\n                return Ok(response);\n            }\n            return StatusCode(500, response);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "77b77731-76a1-4754-9ea4-81f47526e620",
        "Name": "Services",
        "ParentId": "5111a20e-9039-4221-a702-802e986c41c8",
        "Type": 0,
        "Items": [
          {
            "Id": "da932438-cbea-4281-bba5-a1534eeae727",
            "Name": "ISMSService.cs",
            "ParentId": "77b77731-76a1-4754-9ea4-81f47526e620",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing SMSGatewayConnector.Models;\n\nnamespace SMSGatewayConnector.Services\n{\n    public interface ISMSService\n    {\n        Task<SMSResponse> SendSmsAsync(SMSRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "c1d76658-a562-4a5a-b37d-256b12787d5d",
            "Name": "SMSService.cs",
            "ParentId": "77b77731-76a1-4754-9ea4-81f47526e620",
            "Type": 1,
            "Text": "using System;\nusing System.Net;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing SMSGatewayConnector.Infrastructure;\nusing SMSGatewayConnector.Models;\n\nnamespace SMSGatewayConnector.Services\n{\n    public class SMSService : ISMSService\n    {\n        private readonly ISMSGatewayAdapter _smsGatewayAdapter;\n        private readonly ILogger<SMSService> _logger;\n\n        public SMSService(ISMSGatewayAdapter smsGatewayAdapter, ILogger<SMSService> logger)\n        {\n            _smsGatewayAdapter = smsGatewayAdapter;\n            _logger = logger;\n        }\n\n        public async Task<SMSResponse> SendSmsAsync(SMSRequest request)\n        {\n            try\n            {\n                var gatewayResult = await _smsGatewayAdapter.SendMessageAsync(request);\n                if (gatewayResult.StatusCode == HttpStatusCode.OK)\n                {\n                    return new SMSResponse\n                    {\n                        IsSuccess = true,\n                        GatewayMessageId = gatewayResult.GatewayMessageId,\n                        Message = \"SMS sent successfully.\"\n                    };\n                }\n                else\n                {\n                    _logger.LogError(\"Failed to send SMS: {Error}\", gatewayResult.ErrorMessage);\n                    return new SMSResponse\n                    {\n                        IsSuccess = false,\n                        Message = gatewayResult.ErrorMessage\n                    };\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error while sending SMS.\");\n                return new SMSResponse\n                {\n                    IsSuccess = false,\n                    Message = ex.Message\n                };\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "e8d95bd2-6aff-49a1-b36f-c4ed18fea346",
        "Name": "Models",
        "ParentId": "5111a20e-9039-4221-a702-802e986c41c8",
        "Type": 0,
        "Items": [
          {
            "Id": "9fd4b3c8-7039-4a10-9b29-3430313aa1ab",
            "Name": "SMSRequest.cs",
            "ParentId": "e8d95bd2-6aff-49a1-b36f-c4ed18fea346",
            "Type": 1,
            "Text": "namespace SMSGatewayConnector.Models\n{\n    public class SMSRequest\n    {\n        public string PhoneNumber { get; set; }\n        public string MessageContent { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "c40b273d-d145-48b1-8018-141b28f1f14c",
            "Name": "SMSResponse.cs",
            "ParentId": "e8d95bd2-6aff-49a1-b36f-c4ed18fea346",
            "Type": 1,
            "Text": "namespace SMSGatewayConnector.Models\n{\n    public class SMSResponse\n    {\n        public bool IsSuccess { get; set; }\n        public string GatewayMessageId { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "609df1e6-5139-4af9-9540-834048adf7c4",
        "Name": "Infrastructure",
        "ParentId": "5111a20e-9039-4221-a702-802e986c41c8",
        "Type": 0,
        "Items": [
          {
            "Id": "40b8344c-5ba4-4cfb-8b1e-71a04dfb1946",
            "Name": "ISMSGatewayAdapter.cs",
            "ParentId": "609df1e6-5139-4af9-9540-834048adf7c4",
            "Type": 1,
            "Text": "using System.Net;\nusing System.Threading.Tasks;\nusing SMSGatewayConnector.Models;\n\nnamespace SMSGatewayConnector.Infrastructure\n{\n    public interface ISMSGatewayAdapter\n    {\n        Task<SMSGatewayResult> SendMessageAsync(SMSRequest request);\n    }\n\n    public class SMSGatewayResult\n    {\n        public HttpStatusCode StatusCode { get; set; }\n        public string GatewayMessageId { get; set; }\n        public string ErrorMessage { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "d65f8261-381c-42fb-9e22-7093b2bc8c74",
            "Name": "SMSGatewayAdapter.cs",
            "ParentId": "609df1e6-5139-4af9-9540-834048adf7c4",
            "Type": 1,
            "Text": "using System;\nusing System.Net;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing SMSGatewayConnector.Models;\n\nnamespace SMSGatewayConnector.Infrastructure\n{\n    public class SMSGatewayAdapter : ISMSGatewayAdapter\n    {\n        private readonly HttpClient _httpClient;\n        private readonly IConfiguration _configuration;\n        private readonly ILogger<SMSGatewayAdapter> _logger;\n\n        public SMSGatewayAdapter(HttpClient httpClient, IConfiguration configuration, ILogger<SMSGatewayAdapter> logger)\n        {\n            _httpClient = httpClient;\n            _configuration = configuration;\n            _logger = logger;\n        }\n\n        public async Task<SMSGatewayResult> SendMessageAsync(SMSRequest request)\n        {\n            string gatewayUrl = _configuration[\"SMSGateway:Url\"];\n            string apiKey = _configuration[\"SMSGateway:ApiKey\"];\n\n            var payload = new\n            {\n                phoneNumber = request.PhoneNumber,\n                message = request.MessageContent,\n                apiKey = apiKey\n            };\n\n            var content = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, \"application/json\");\n            try\n            {\n                HttpResponseMessage response = await _httpClient.PostAsync(gatewayUrl, content);\n                if (response.IsSuccessStatusCode)\n                {\n                    string responseBody = await response.Content.ReadAsStringAsync();\n                    var gatewayResponse = JsonSerializer.Deserialize<GatewayResponse>(responseBody, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n                    return new SMSGatewayResult\n                    {\n                        StatusCode = response.StatusCode,\n                        GatewayMessageId = gatewayResponse?.MessageId\n                    };\n                }\n                else\n                {\n                    string error = await response.Content.ReadAsStringAsync();\n                    _logger.LogError(\"Gateway error: {Error}\", error);\n                    return new SMSGatewayResult\n                    {\n                        StatusCode = response.StatusCode,\n                        ErrorMessage = error\n                    };\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Exception occurred while sending SMS via gateway\");\n                return new SMSGatewayResult\n                {\n                    StatusCode = HttpStatusCode.InternalServerError,\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n\n        private class GatewayResponse\n        {\n            public string MessageId { get; set; }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "ea3c0217-b633-458c-98ed-3ccac51a1c46",
    "Name": "ComplianceDashboard",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "dfb557d8-50a2-475e-8898-745017d33f25",
        "Name": "Program.cs",
        "ParentId": "ea3c0217-b633-458c-98ed-3ccac51a1c46",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing ComplianceDashboard.Services;\nusing ComplianceDashboard.Data;\nusing ComplianceDashboard.Infrastructure;\n\nnamespace ComplianceDashboard\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = WebApplication.CreateBuilder(args);\n            builder.Services.AddControllers();\n            builder.Services.AddSingleton<IComplianceService, ComplianceService>();\n            builder.Services.AddSingleton<IComplianceRepository, ComplianceRepository>();\n            builder.Services.AddSingleton<ComplianceMetricCalculator>();\n            \n            var app = builder.Build();\n            \n            if (app.Environment.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            \n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n            \n            app.Run();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "4e89eed2-8187-4b3d-88b9-e82e89ef290c",
        "Name": "Controllers",
        "ParentId": "ea3c0217-b633-458c-98ed-3ccac51a1c46",
        "Type": 0,
        "Items": [
          {
            "Id": "2afff95d-168c-47b1-8a4a-d5b74952adb2",
            "Name": "DashboardController.cs",
            "ParentId": "4e89eed2-8187-4b3d-88b9-e82e89ef290c",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing ComplianceDashboard.Services;\nusing ComplianceDashboard.Models;\n\nnamespace ComplianceDashboard.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class DashboardController : ControllerBase\n    {\n        private readonly IComplianceService _complianceService;\n\n        public DashboardController(IComplianceService complianceService)\n        {\n            _complianceService = complianceService;\n        }\n\n        [HttpGet(\"metrics\")]\n        public ActionResult<ComplianceMetricsResponse> GetComplianceMetrics()\n        {\n            var metrics = _complianceService.GetComplianceMetrics();\n            return Ok(metrics);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "0adca785-c766-40db-a924-a9c11395f946",
        "Name": "Services",
        "ParentId": "ea3c0217-b633-458c-98ed-3ccac51a1c46",
        "Type": 0,
        "Items": [
          {
            "Id": "d8e5d1ef-1b17-4d20-a4f8-fb63e9eb3841",
            "Name": "IComplianceService.cs",
            "ParentId": "0adca785-c766-40db-a924-a9c11395f946",
            "Type": 1,
            "Text": "using ComplianceDashboard.Models;\n\nnamespace ComplianceDashboard.Services\n{\n    public interface IComplianceService\n    {\n        ComplianceMetricsResponse GetComplianceMetrics();\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e0ad9f56-9536-4a73-a9b0-dfa7381e5075",
            "Name": "ComplianceService.cs",
            "ParentId": "0adca785-c766-40db-a924-a9c11395f946",
            "Type": 1,
            "Text": "using ComplianceDashboard.Models;\nusing ComplianceDashboard.Data;\nusing ComplianceDashboard.Infrastructure;\n\nnamespace ComplianceDashboard.Services\n{\n    public class ComplianceService : IComplianceService\n    {\n        private readonly IComplianceRepository _repository;\n        private readonly ComplianceMetricCalculator _calculator;\n\n        public ComplianceService(IComplianceRepository repository, ComplianceMetricCalculator calculator)\n        {\n            _repository = repository;\n            _calculator = calculator;\n        }\n\n        public ComplianceMetricsResponse GetComplianceMetrics()\n        {\n            var data = _repository.GetComplianceData();\n            var metrics = _calculator.CalculateMetrics(data);\n            return metrics;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "9cc5eb07-f4e3-4b36-8241-7e45f87d826d",
        "Name": "Models",
        "ParentId": "ea3c0217-b633-458c-98ed-3ccac51a1c46",
        "Type": 0,
        "Items": [
          {
            "Id": "f0b32ce2-405b-45d6-b3fd-e9132bd13477",
            "Name": "ComplianceData.cs",
            "ParentId": "9cc5eb07-f4e3-4b36-8241-7e45f87d826d",
            "Type": 1,
            "Text": "namespace ComplianceDashboard.Models\n{\n    public class ComplianceData\n    {\n        public int TotalAudits { get; set; }\n        public int TotalRiskAssessments { get; set; }\n        public int TotalAMLAlerts { get; set; }\n        public int TotalKYCReviews { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "2bda935b-a95a-4ae3-b227-a1fc6a1b63c6",
            "Name": "ComplianceMetricsResponse.cs",
            "ParentId": "9cc5eb07-f4e3-4b36-8241-7e45f87d826d",
            "Type": 1,
            "Text": "namespace ComplianceDashboard.Models\n{\n    public class ComplianceMetricsResponse\n    {\n        public int TotalAudits { get; set; }\n        public int TotalRiskAssessments { get; set; }\n        public int TotalAMLAlerts { get; set; }\n        public int TotalKYCReviews { get; set; }\n        public decimal ComplianceScore { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "0c16a45e-a326-42ca-936c-3429a74fdfa8",
        "Name": "Data",
        "ParentId": "ea3c0217-b633-458c-98ed-3ccac51a1c46",
        "Type": 0,
        "Items": [
          {
            "Id": "64cb3bfd-0d49-41a8-ba62-aa62a8dab7ea",
            "Name": "IComplianceRepository.cs",
            "ParentId": "0c16a45e-a326-42ca-936c-3429a74fdfa8",
            "Type": 1,
            "Text": "using ComplianceDashboard.Models;\n\nnamespace ComplianceDashboard.Data\n{\n    public interface IComplianceRepository\n    {\n        ComplianceData GetComplianceData();\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "09af5acb-57d5-4ab3-a3a2-ffd22efc9f1d",
            "Name": "ComplianceRepository.cs",
            "ParentId": "0c16a45e-a326-42ca-936c-3429a74fdfa8",
            "Type": 1,
            "Text": "using ComplianceDashboard.Models;\n\nnamespace ComplianceDashboard.Data\n{\n    public class ComplianceRepository : IComplianceRepository\n    {\n        public ComplianceData GetComplianceData()\n        {\n            // In a production environment, this method would retrieve data from a persistent store\n            return new ComplianceData\n            {\n                TotalAudits = 120,\n                TotalRiskAssessments = 85,\n                TotalAMLAlerts = 15,\n                TotalKYCReviews = 40\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "b8a56440-db58-4aab-83de-0724b7d57044",
        "Name": "Infrastructure",
        "ParentId": "ea3c0217-b633-458c-98ed-3ccac51a1c46",
        "Type": 0,
        "Items": [
          {
            "Id": "481bc97b-683c-41ad-b54e-81d29313cdfe",
            "Name": "ComplianceMetricCalculator.cs",
            "ParentId": "b8a56440-db58-4aab-83de-0724b7d57044",
            "Type": 1,
            "Text": "using ComplianceDashboard.Models;\n\nnamespace ComplianceDashboard.Infrastructure\n{\n    public class ComplianceMetricCalculator\n    {\n        public ComplianceMetricsResponse CalculateMetrics(ComplianceData data)\n        {\n            // Calculate metrics based on weighted factors\n            decimal auditScore = data.TotalAudits * 0.3m;\n            decimal riskScore = data.TotalRiskAssessments * 0.4m;\n            decimal amlPenalty = data.TotalAMLAlerts * 2.0m;\n            decimal kycScore = data.TotalKYCReviews * 0.5m;\n            decimal complianceScore = auditScore + riskScore + kycScore - amlPenalty;\n\n            return new ComplianceMetricsResponse\n            {\n                TotalAudits = data.TotalAudits,\n                TotalRiskAssessments = data.TotalRiskAssessments,\n                TotalAMLAlerts = data.TotalAMLAlerts,\n                TotalKYCReviews = data.TotalKYCReviews,\n                ComplianceScore = complianceScore\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "03ef88e9-ea7f-425e-b8ae-7784aa6f852b",
    "Name": "InterestAccrualCalculator",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "76883340-8382-4661-b383-f1b7dd9f9dfb",
        "Name": "Program.cs",
        "ParentId": "03ef88e9-ea7f-425e-b8ae-7784aa6f852b",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace InterestAccrualCalculator\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = WebApplication.CreateBuilder(args);\n            builder.Services.AddControllers();\n            builder.Services.AddScoped<Services.IInterestService, Services.InterestService>();\n\n            var app = builder.Build();\n\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n\n            app.Run();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "5b12f35b-6e14-4056-8df3-2c81f5804a52",
        "Name": "Controllers",
        "ParentId": "03ef88e9-ea7f-425e-b8ae-7784aa6f852b",
        "Type": 0,
        "Items": [
          {
            "Id": "195f252b-a6dd-4414-b6f7-f319390ef371",
            "Name": "InterestController.cs",
            "ParentId": "5b12f35b-6e14-4056-8df3-2c81f5804a52",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing InterestAccrualCalculator.Services;\nusing InterestAccrualCalculator.Models;\n\nnamespace InterestAccrualCalculator.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class InterestController : ControllerBase\n    {\n        private readonly IInterestService _interestService;\n\n        public InterestController(IInterestService interestService)\n        {\n            _interestService = interestService;\n        }\n\n        [HttpPost(\"calculate\")]\n        public IActionResult CalculateInterest([FromBody] InterestAccrualRequest request)\n        {\n            try\n            {\n                InterestAccrualResponse response = _interestService.CalculateInterest(request);\n                return Ok(response);\n            }\n            catch (System.Exception ex)\n            {\n                return BadRequest(new { error = ex.Message });\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "840645c5-a65c-4461-9264-f41f02f6335f",
        "Name": "Services",
        "ParentId": "03ef88e9-ea7f-425e-b8ae-7784aa6f852b",
        "Type": 0,
        "Items": [
          {
            "Id": "b62eee87-ed25-46a8-8632-4c6cb205274b",
            "Name": "IInterestService.cs",
            "ParentId": "840645c5-a65c-4461-9264-f41f02f6335f",
            "Type": 1,
            "Text": "using InterestAccrualCalculator.Models;\n\nnamespace InterestAccrualCalculator.Services\n{\n    public interface IInterestService\n    {\n        InterestAccrualResponse CalculateInterest(InterestAccrualRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "5327585a-22dd-4473-b72c-f211817e110c",
            "Name": "InterestService.cs",
            "ParentId": "840645c5-a65c-4461-9264-f41f02f6335f",
            "Type": 1,
            "Text": "using System;\nusing InterestAccrualCalculator.Models;\n\nnamespace InterestAccrualCalculator.Services\n{\n    public class InterestService : IInterestService\n    {\n        public InterestAccrualResponse CalculateInterest(InterestAccrualRequest request)\n        {\n            if (request.Principal <= 0)\n                throw new ArgumentException(\"Principal must be greater than zero.\");\n            if (request.TermYears <= 0)\n                throw new ArgumentException(\"Term in years must be greater than zero.\");\n            if (request.AnnualInterestRate < 0)\n                throw new ArgumentException(\"Annual interest rate cannot be negative.\");\n\n            // Use monthly compounding for both savings and loan accounts\n            int compoundsPerYear = 12;\n            double ratePerPeriod = request.AnnualInterestRate / compoundsPerYear;\n            double totalAmount = (double)request.Principal * Math.Pow(1 + ratePerPeriod, compoundsPerYear * request.TermYears);\n            decimal interestAccrued = (decimal)totalAmount - request.Principal;\n\n            return new InterestAccrualResponse\n            {\n                InterestAccrued = Math.Round(interestAccrued, 2),\n                TotalAmount = Math.Round((decimal)totalAmount, 2)\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "b5981729-ed92-48ef-9aa6-808e716d77d0",
        "Name": "Models",
        "ParentId": "03ef88e9-ea7f-425e-b8ae-7784aa6f852b",
        "Type": 0,
        "Items": [
          {
            "Id": "baa1b392-d501-4c09-9e2a-b7a2f4517e70",
            "Name": "InterestAccrualRequest.cs",
            "ParentId": "b5981729-ed92-48ef-9aa6-808e716d77d0",
            "Type": 1,
            "Text": "namespace InterestAccrualCalculator.Models\n{\n    public class InterestAccrualRequest\n    {\n        public decimal Principal { get; set; }\n        // Annual interest rate as a decimal (e.g., 0.05 for 5%)\n        public double AnnualInterestRate { get; set; }\n        public double TermYears { get; set; }\n        public AccountType AccountType { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "9c78fac6-0d91-4fda-a5dc-eac45fb2cf64",
            "Name": "InterestAccrualResponse.cs",
            "ParentId": "b5981729-ed92-48ef-9aa6-808e716d77d0",
            "Type": 1,
            "Text": "namespace InterestAccrualCalculator.Models\n{\n    public class InterestAccrualResponse\n    {\n        public decimal InterestAccrued { get; set; }\n        public decimal TotalAmount { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "547ef049-8701-41aa-8c07-07af37a8491c",
            "Name": "AccountType.cs",
            "ParentId": "b5981729-ed92-48ef-9aa6-808e716d77d0",
            "Type": 1,
            "Text": "namespace InterestAccrualCalculator.Models\n{\n    public enum AccountType\n    {\n        Savings,\n        Loan\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "860b7244-d0d0-4a10-9a50-c5a05559f76d",
    "Name": "DividendDistributionManager",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "375cbdc6-0b8e-487b-9357-c716eacc4548",
        "Name": "Program.cs",
        "ParentId": "860b7244-d0d0-4a10-9a50-c5a05559f76d",
        "Type": 1,
        "Text": "using DividendDistributionManager.Services;\nusing DividendDistributionManager.Data;\nusing DividendDistributionManager.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IDividendService, DividendService>();\nbuilder.Services.AddSingleton<IDividendRepository, DividendRepository>();\nbuilder.Services.AddSingleton<IPaymentProcessor, PaymentProcessor>();\nbuilder.Services.AddSingleton<INotificationService, NotificationService>();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();\n",
        "Language": 0
      },
      {
        "Id": "584bad58-6a57-4032-9b54-6ae4c98f0a90",
        "Name": "Controllers",
        "ParentId": "860b7244-d0d0-4a10-9a50-c5a05559f76d",
        "Type": 0,
        "Items": [
          {
            "Id": "44ce1a60-c85b-4a9a-b732-c96bdb401eeb",
            "Name": "DividendController.cs",
            "ParentId": "584bad58-6a57-4032-9b54-6ae4c98f0a90",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.AspNetCore.Mvc;\nusing DividendDistributionManager.Models;\nusing DividendDistributionManager.Services;\n\nnamespace DividendDistributionManager.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class DividendController : ControllerBase\n    {\n        private readonly IDividendService _dividendService;\n\n        public DividendController(IDividendService dividendService)\n        {\n            _dividendService = dividendService;\n        }\n\n        [HttpPost(\"distribute\")]\n        public IActionResult Distribute([FromBody] DividendRequest request)\n        {\n            try\n            {\n                var record = _dividendService.DistributeDividends(request);\n                return Ok(record);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { message = ex.Message });\n            }\n        }\n\n        [HttpGet(\"{id}\")]\n        public IActionResult GetDividendRecord(string id)\n        {\n            var record = _dividendService.GetDividendRecord(id);\n            if (record == null)\n            {\n                return NotFound();\n            }\n            return Ok(record);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "74cf0fed-48d7-4d90-b815-3758055f5da4",
        "Name": "Services",
        "ParentId": "860b7244-d0d0-4a10-9a50-c5a05559f76d",
        "Type": 0,
        "Items": [
          {
            "Id": "d35009b8-e233-47cc-b4a8-1812e476155b",
            "Name": "IDividendService.cs",
            "ParentId": "74cf0fed-48d7-4d90-b815-3758055f5da4",
            "Type": 1,
            "Text": "using DividendDistributionManager.Models;\n\nnamespace DividendDistributionManager.Services\n{\n    public interface IDividendService\n    {\n        DividendRecord DistributeDividends(DividendRequest request);\n        DividendRecord GetDividendRecord(string id);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "941826e3-5f31-4c5b-b234-bd1765c76ef4",
            "Name": "DividendService.cs",
            "ParentId": "74cf0fed-48d7-4d90-b815-3758055f5da4",
            "Type": 1,
            "Text": "using System;\nusing System.Linq;\nusing DividendDistributionManager.Models;\nusing DividendDistributionManager.Data;\nusing DividendDistributionManager.Infrastructure;\n\nnamespace DividendDistributionManager.Services\n{\n    public class DividendService : IDividendService\n    {\n        private readonly IDividendRepository _repository;\n        private readonly IPaymentProcessor _paymentProcessor;\n        private readonly INotificationService _notificationService;\n\n        public DividendService(IDividendRepository repository, IPaymentProcessor paymentProcessor, INotificationService notificationService)\n        {\n            _repository = repository;\n            _paymentProcessor = paymentProcessor;\n            _notificationService = notificationService;\n        }\n\n        public DividendRecord DistributeDividends(DividendRequest request)\n        {\n            if (request == null || request.Investors == null || !request.Investors.Any())\n            {\n                throw new ArgumentException(\"Invalid dividend distribution request.\");\n            }\n\n            foreach (var investor in request.Investors)\n            {\n                decimal dividendAmount = investor.ShareCount * request.DividendPerShare;\n                _paymentProcessor.ProcessPayment(investor.AccountNumber, dividendAmount);\n                _notificationService.SendNotification(investor.ContactInfo, $\"Dividend of {dividendAmount:C} has been credited to your account.\");\n            }\n\n            var record = new DividendRecord\n            {\n                Id = Guid.NewGuid().ToString(),\n                DistributionDate = DateTime.UtcNow,\n                TotalAmount = request.Investors.Sum(i => i.ShareCount * request.DividendPerShare),\n                InvestorCount = request.Investors.Count,\n                DividendPerShare = request.DividendPerShare\n            };\n\n            _repository.SaveRecord(record);\n            return record;\n        }\n\n        public DividendRecord GetDividendRecord(string id)\n        {\n            return _repository.GetRecord(id);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "38c36223-4588-47af-a41e-e9525c3805c2",
        "Name": "Models",
        "ParentId": "860b7244-d0d0-4a10-9a50-c5a05559f76d",
        "Type": 0,
        "Items": [
          {
            "Id": "610625c4-a7f5-4111-baf7-3b42f82b1bdf",
            "Name": "DividendRequest.cs",
            "ParentId": "38c36223-4588-47af-a41e-e9525c3805c2",
            "Type": 1,
            "Text": "using System.Collections.Generic;\n\nnamespace DividendDistributionManager.Models\n{\n    public class DividendRequest\n    {\n        public decimal DividendPerShare { get; set; }\n        public List<Investor> Investors { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "854702ce-d5e5-4bef-8f07-631069bda392",
            "Name": "Investor.cs",
            "ParentId": "38c36223-4588-47af-a41e-e9525c3805c2",
            "Type": 1,
            "Text": "namespace DividendDistributionManager.Models\n{\n    public class Investor\n    {\n        public string InvestorId { get; set; }\n        public string AccountNumber { get; set; }\n        public int ShareCount { get; set; }\n        public string ContactInfo { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "b24c5d18-9071-44db-b624-66864480ddc2",
            "Name": "DividendRecord.cs",
            "ParentId": "38c36223-4588-47af-a41e-e9525c3805c2",
            "Type": 1,
            "Text": "using System;\n\nnamespace DividendDistributionManager.Models\n{\n    public class DividendRecord\n    {\n        public string Id { get; set; }\n        public DateTime DistributionDate { get; set; }\n        public decimal TotalAmount { get; set; }\n        public int InvestorCount { get; set; }\n        public decimal DividendPerShare { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "3efd76b2-aa49-485f-8619-f46655cb0f93",
        "Name": "Data",
        "ParentId": "860b7244-d0d0-4a10-9a50-c5a05559f76d",
        "Type": 0,
        "Items": [
          {
            "Id": "cbaefe0c-61d0-4d65-94d2-8a795e218e46",
            "Name": "IDividendRepository.cs",
            "ParentId": "3efd76b2-aa49-485f-8619-f46655cb0f93",
            "Type": 1,
            "Text": "using DividendDistributionManager.Models;\n\nnamespace DividendDistributionManager.Data\n{\n    public interface IDividendRepository\n    {\n        void SaveRecord(DividendRecord record);\n        DividendRecord GetRecord(string id);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "3809c2f2-4ee2-4938-955f-6517300436ed",
            "Name": "DividendRepository.cs",
            "ParentId": "3efd76b2-aa49-485f-8619-f46655cb0f93",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing DividendDistributionManager.Models;\n\nnamespace DividendDistributionManager.Data\n{\n    public class DividendRepository : IDividendRepository\n    {\n        private readonly ConcurrentDictionary<string, DividendRecord> _records = new ConcurrentDictionary<string, DividendRecord>();\n\n        public void SaveRecord(DividendRecord record)\n        {\n            _records[record.Id] = record;\n        }\n\n        public DividendRecord GetRecord(string id)\n        {\n            _records.TryGetValue(id, out DividendRecord record);\n            return record;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "9d8c44c2-78d0-4f6d-9423-a13d3463572f",
        "Name": "Infrastructure",
        "ParentId": "860b7244-d0d0-4a10-9a50-c5a05559f76d",
        "Type": 0,
        "Items": [
          {
            "Id": "5181c123-448e-4871-8abe-b945d771a4cd",
            "Name": "IPaymentProcessor.cs",
            "ParentId": "9d8c44c2-78d0-4f6d-9423-a13d3463572f",
            "Type": 1,
            "Text": "namespace DividendDistributionManager.Infrastructure\n{\n    public interface IPaymentProcessor\n    {\n        void ProcessPayment(string accountNumber, decimal amount);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "87500699-1481-49ed-a135-9582b086979e",
            "Name": "PaymentProcessor.cs",
            "ParentId": "9d8c44c2-78d0-4f6d-9423-a13d3463572f",
            "Type": 1,
            "Text": "using System;\n\nnamespace DividendDistributionManager.Infrastructure\n{\n    public class PaymentProcessor : IPaymentProcessor\n    {\n        public void ProcessPayment(string accountNumber, decimal amount)\n        {\n            if (string.IsNullOrWhiteSpace(accountNumber))\n            {\n                throw new ArgumentException(\"Account number cannot be null or empty.\");\n            }\n            if (amount <= 0)\n            {\n                throw new ArgumentException(\"Amount must be greater than zero.\");\n            }\n            // Integrate with the bank's payment gateway using secure API calls.\n            // Implement robust error handling and logging as required in a production environment.\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "7b33002d-8b1c-4bff-ae89-b049f3a26f33",
            "Name": "INotificationService.cs",
            "ParentId": "9d8c44c2-78d0-4f6d-9423-a13d3463572f",
            "Type": 1,
            "Text": "namespace DividendDistributionManager.Infrastructure\n{\n    public interface INotificationService\n    {\n        void SendNotification(string recipient, string message);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "1f70bcab-f4a3-459e-864f-5892b64dbd43",
            "Name": "NotificationService.cs",
            "ParentId": "9d8c44c2-78d0-4f6d-9423-a13d3463572f",
            "Type": 1,
            "Text": "using System;\n\nnamespace DividendDistributionManager.Infrastructure\n{\n    public class NotificationService : INotificationService\n    {\n        public void SendNotification(string recipient, string message)\n        {\n            if (string.IsNullOrWhiteSpace(recipient))\n            {\n                throw new ArgumentException(\"Recipient cannot be null or empty.\");\n            }\n            if (string.IsNullOrWhiteSpace(message))\n            {\n                throw new ArgumentException(\"Message cannot be null or empty.\");\n            }\n            // Integrate with notification systems (e.g., email, SMS) ensuring security and reliability.\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "a2725d50-7750-4e2d-a20e-dbfb41f53390",
    "Name": "PortfolioRebalancingAssistant",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "ffd3e40d-9886-4ec6-b342-ea8b9c45e969",
        "Name": "Program.cs",
        "ParentId": "a2725d50-7750-4e2d-a20e-dbfb41f53390",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing PortfolioRebalancingAssistant.Services;\nusing PortfolioRebalancingAssistant.Infrastructure;\nusing PortfolioRebalancingAssistant.Utils;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddHttpClient();\nbuilder.Services.AddSingleton<IRebalancingService, RebalancingService>();\nbuilder.Services.AddSingleton<IPriceService, PriceService>();\nbuilder.Services.AddSingleton<IFinancialCalculator, FinancialCalculator>();\n\nvar app = builder.Build();\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "62c61974-0386-4e54-84e4-39661a3587c0",
        "Name": "Controllers",
        "ParentId": "a2725d50-7750-4e2d-a20e-dbfb41f53390",
        "Type": 0,
        "Items": [
          {
            "Id": "2d41407c-6d37-4078-9778-12826178fcfa",
            "Name": "RebalanceController.cs",
            "ParentId": "62c61974-0386-4e54-84e4-39661a3587c0",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing PortfolioRebalancingAssistant.Models;\nusing PortfolioRebalancingAssistant.Services;\n\nnamespace PortfolioRebalancingAssistant.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class RebalanceController : ControllerBase\n    {\n        private readonly IRebalancingService _rebalancingService;\n\n        public RebalanceController(IRebalancingService rebalancingService)\n        {\n            _rebalancingService = rebalancingService;\n        }\n\n        [HttpPost(\"trigger\")]\n        public IActionResult TriggerRebalance([FromBody] Portfolio portfolio)\n        {\n            if (portfolio == null)\n                return BadRequest(\"Invalid portfolio data.\");\n\n            RebalanceResult result = _rebalancingService.RebalancePortfolio(portfolio);\n            return Ok(result);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "786c1167-e237-4d31-8f6a-b3eec80a3883",
        "Name": "Services",
        "ParentId": "a2725d50-7750-4e2d-a20e-dbfb41f53390",
        "Type": 0,
        "Items": [
          {
            "Id": "096d7d5f-c843-4d77-84db-135244017ba1",
            "Name": "IRebalancingService.cs",
            "ParentId": "786c1167-e237-4d31-8f6a-b3eec80a3883",
            "Type": 1,
            "Text": "using PortfolioRebalancingAssistant.Models;\n\nnamespace PortfolioRebalancingAssistant.Services\n{\n    public interface IRebalancingService\n    {\n        RebalanceResult RebalancePortfolio(Portfolio portfolio);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "641e7619-23d7-4337-9295-5e66c6e8e916",
            "Name": "RebalancingService.cs",
            "ParentId": "786c1167-e237-4d31-8f6a-b3eec80a3883",
            "Type": 1,
            "Text": "using System;\nusing PortfolioRebalancingAssistant.Models;\nusing PortfolioRebalancingAssistant.Infrastructure;\nusing PortfolioRebalancingAssistant.Utils;\n\nnamespace PortfolioRebalancingAssistant.Services\n{\n    public class RebalancingService : IRebalancingService\n    {\n        private readonly IPriceService _priceService;\n        private readonly IFinancialCalculator _financialCalculator;\n\n        public RebalancingService(IPriceService priceService, IFinancialCalculator financialCalculator)\n        {\n            _priceService = priceService;\n            _financialCalculator = financialCalculator;\n        }\n\n        public RebalanceResult RebalancePortfolio(Portfolio portfolio)\n        {\n            // Update current price for each asset allocation\n            foreach (var allocation in portfolio.Allocations)\n            {\n                allocation.CurrentPrice = _priceService.GetCurrentPrice(allocation.AssetSymbol);\n            }\n\n            // Calculate required adjustments based on target and current percentages\n            var adjustments = _financialCalculator.CalculateRebalancing(portfolio);\n            \n            return new RebalanceResult\n            {\n                PortfolioId = portfolio.PortfolioId,\n                Adjustments = adjustments,\n                RebalancedAt = DateTime.UtcNow\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "98a5ff12-7c29-465d-8ad3-d655badb32a2",
        "Name": "Models",
        "ParentId": "a2725d50-7750-4e2d-a20e-dbfb41f53390",
        "Type": 0,
        "Items": [
          {
            "Id": "e4df8b24-0e9e-4c1c-95c7-2d9d66e6fd0c",
            "Name": "Portfolio.cs",
            "ParentId": "98a5ff12-7c29-465d-8ad3-d655badb32a2",
            "Type": 1,
            "Text": "using System.Collections.Generic;\n\nnamespace PortfolioRebalancingAssistant.Models\n{\n    public class Portfolio\n    {\n        public string PortfolioId { get; set; }\n        public List<AssetAllocation> Allocations { get; set; } = new List<AssetAllocation>();\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "4e824c8b-c73a-4d1d-8d85-3c289753e341",
            "Name": "AssetAllocation.cs",
            "ParentId": "98a5ff12-7c29-465d-8ad3-d655badb32a2",
            "Type": 1,
            "Text": "namespace PortfolioRebalancingAssistant.Models\n{\n    public class AssetAllocation\n    {\n        public string AssetSymbol { get; set; }\n        public decimal TargetPercentage { get; set; }\n        public decimal CurrentPercentage { get; set; }\n        public decimal CurrentPrice { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "8836b616-682f-4f8b-922d-633244ffc4d4",
            "Name": "RebalanceResult.cs",
            "ParentId": "98a5ff12-7c29-465d-8ad3-d655badb32a2",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\n\nnamespace PortfolioRebalancingAssistant.Models\n{\n    public class RebalanceResult\n    {\n        public string PortfolioId { get; set; }\n        public Dictionary<string, decimal> Adjustments { get; set; }\n        public DateTime RebalancedAt { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "d4c2fd50-2b68-409c-9094-29e39cfcec81",
        "Name": "Infrastructure",
        "ParentId": "a2725d50-7750-4e2d-a20e-dbfb41f53390",
        "Type": 0,
        "Items": [
          {
            "Id": "3542ff02-6878-431f-8cc8-a46b8de3b96e",
            "Name": "IPriceService.cs",
            "ParentId": "d4c2fd50-2b68-409c-9094-29e39cfcec81",
            "Type": 1,
            "Text": "namespace PortfolioRebalancingAssistant.Infrastructure\n{\n    public interface IPriceService\n    {\n        decimal GetCurrentPrice(string assetSymbol);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "88c7538f-61ed-4047-ae50-8179f3c03327",
            "Name": "PriceService.cs",
            "ParentId": "d4c2fd50-2b68-409c-9094-29e39cfcec81",
            "Type": 1,
            "Text": "using System.Net.Http;\nusing System.Text.Json;\n\nnamespace PortfolioRebalancingAssistant.Infrastructure\n{\n    public class PriceService : IPriceService\n    {\n        private readonly HttpClient _httpClient;\n\n        public PriceService(IHttpClientFactory httpClientFactory)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n        }\n\n        public decimal GetCurrentPrice(string assetSymbol)\n        {\n            var response = _httpClient.GetAsync($\"https://api.marketdata.com/price/{assetSymbol}\").Result;\n            response.EnsureSuccessStatusCode();\n            var json = response.Content.ReadAsStringAsync().Result;\n            var result = JsonSerializer.Deserialize<PriceResult>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n            return result?.Price ?? 0;\n        }\n\n        private class PriceResult\n        {\n            public decimal Price { get; set; }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "abf21fba-1481-40b1-8e39-290ed57afcd4",
        "Name": "Utils",
        "ParentId": "a2725d50-7750-4e2d-a20e-dbfb41f53390",
        "Type": 0,
        "Items": [
          {
            "Id": "6ded2a60-18de-46c4-8ca5-eff19d297f35",
            "Name": "FinancialCalculator.cs",
            "ParentId": "abf21fba-1481-40b1-8e39-290ed57afcd4",
            "Type": 1,
            "Text": "using System.Collections.Generic;\nusing PortfolioRebalancingAssistant.Models;\n\nnamespace PortfolioRebalancingAssistant.Utils\n{\n    public interface IFinancialCalculator\n    {\n        Dictionary<string, decimal> CalculateRebalancing(Portfolio portfolio);\n    }\n\n    public class FinancialCalculator : IFinancialCalculator\n    {\n        public Dictionary<string, decimal> CalculateRebalancing(Portfolio portfolio)\n        {\n            var adjustments = new Dictionary<string, decimal>();\n            \n            foreach (var allocation in portfolio.Allocations)\n            {\n                // Determine the difference between target and current allocation percentages\n                decimal adjustment = allocation.TargetPercentage - allocation.CurrentPercentage;\n                adjustments[allocation.AssetSymbol] = adjustment;\n            }\n            \n            return adjustments;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "e5f3ba06-300d-46a5-99bf-342dd17970b7",
    "Name": "WealthManagementPlatform",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "b9a54873-ea03-4d73-b91d-c3c31e6d7001",
        "Name": "Program.cs",
        "ParentId": "e5f3ba06-300d-46a5-99bf-342dd17970b7",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace WealthManagementPlatform\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "60abdfaf-2637-451f-b435-7c59013657b2",
        "Name": "Startup.cs",
        "ParentId": "e5f3ba06-300d-46a5-99bf-342dd17970b7",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing WealthManagementPlatform.Services;\nusing WealthManagementPlatform.Data;\nusing WealthManagementPlatform.Infrastructure;\n\nnamespace WealthManagementPlatform\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IWealthService, WealthService>();\n            services.AddSingleton<IWealthRepository, WealthRepository>();\n            services.AddSingleton<INotificationService, NotificationService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n            \n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "5351988f-e74d-4254-a00b-8214b0da2a70",
        "Name": "Controllers",
        "ParentId": "e5f3ba06-300d-46a5-99bf-342dd17970b7",
        "Type": 0,
        "Items": [
          {
            "Id": "d774f85c-6ba6-427f-b7e9-61429dbdb4cd",
            "Name": "WealthController.cs",
            "ParentId": "5351988f-e74d-4254-a00b-8214b0da2a70",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing WealthManagementPlatform.Models;\nusing WealthManagementPlatform.Services;\n\nnamespace WealthManagementPlatform.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class WealthController : ControllerBase\n    {\n        private readonly IWealthService _wealthService;\n\n        public WealthController(IWealthService wealthService)\n        {\n            _wealthService = wealthService;\n        }\n\n        [HttpGet(\"portfolio/{userId}\")]\n        public ActionResult<Portfolio> GetPortfolio(string userId)\n        {\n            var portfolio = _wealthService.GetPortfolio(userId);\n            if (portfolio == null)\n                return NotFound();\n            return Ok(portfolio);\n        }\n\n        [HttpPost(\"portfolio/rebalance\")]\n        public ActionResult<Portfolio> RebalancePortfolio([FromBody] Portfolio portfolio)\n        {\n            if (portfolio == null || string.IsNullOrEmpty(portfolio.UserId))\n            {\n                return BadRequest(\"Invalid portfolio data.\");\n            }\n            var updatedPortfolio = _wealthService.RebalancePortfolio(portfolio);\n            return Ok(updatedPortfolio);\n        }\n\n        [HttpGet(\"riskevaluation/{userId}\")]\n        public ActionResult<RiskEvaluation> EvaluateRisk(string userId)\n        {\n            var portfolio = _wealthService.GetPortfolio(userId);\n            if (portfolio == null)\n                return NotFound();\n            var evaluation = _wealthService.EvaluateRisk(portfolio);\n            return Ok(evaluation);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "d1b49f53-7ef5-4f05-aae1-f97e1ebbddde",
        "Name": "Services",
        "ParentId": "e5f3ba06-300d-46a5-99bf-342dd17970b7",
        "Type": 0,
        "Items": [
          {
            "Id": "51f0e499-7021-43f7-aba1-73d317b0a275",
            "Name": "IWealthService.cs",
            "ParentId": "d1b49f53-7ef5-4f05-aae1-f97e1ebbddde",
            "Type": 1,
            "Text": "using WealthManagementPlatform.Models;\n\nnamespace WealthManagementPlatform.Services\n{\n    public interface IWealthService\n    {\n        Portfolio GetPortfolio(string userId);\n        Portfolio RebalancePortfolio(Portfolio portfolio);\n        RiskEvaluation EvaluateRisk(Portfolio portfolio);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "5fce2e37-2a62-44e1-84a2-cd945bd9b9a3",
            "Name": "WealthService.cs",
            "ParentId": "d1b49f53-7ef5-4f05-aae1-f97e1ebbddde",
            "Type": 1,
            "Text": "using System;\nusing WealthManagementPlatform.Models;\nusing WealthManagementPlatform.Data;\nusing WealthManagementPlatform.Utils;\nusing WealthManagementPlatform.Infrastructure;\n\nnamespace WealthManagementPlatform.Services\n{\n    public class WealthService : IWealthService\n    {\n        private readonly IWealthRepository _repository;\n        private readonly INotificationService _notificationService;\n\n        public WealthService(IWealthRepository repository, INotificationService notificationService)\n        {\n            _repository = repository;\n            _notificationService = notificationService;\n        }\n\n        public Portfolio GetPortfolio(string userId)\n        {\n            return _repository.GetPortfolio(userId);\n        }\n\n        public Portfolio RebalancePortfolio(Portfolio portfolio)\n        {\n            if (portfolio == null || portfolio.Assets == null || portfolio.Assets.Count == 0)\n            {\n                throw new ArgumentException(\"Portfolio must have at least one asset.\");\n            }\n\n            // Rebalance logic: Normalize asset allocation percentages so that they sum to 100\n            decimal totalValue = 0;\n            foreach (var asset in portfolio.Assets)\n            {\n                totalValue += asset.Value;\n            }\n\n            if (totalValue <= 0)\n            {\n                throw new InvalidOperationException(\"Total asset value must be greater than zero.\");\n            }\n\n            foreach (var asset in portfolio.Assets)\n            {\n                asset.AllocationPercentage = Math.Round((double)(asset.Value / totalValue * 100), 2);\n            }\n            portfolio.NetWorth = totalValue;\n\n            // Save the updated portfolio\n            _repository.SavePortfolio(portfolio);\n\n            // Send notification about portfolio rebalance\n            _notificationService.SendNotification(\"client@example.com\", \"Portfolio Rebalanced\",\n                $\"Your portfolio has been rebalanced. New net worth: {portfolio.NetWorth:C}\");\n\n            return portfolio;\n        }\n\n        public RiskEvaluation EvaluateRisk(Portfolio portfolio)\n        {\n            if (portfolio == null)\n            {\n                throw new ArgumentNullException(nameof(portfolio));\n            }\n            double riskScore = RiskCalculator.CalculateRiskScore(portfolio);\n            string evaluation;\n\n            if (riskScore >= 75)\n            {\n                evaluation = \"High Risk\";\n            }\n            else if (riskScore >= 40)\n            {\n                evaluation = \"Moderate Risk\";\n            }\n            else\n            {\n                evaluation = \"Low Risk\";\n            }\n\n            return new RiskEvaluation\n            {\n                PortfolioId = portfolio.UserId,\n                RiskScore = riskScore,\n                Evaluation = evaluation\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "0cac7149-82b0-4898-9e6b-a46883f8d6f2",
        "Name": "Models",
        "ParentId": "e5f3ba06-300d-46a5-99bf-342dd17970b7",
        "Type": 0,
        "Items": [
          {
            "Id": "7371a1eb-0792-46e4-ac0f-a0d69e2c0de2",
            "Name": "Portfolio.cs",
            "ParentId": "0cac7149-82b0-4898-9e6b-a46883f8d6f2",
            "Type": 1,
            "Text": "using System.Collections.Generic;\n\nnamespace WealthManagementPlatform.Models\n{\n    public class Portfolio\n    {\n        public string UserId { get; set; }\n        public decimal NetWorth { get; set; }\n        public List<Asset> Assets { get; set; } = new List<Asset>();\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "d1c7fae3-49d5-4eb4-9f90-131d02d93bed",
            "Name": "Asset.cs",
            "ParentId": "0cac7149-82b0-4898-9e6b-a46883f8d6f2",
            "Type": 1,
            "Text": "namespace WealthManagementPlatform.Models\n{\n    public class Asset\n    {\n        public string AssetId { get; set; }\n        public string AssetName { get; set; }\n        public decimal Value { get; set; }\n        public double AllocationPercentage { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "96775712-3686-4fb5-a800-cb075b609769",
            "Name": "RiskEvaluation.cs",
            "ParentId": "0cac7149-82b0-4898-9e6b-a46883f8d6f2",
            "Type": 1,
            "Text": "namespace WealthManagementPlatform.Models\n{\n    public class RiskEvaluation\n    {\n        public string PortfolioId { get; set; }\n        public double RiskScore { get; set; }\n        public string Evaluation { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "1911fba3-0ddb-4770-9d1f-35a09e2c6fde",
        "Name": "Data",
        "ParentId": "e5f3ba06-300d-46a5-99bf-342dd17970b7",
        "Type": 0,
        "Items": [
          {
            "Id": "5de3d0d6-4a75-45a5-943a-a4b72b990753",
            "Name": "IWealthRepository.cs",
            "ParentId": "1911fba3-0ddb-4770-9d1f-35a09e2c6fde",
            "Type": 1,
            "Text": "using WealthManagementPlatform.Models;\n\nnamespace WealthManagementPlatform.Data\n{\n    public interface IWealthRepository\n    {\n        Portfolio GetPortfolio(string userId);\n        void SavePortfolio(Portfolio portfolio);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "4d6b7def-0669-4bf3-b8de-d1d520c3e57d",
            "Name": "WealthRepository.cs",
            "ParentId": "1911fba3-0ddb-4770-9d1f-35a09e2c6fde",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing WealthManagementPlatform.Models;\n\nnamespace WealthManagementPlatform.Data\n{\n    public class WealthRepository : IWealthRepository\n    {\n        private readonly ConcurrentDictionary<string, Portfolio> _portfolios = new ConcurrentDictionary<string, Portfolio>();\n\n        public Portfolio GetPortfolio(string userId)\n        {\n            _portfolios.TryGetValue(userId, out Portfolio portfolio);\n            return portfolio;\n        }\n\n        public void SavePortfolio(Portfolio portfolio)\n        {\n            _portfolios.AddOrUpdate(portfolio.UserId, portfolio, (key, existing) => portfolio);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "806de100-0e50-4d35-8cf2-a3c50039f4c5",
        "Name": "Infrastructure",
        "ParentId": "e5f3ba06-300d-46a5-99bf-342dd17970b7",
        "Type": 0,
        "Items": [
          {
            "Id": "a3ca56f0-91b0-4d30-8361-6217635ac732",
            "Name": "NotificationService.cs",
            "ParentId": "806de100-0e50-4d35-8cf2-a3c50039f4c5",
            "Type": 1,
            "Text": "using System;\nusing System.Net;\nusing System.Net.Mail;\n\nnamespace WealthManagementPlatform.Infrastructure\n{\n    public interface INotificationService\n    {\n        void SendNotification(string recipient, string subject, string message);\n    }\n\n    public class NotificationService : INotificationService\n    {\n        private readonly SmtpClient _smtpClient;\n        private readonly string _fromAddress;\n\n        public NotificationService()\n        {\n            // In production, these values should be loaded from secure configuration\n            _fromAddress = \"noreply@wealthplatform.com\";\n            _smtpClient = new SmtpClient(\"smtp.wealthplatform.com\")\n            {\n                Port = 587,\n                Credentials = new NetworkCredential(\"username\", \"password\"),\n                EnableSsl = true\n            };\n        }\n\n        public void SendNotification(string recipient, string subject, string message)\n        {\n            try\n            {\n                var mailMessage = new MailMessage(_fromAddress, recipient, subject, message);\n                _smtpClient.Send(mailMessage);\n            }\n            catch (Exception ex)\n            {\n                // In production, use a logging framework to log errors\n                throw new InvalidOperationException(\"Failed to send notification.\", ex);\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "539fa972-4d36-415d-91cd-ee247d28275e",
        "Name": "Utils",
        "ParentId": "e5f3ba06-300d-46a5-99bf-342dd17970b7",
        "Type": 0,
        "Items": [
          {
            "Id": "5a340519-ac1c-40de-83bd-83e1e8ea8db8",
            "Name": "RiskCalculator.cs",
            "ParentId": "539fa972-4d36-415d-91cd-ee247d28275e",
            "Type": 1,
            "Text": "using System.Linq;\nusing WealthManagementPlatform.Models;\n\nnamespace WealthManagementPlatform.Utils\n{\n    public static class RiskCalculator\n    {\n        public static double CalculateRiskScore(Portfolio portfolio)\n        {\n            // Calculate a risk score based on asset allocation volatility.\n            // For demonstration, the risk score is computed as the weighted average of allocations.\n            if (portfolio == null || portfolio.Assets == null || !portfolio.Assets.Any())\n            {\n                return 0;\n            }\n\n            // In a real system, each asset would have a volatility index; here we simulate with allocation percentages\n            double riskScore = portfolio.Assets.Sum(a => a.AllocationPercentage * GetAssetRiskFactor(a));\n            return riskScore;\n        }\n\n        private static double GetAssetRiskFactor(Models.Asset asset)\n        {\n            // Simulate risk factor determination based on asset name or type\n            // High risk assets might include equities, while bonds are lower risk.\n            // This is a simplified version: \n            if (asset.AssetName.ToLower().Contains(\"equity\"))\n            {\n                return 1.2;\n            }\n            else if (asset.AssetName.ToLower().Contains(\"bond\"))\n            {\n                return 0.8;\n            }\n            else if (asset.AssetName.ToLower().Contains(\"real estate\"))\n            {\n                return 1.0;\n            }\n            else\n            {\n                return 1.0;\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "c5e86c19-b9b6-4b94-ae70-f75bb8eb507a",
    "Name": "MarketDataFeedConnector",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "f45d54ba-6f85-456b-8b47-9d5a2e21532f",
        "Name": "Program.cs",
        "ParentId": "c5e86c19-b9b6-4b94-ae70-f75bb8eb507a",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing MarketDataFeedConnector.Services;\nusing MarketDataFeedConnector.Infrastructure;\nusing Microsoft.Extensions.Logging;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add configuration for Market Data API\nbuilder.Configuration.AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true);\n\n// Register services\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IMarketDataService, MarketDataService>();\nbuilder.Services.AddSingleton<IMarketDataConnector, MarketDataConnector>();\n// Configure HttpClient for MarketDataConnector\nbuilder.Services.AddHttpClient<IMarketDataConnector, MarketDataConnector>();\n\nbuilder.Services.AddLogging(config => {\n    config.AddConsole();\n    config.AddDebug();\n});\n\nvar app = builder.Build();\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "b049ca30-da05-492e-a4e3-9a4ad8f70aba",
        "Name": "Controllers",
        "ParentId": "c5e86c19-b9b6-4b94-ae70-f75bb8eb507a",
        "Type": 0,
        "Items": [
          {
            "Id": "6deb24cf-5efd-4876-b419-5298115929da",
            "Name": "MarketDataController.cs",
            "ParentId": "b049ca30-da05-492e-a4e3-9a4ad8f70aba",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing MarketDataFeedConnector.Services;\nusing MarketDataFeedConnector.Models;\n\nnamespace MarketDataFeedConnector.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class MarketDataController : ControllerBase\n    {\n        private readonly IMarketDataService _marketDataService;\n\n        public MarketDataController(IMarketDataService marketDataService)\n        {\n            _marketDataService = marketDataService;\n        }\n\n        [HttpGet(\"latest\")]\n        public async Task<ActionResult<MarketData>> GetLatest()\n        {\n            var data = await _marketDataService.GetLatestMarketDataAsync();\n            if (data == null)\n                return NotFound(\"Market data feed currently unavailable.\");\n            return Ok(data);\n        }\n\n        [HttpPost(\"start\")]\n        public async Task<IActionResult> StartFeed()\n        {\n            await _marketDataService.StartFeedAsync();\n            return Ok(\"Market data feed started.\");\n        }\n\n        [HttpPost(\"stop\")]\n        public async Task<IActionResult> StopFeed()\n        {\n            await _marketDataService.StopFeedAsync();\n            return Ok(\"Market data feed stopped.\");\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "2602e4a3-ac97-43b1-bc30-77e02800159a",
        "Name": "Services",
        "ParentId": "c5e86c19-b9b6-4b94-ae70-f75bb8eb507a",
        "Type": 0,
        "Items": [
          {
            "Id": "f15dd86b-a968-444d-b408-9c00f50111c3",
            "Name": "IMarketDataService.cs",
            "ParentId": "2602e4a3-ac97-43b1-bc30-77e02800159a",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing MarketDataFeedConnector.Models;\n\nnamespace MarketDataFeedConnector.Services\n{\n    public interface IMarketDataService\n    {\n        Task<MarketData> GetLatestMarketDataAsync();\n        Task StartFeedAsync();\n        Task StopFeedAsync();\n    }\n}",
            "Language": 0
          },
          {
            "Id": "34f5023e-b7d3-4183-95e9-c647f8cd48c5",
            "Name": "MarketDataService.cs",
            "ParentId": "2602e4a3-ac97-43b1-bc30-77e02800159a",
            "Type": 1,
            "Text": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing MarketDataFeedConnector.Models;\nusing MarketDataFeedConnector.Infrastructure;\nusing Microsoft.Extensions.Logging;\n\nnamespace MarketDataFeedConnector.Services\n{\n    public class MarketDataService : IMarketDataService\n    {\n        private readonly IMarketDataConnector _connector;\n        private readonly ILogger<MarketDataService> _logger;\n        private MarketData _latestMarketData;\n        private CancellationTokenSource _feedCancellationTokenSource;\n\n        public MarketDataService(IMarketDataConnector connector, ILogger<MarketDataService> logger)\n        {\n            _connector = connector;\n            _logger = logger;\n        }\n\n        public async Task<MarketData> GetLatestMarketDataAsync()\n        {\n            return _latestMarketData;\n        }\n\n        public async Task StartFeedAsync()\n        {\n            if (_feedCancellationTokenSource != null && !_feedCancellationTokenSource.IsCancellationRequested)\n            {\n                _logger.LogWarning(\"Market data feed is already running.\");\n                return;\n            }\n            _feedCancellationTokenSource = new CancellationTokenSource();\n            _ = Task.Run(() => RunFeedAsync(_feedCancellationTokenSource.Token));\n            await Task.CompletedTask;\n        }\n\n        public async Task StopFeedAsync()\n        {\n            if (_feedCancellationTokenSource != null)\n            {\n                _feedCancellationTokenSource.Cancel();\n                _feedCancellationTokenSource.Dispose();\n                _feedCancellationTokenSource = null;\n                _logger.LogInformation(\"Market data feed has been stopped.\");\n            }\n            await Task.CompletedTask;\n        }\n\n        private async Task RunFeedAsync(CancellationToken cancellationToken)\n        {\n            while (!cancellationToken.IsCancellationRequested)\n            {\n                try\n                {\n                    var data = await _connector.FetchMarketDataAsync(cancellationToken);\n                    if (data != null)\n                    {\n                        _latestMarketData = data;\n                        _logger.LogInformation(\"Market data updated: {Symbol} at {Price}\", data.Symbol, data.Price);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"Error fetching market data.\");\n                }\n                await Task.Delay(TimeSpan.FromSeconds(1), cancellationToken);\n            }\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "c83afc32-0b67-4e85-93c1-79871c40aec4",
        "Name": "Models",
        "ParentId": "c5e86c19-b9b6-4b94-ae70-f75bb8eb507a",
        "Type": 0,
        "Items": [
          {
            "Id": "268659a9-97ca-4932-85c1-33015f5e4461",
            "Name": "MarketData.cs",
            "ParentId": "c83afc32-0b67-4e85-93c1-79871c40aec4",
            "Type": 1,
            "Text": "using System;\n\nnamespace MarketDataFeedConnector.Models\n{\n    public class MarketData\n    {\n        public string Symbol { get; set; }\n        public decimal Price { get; set; }\n        public decimal Volume { get; set; }\n        public DateTime Timestamp { get; set; }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "e01c1096-a5e0-45c7-b95b-a3519eb33f87",
        "Name": "Infrastructure",
        "ParentId": "c5e86c19-b9b6-4b94-ae70-f75bb8eb507a",
        "Type": 0,
        "Items": [
          {
            "Id": "d815f6c4-57d5-49b6-ba3e-fa047767f0c1",
            "Name": "IMarketDataConnector.cs",
            "ParentId": "e01c1096-a5e0-45c7-b95b-a3519eb33f87",
            "Type": 1,
            "Text": "using System.Threading;\nusing System.Threading.Tasks;\nusing MarketDataFeedConnector.Models;\n\nnamespace MarketDataFeedConnector.Infrastructure\n{\n    public interface IMarketDataConnector\n    {\n        Task<MarketData> FetchMarketDataAsync(CancellationToken cancellationToken);\n    }\n}",
            "Language": 0
          },
          {
            "Id": "1d6d6481-ecfd-41b6-828e-e56aba2d5892",
            "Name": "MarketDataConnector.cs",
            "ParentId": "e01c1096-a5e0-45c7-b95b-a3519eb33f87",
            "Type": 1,
            "Text": "using System;\nusing System.Net.Http;\nusing System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing MarketDataFeedConnector.Models;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\n\nnamespace MarketDataFeedConnector.Infrastructure\n{\n    public class MarketDataConnector : IMarketDataConnector\n    {\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<MarketDataConnector> _logger;\n        private readonly string _apiEndpoint;\n\n        public MarketDataConnector(HttpClient httpClient, IConfiguration configuration, ILogger<MarketDataConnector> logger)\n        {\n            _httpClient = httpClient;\n            _logger = logger;\n            _apiEndpoint = configuration[\"MarketDataApi:Endpoint\"] ?? \"https://api.marketdata.com/latest\";\n        }\n\n        public async Task<MarketData> FetchMarketDataAsync(CancellationToken cancellationToken)\n        {\n            try\n            {\n                var response = await _httpClient.GetAsync(_apiEndpoint, cancellationToken);\n                response.EnsureSuccessStatusCode();\n                var json = await response.Content.ReadAsStringAsync(cancellationToken);\n                var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };\n                var marketData = JsonSerializer.Deserialize<MarketData>(json, options);\n                return marketData;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to fetch market data from {ApiEndpoint}\", _apiEndpoint);\n                throw;\n            }\n        }\n    }\n}",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "b594d9c3-9e26-433e-b66b-cdf8f54ef376",
    "Name": "DerivativesTradingService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "79cf1b3d-0207-4b74-ab8c-d5d9579f96d6",
        "Name": "Program.cs",
        "ParentId": "b594d9c3-9e26-433e-b66b-cdf8f54ef376",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing DerivativesTradingService.Services;\nusing DerivativesTradingService.Data;\nusing DerivativesTradingService.Integration;\nusing DerivativesTradingService.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Register services\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<ITradingService, TradingService>();\nbuilder.Services.AddSingleton<IOrderRepository, OrderRepository>();\nbuilder.Services.AddSingleton<IRiskManager, RiskManager>();\nbuilder.Services.AddHttpClient();\nbuilder.Services.AddSingleton<ITradingIntegrationAdapter, TradingIntegrationAdapter>();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseAuthorization();\napp.MapControllers();\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "37ae38a4-153a-46ab-a29a-72e77b90ec18",
        "Name": "Controllers",
        "ParentId": "b594d9c3-9e26-433e-b66b-cdf8f54ef376",
        "Type": 0,
        "Items": [
          {
            "Id": "625e1747-9a8d-4991-a840-d53d58fd5a9c",
            "Name": "TradingController.cs",
            "ParentId": "37ae38a4-153a-46ab-a29a-72e77b90ec18",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing DerivativesTradingService.Models;\nusing DerivativesTradingService.Services;\n\nnamespace DerivativesTradingService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TradingController : ControllerBase\n    {\n        private readonly ITradingService _tradingService;\n\n        public TradingController(ITradingService tradingService)\n        {\n            _tradingService = tradingService;\n        }\n\n        [HttpPost(\"placeOrder\")]\n        public async Task<IActionResult> PlaceOrder([FromBody] TradingRequest request)\n        {\n            try\n            {\n                TradingResponse response = await _tradingService.PlaceOrderAsync(request);\n                return Ok(response);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { error = ex.Message });\n            }\n        }\n\n        [HttpGet(\"order/{orderId}\")]\n        public async Task<IActionResult> GetOrder(string orderId)\n        {\n            Order order = await _tradingService.GetOrderAsync(orderId);\n            if (order == null)\n                return NotFound();\n            return Ok(order);\n        }\n\n        [HttpPost(\"cancelOrder\")]\n        public async Task<IActionResult> CancelOrder([FromBody] CancelOrderRequest request)\n        {\n            try\n            {\n                bool result = await _tradingService.CancelOrderAsync(request.OrderId);\n                return Ok(new { success = result });\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { error = ex.Message });\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "ac4a48e7-27de-4094-8a5e-44144a89a078",
        "Name": "Services",
        "ParentId": "b594d9c3-9e26-433e-b66b-cdf8f54ef376",
        "Type": 0,
        "Items": [
          {
            "Id": "49861472-d341-488e-ba18-9c1deac813e3",
            "Name": "ITradingService.cs",
            "ParentId": "ac4a48e7-27de-4094-8a5e-44144a89a078",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing DerivativesTradingService.Models;\n\nnamespace DerivativesTradingService.Services\n{\n    public interface ITradingService\n    {\n        Task<TradingResponse> PlaceOrderAsync(TradingRequest request);\n        Task<Order> GetOrderAsync(string orderId);\n        Task<bool> CancelOrderAsync(string orderId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "5ec7e88d-237e-4022-877f-29081e99b8b4",
            "Name": "TradingService.cs",
            "ParentId": "ac4a48e7-27de-4094-8a5e-44144a89a078",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing DerivativesTradingService.Models;\nusing DerivativesTradingService.Data;\nusing DerivativesTradingService.Integration;\nusing DerivativesTradingService.Infrastructure;\n\nnamespace DerivativesTradingService.Services\n{\n    public class TradingService : ITradingService\n    {\n        private readonly IOrderRepository _orderRepository;\n        private readonly ITradingIntegrationAdapter _integrationAdapter;\n        private readonly IRiskManager _riskManager;\n\n        public TradingService(IOrderRepository orderRepository, ITradingIntegrationAdapter integrationAdapter, IRiskManager riskManager)\n        {\n            _orderRepository = orderRepository;\n            _integrationAdapter = integrationAdapter;\n            _riskManager = riskManager;\n        }\n\n        public async Task<TradingResponse> PlaceOrderAsync(TradingRequest request)\n        {\n            // Assess risk for the order\n            RiskAssessmentResult riskResult = _riskManager.AssessRisk(request);\n            if (!riskResult.IsApproved)\n            {\n                throw new Exception($\"Order risk assessment failed: {riskResult.Reason}\");\n            }\n\n            // Create and save order\n            var order = new Order\n            {\n                OrderId = Guid.NewGuid().ToString(),\n                Symbol = request.Symbol,\n                OrderType = request.OrderType,\n                Quantity = request.Quantity,\n                Price = request.Price,\n                Status = \"Pending\",\n                CreatedAt = DateTime.UtcNow\n            };\n            _orderRepository.SaveOrder(order);\n\n            // Send order to external trading system\n            bool integrationSuccess = await _integrationAdapter.SendOrderAsync(order);\n            order.Status = integrationSuccess ? \"Executed\" : \"Failed\";\n            _orderRepository.UpdateOrder(order);\n\n            return new TradingResponse\n            {\n                OrderId = order.OrderId,\n                Status = order.Status,\n                ExecutedAt = order.Status == \"Executed\" ? DateTime.UtcNow : (DateTime?)null\n            };\n        }\n\n        public async Task<Order> GetOrderAsync(string orderId)\n        {\n            return await Task.FromResult(_orderRepository.GetOrder(orderId));\n        }\n\n        public async Task<bool> CancelOrderAsync(string orderId)\n        {\n            Order order = _orderRepository.GetOrder(orderId);\n            if (order == null || order.Status != \"Pending\")\n            {\n                throw new Exception(\"Order cancellation not permitted.\");\n            }\n            bool canceled = await _integrationAdapter.CancelOrderAsync(orderId);\n            if (canceled)\n            {\n                order.Status = \"Canceled\";\n                _orderRepository.UpdateOrder(order);\n            }\n            return canceled;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "10908a7d-9c08-46e7-b68f-62ae96704e71",
        "Name": "Models",
        "ParentId": "b594d9c3-9e26-433e-b66b-cdf8f54ef376",
        "Type": 0,
        "Items": [
          {
            "Id": "3e09fbc8-ef07-4c53-9cd8-f52470205884",
            "Name": "TradingRequest.cs",
            "ParentId": "10908a7d-9c08-46e7-b68f-62ae96704e71",
            "Type": 1,
            "Text": "namespace DerivativesTradingService.Models\n{\n    public class TradingRequest\n    {\n        public string Symbol { get; set; }\n        public string OrderType { get; set; } // e.g., \"Buy\" or \"Sell\"\n        public decimal Quantity { get; set; }\n        public decimal Price { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "92723b89-115c-4add-b693-9935ddc718fe",
            "Name": "TradingResponse.cs",
            "ParentId": "10908a7d-9c08-46e7-b68f-62ae96704e71",
            "Type": 1,
            "Text": "using System;\n\nnamespace DerivativesTradingService.Models\n{\n    public class TradingResponse\n    {\n        public string OrderId { get; set; }\n        public string Status { get; set; }\n        public DateTime? ExecutedAt { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "f596c53b-de5d-436c-91ea-d2b8b6c68f9b",
            "Name": "Order.cs",
            "ParentId": "10908a7d-9c08-46e7-b68f-62ae96704e71",
            "Type": 1,
            "Text": "using System;\n\nnamespace DerivativesTradingService.Models\n{\n    public class Order\n    {\n        public string OrderId { get; set; }\n        public string Symbol { get; set; }\n        public string OrderType { get; set; }\n        public decimal Quantity { get; set; }\n        public decimal Price { get; set; }\n        public string Status { get; set; }\n        public DateTime CreatedAt { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "83171e86-af50-43a9-87fd-364728664fea",
            "Name": "CancelOrderRequest.cs",
            "ParentId": "10908a7d-9c08-46e7-b68f-62ae96704e71",
            "Type": 1,
            "Text": "namespace DerivativesTradingService.Models\n{\n    public class CancelOrderRequest\n    {\n        public string OrderId { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "6e998c76-b468-4c72-a627-fae6d7b5aa3b",
        "Name": "Data",
        "ParentId": "b594d9c3-9e26-433e-b66b-cdf8f54ef376",
        "Type": 0,
        "Items": [
          {
            "Id": "f1e4196f-cf2c-414f-b445-7146c1a39b5e",
            "Name": "IOrderRepository.cs",
            "ParentId": "6e998c76-b468-4c72-a627-fae6d7b5aa3b",
            "Type": 1,
            "Text": "using DerivativesTradingService.Models;\n\nnamespace DerivativesTradingService.Data\n{\n    public interface IOrderRepository\n    {\n        void SaveOrder(Order order);\n        void UpdateOrder(Order order);\n        Order GetOrder(string orderId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "6006c1d3-9e51-4d8e-a095-7687e719e610",
            "Name": "OrderRepository.cs",
            "ParentId": "6e998c76-b468-4c72-a627-fae6d7b5aa3b",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing DerivativesTradingService.Models;\n\nnamespace DerivativesTradingService.Data\n{\n    public class OrderRepository : IOrderRepository\n    {\n        private readonly ConcurrentDictionary<string, Order> _orders = new ConcurrentDictionary<string, Order>();\n\n        public void SaveOrder(Order order)\n        {\n            _orders[order.OrderId] = order;\n        }\n\n        public void UpdateOrder(Order order)\n        {\n            _orders[order.OrderId] = order;\n        }\n\n        public Order GetOrder(string orderId)\n        {\n            _orders.TryGetValue(orderId, out Order order);\n            return order;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "bf99705b-0214-4625-a394-f4f65e938d65",
        "Name": "Infrastructure",
        "ParentId": "b594d9c3-9e26-433e-b66b-cdf8f54ef376",
        "Type": 0,
        "Items": [
          {
            "Id": "3adf18c7-8780-4e7a-a6d2-103a58136e71",
            "Name": "RiskManager.cs",
            "ParentId": "bf99705b-0214-4625-a394-f4f65e938d65",
            "Type": 1,
            "Text": "using DerivativesTradingService.Models;\n\nnamespace DerivativesTradingService.Infrastructure\n{\n    public interface IRiskManager\n    {\n        RiskAssessmentResult AssessRisk(TradingRequest request);\n    }\n\n    public class RiskAssessmentResult\n    {\n        public bool IsApproved { get; set; }\n        public string Reason { get; set; }\n    }\n\n    public class RiskManager : IRiskManager\n    {\n        public RiskAssessmentResult AssessRisk(TradingRequest request)\n        {\n            if (request.Quantity <= 0 || request.Price <= 0)\n            {\n                return new RiskAssessmentResult { IsApproved = false, Reason = \"Quantity and price must be greater than zero.\" };\n            }\n            if (request.Quantity * request.Price > 1000000)\n            {\n                return new RiskAssessmentResult { IsApproved = false, Reason = \"Order value exceeds permitted threshold.\" };\n            }\n            return new RiskAssessmentResult { IsApproved = true, Reason = \"Approved.\" };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "0ac891df-adf9-4e5b-8252-5d86583ede2b",
        "Name": "Integration",
        "ParentId": "b594d9c3-9e26-433e-b66b-cdf8f54ef376",
        "Type": 0,
        "Items": [
          {
            "Id": "27169387-ab24-4b92-9dbd-5ccd05faae0d",
            "Name": "ITradingIntegrationAdapter.cs",
            "ParentId": "0ac891df-adf9-4e5b-8252-5d86583ede2b",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing DerivativesTradingService.Models;\n\nnamespace DerivativesTradingService.Integration\n{\n    public interface ITradingIntegrationAdapter\n    {\n        Task<bool> SendOrderAsync(Order order);\n        Task<bool> CancelOrderAsync(string orderId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "007ce6a7-ad45-42c0-9099-ea62456e92e3",
            "Name": "TradingIntegrationAdapter.cs",
            "ParentId": "0ac891df-adf9-4e5b-8252-5d86583ede2b",
            "Type": 1,
            "Text": "using System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing DerivativesTradingService.Models;\nusing Microsoft.Extensions.Configuration;\n\nnamespace DerivativesTradingService.Integration\n{\n    public class TradingIntegrationAdapter : ITradingIntegrationAdapter\n    {\n        private readonly HttpClient _httpClient;\n        private readonly IConfiguration _configuration;\n\n        public TradingIntegrationAdapter(IHttpClientFactory httpClientFactory, IConfiguration configuration)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n            _configuration = configuration;\n        }\n\n        public async Task<bool> SendOrderAsync(Order order)\n        {\n            string endpoint = _configuration[\"TradingIntegration:Endpoint\"];\n            string orderJson = JsonSerializer.Serialize(order);\n            var content = new StringContent(orderJson, Encoding.UTF8, \"application/json\");\n            var response = await _httpClient.PostAsync(endpoint + \"/orders\", content);\n            return response.IsSuccessStatusCode;\n        }\n\n        public async Task<bool> CancelOrderAsync(string orderId)\n        {\n            string endpoint = _configuration[\"TradingIntegration:Endpoint\"];\n            var response = await _httpClient.DeleteAsync(endpoint + \"/orders/\" + orderId);\n            return response.IsSuccessStatusCode;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "18c19115-f4ae-46e6-9a79-30fe1eeea8ff",
    "Name": "FuturesTradingPlatform",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "a33beb14-e00d-4219-b4a9-c3766824522d",
        "Name": "Program.cs",
        "ParentId": "18c19115-f4ae-46e6-9a79-30fe1eeea8ff",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace FuturesTradingPlatform\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n        \n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "227cf3ce-6e61-4823-a465-39519c9dc0b6",
        "Name": "Startup.cs",
        "ParentId": "18c19115-f4ae-46e6-9a79-30fe1eeea8ff",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing FuturesTradingPlatform.Services;\nusing FuturesTradingPlatform.Data;\nusing FuturesTradingPlatform.Infrastructure;\n\nnamespace FuturesTradingPlatform\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IFuturesTradingService, FuturesTradingService>();\n            services.AddSingleton<ITradeRepository, TradeRepository>();\n            services.AddSingleton<IMarketDataAdapter, MarketDataAdapter>();\n            services.AddSingleton<ITradingLogger, TradingLogger>();\n            services.AddLogging();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n            app.UseAuthorization();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "d609f85d-9a87-46db-8f47-fd42bad7a0ef",
        "Name": "Controllers",
        "ParentId": "18c19115-f4ae-46e6-9a79-30fe1eeea8ff",
        "Type": 0,
        "Items": [
          {
            "Id": "e0c0bb47-caad-4f56-a5b4-727e85f50255",
            "Name": "FuturesTradingController.cs",
            "ParentId": "d609f85d-9a87-46db-8f47-fd42bad7a0ef",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing FuturesTradingPlatform.Services;\nusing FuturesTradingPlatform.Models;\n\nnamespace FuturesTradingPlatform.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class FuturesTradingController : ControllerBase\n    {\n        private readonly IFuturesTradingService _tradingService;\n\n        public FuturesTradingController(IFuturesTradingService tradingService)\n        {\n            _tradingService = tradingService;\n        }\n\n        [HttpPost(\"trade\")]\n        public async Task<IActionResult> PlaceTrade([FromBody] TradeOrder order)\n        {\n            try\n            {\n                var response = await _tradingService.ProcessTradeAsync(order);\n                return Ok(response);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { Error = ex.Message });\n            }\n        }\n\n        [HttpGet(\"trade/{orderId}\")]\n        public async Task<IActionResult> GetTrade(string orderId)\n        {\n            var order = await _tradingService.GetTradeAsync(orderId);\n            if (order == null)\n                return NotFound();\n            return Ok(order);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "c9066285-6789-4235-bc87-9ad7bc0d1642",
        "Name": "Services",
        "ParentId": "18c19115-f4ae-46e6-9a79-30fe1eeea8ff",
        "Type": 0,
        "Items": [
          {
            "Id": "609f5b1b-452a-4de0-8a12-b2da2564fe74",
            "Name": "IFuturesTradingService.cs",
            "ParentId": "c9066285-6789-4235-bc87-9ad7bc0d1642",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing FuturesTradingPlatform.Models;\n\nnamespace FuturesTradingPlatform.Services\n{\n    public interface IFuturesTradingService\n    {\n        Task<TradeResponse> ProcessTradeAsync(TradeOrder order);\n        Task<TradeOrder> GetTradeAsync(string orderId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "b6c6aaf6-9c59-4382-89a0-6df3ece2af98",
            "Name": "FuturesTradingService.cs",
            "ParentId": "c9066285-6789-4235-bc87-9ad7bc0d1642",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing FuturesTradingPlatform.Models;\nusing FuturesTradingPlatform.Data;\nusing FuturesTradingPlatform.Infrastructure;\n\nnamespace FuturesTradingPlatform.Services\n{\n    public class FuturesTradingService : IFuturesTradingService\n    {\n        private readonly ITradeRepository _tradeRepository;\n        private readonly IMarketDataAdapter _marketDataAdapter;\n        private readonly ITradingLogger _tradingLogger;\n\n        public FuturesTradingService(ITradeRepository tradeRepository, IMarketDataAdapter marketDataAdapter, ITradingLogger tradingLogger)\n        {\n            _tradeRepository = tradeRepository;\n            _marketDataAdapter = marketDataAdapter;\n            _tradingLogger = tradingLogger;\n        }\n\n        public async Task<TradeResponse> ProcessTradeAsync(TradeOrder order)\n        {\n            // Validate order details\n            if (string.IsNullOrWhiteSpace(order.UserId) || order.Quantity <= 0)\n                throw new ArgumentException(\"Invalid order details.\");\n\n            // Retrieve current market price for the futures contract\n            decimal marketPrice = await _marketDataAdapter.GetMarketPriceAsync(order.ContractSymbol);\n\n            // Basic risk assessment checks\n            if (order.OrderType.Equals(\"Buy\", StringComparison.OrdinalIgnoreCase) && order.Price < marketPrice * 0.95m)\n            {\n                throw new InvalidOperationException(\"Order price too low compared to market price, risk threshold not met.\");\n            }\n            if (order.OrderType.Equals(\"Sell\", StringComparison.OrdinalIgnoreCase) && order.Price > marketPrice * 1.05m)\n            {\n                throw new InvalidOperationException(\"Order price too high compared to market price, risk threshold not met.\");\n            }\n\n            order.OrderStatus = \"Processed\";\n            order.OrderId = Guid.NewGuid().ToString();\n            order.CreatedAt = DateTime.UtcNow;\n\n            // Store the trade order\n            _tradeRepository.StoreTrade(order);\n\n            _tradingLogger.LogInfo($\"Trade processed: {order.OrderId} for user {order.UserId}\");\n\n            return new TradeResponse\n            {\n                OrderId = order.OrderId,\n                Status = order.OrderStatus,\n                ProcessedAt = order.CreatedAt,\n                ExecutedPrice = order.Price\n            };\n        }\n\n        public async Task<TradeOrder> GetTradeAsync(string orderId)\n        {\n            return await Task.FromResult(_tradeRepository.GetTrade(orderId));\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "787f3aa0-5124-4748-9477-05b9840a2711",
        "Name": "Models",
        "ParentId": "18c19115-f4ae-46e6-9a79-30fe1eeea8ff",
        "Type": 0,
        "Items": [
          {
            "Id": "6a79a74a-dfab-43f8-9f45-b6af6c34fcdb",
            "Name": "TradeOrder.cs",
            "ParentId": "787f3aa0-5124-4748-9477-05b9840a2711",
            "Type": 1,
            "Text": "using System;\n\nnamespace FuturesTradingPlatform.Models\n{\n    public class TradeOrder\n    {\n        public string OrderId { get; set; }\n        public string UserId { get; set; }\n        public string ContractSymbol { get; set; }\n        public int Quantity { get; set; }\n        public string OrderType { get; set; } // \"Buy\" or \"Sell\"\n        public decimal Price { get; set; }\n        public string OrderStatus { get; set; }\n        public DateTime CreatedAt { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "118fc29e-60c4-49ca-a015-e587ca486a71",
            "Name": "TradeResponse.cs",
            "ParentId": "787f3aa0-5124-4748-9477-05b9840a2711",
            "Type": 1,
            "Text": "using System;\n\nnamespace FuturesTradingPlatform.Models\n{\n    public class TradeResponse\n    {\n        public string OrderId { get; set; }\n        public string Status { get; set; }\n        public DateTime ProcessedAt { get; set; }\n        public decimal ExecutedPrice { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "a6a88947-2c8b-4a7c-bc99-7810ce59b416",
            "Name": "FuturesContract.cs",
            "ParentId": "787f3aa0-5124-4748-9477-05b9840a2711",
            "Type": 1,
            "Text": "using System;\n\nnamespace FuturesTradingPlatform.Models\n{\n    public class FuturesContract\n    {\n        public string ContractSymbol { get; set; }\n        public string UnderlyingAsset { get; set; }\n        public DateTime ExpiryDate { get; set; }\n        public decimal TickSize { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "5084f251-e971-47ba-abdd-892dc4e991b8",
        "Name": "Data",
        "ParentId": "18c19115-f4ae-46e6-9a79-30fe1eeea8ff",
        "Type": 0,
        "Items": [
          {
            "Id": "6e0f0ac0-485d-44f2-a8c6-c32aaea33bdf",
            "Name": "ITradeRepository.cs",
            "ParentId": "5084f251-e971-47ba-abdd-892dc4e991b8",
            "Type": 1,
            "Text": "using FuturesTradingPlatform.Models;\n\nnamespace FuturesTradingPlatform.Data\n{\n    public interface ITradeRepository\n    {\n        void StoreTrade(TradeOrder order);\n        TradeOrder GetTrade(string orderId);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "3d40006f-40bd-40c8-96df-67ec1f027641",
            "Name": "TradeRepository.cs",
            "ParentId": "5084f251-e971-47ba-abdd-892dc4e991b8",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing FuturesTradingPlatform.Models;\n\nnamespace FuturesTradingPlatform.Data\n{\n    public class TradeRepository : ITradeRepository\n    {\n        private readonly ConcurrentDictionary<string, TradeOrder> _trades = new ConcurrentDictionary<string, TradeOrder>();\n\n        public void StoreTrade(TradeOrder order)\n        {\n            _trades[order.OrderId] = order;\n        }\n\n        public TradeOrder GetTrade(string orderId)\n        {\n            _trades.TryGetValue(orderId, out TradeOrder order);\n            return order;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "9f50862c-633d-4785-bd1e-7467c9a4d24c",
        "Name": "Infrastructure",
        "ParentId": "18c19115-f4ae-46e6-9a79-30fe1eeea8ff",
        "Type": 0,
        "Items": [
          {
            "Id": "8d77ebb0-fb69-409a-a08d-939a8efe722c",
            "Name": "IMarketDataAdapter.cs",
            "ParentId": "9f50862c-633d-4785-bd1e-7467c9a4d24c",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\n\nnamespace FuturesTradingPlatform.Infrastructure\n{\n    public interface IMarketDataAdapter\n    {\n        Task<decimal> GetMarketPriceAsync(string contractSymbol);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "510f4424-55f5-4430-9ef9-bf378fcdc565",
            "Name": "MarketDataAdapter.cs",
            "ParentId": "9f50862c-633d-4785-bd1e-7467c9a4d24c",
            "Type": 1,
            "Text": "using System;\nusing System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace FuturesTradingPlatform.Infrastructure\n{\n    public class MarketDataAdapter : IMarketDataAdapter\n    {\n        private readonly HttpClient _httpClient;\n\n        public MarketDataAdapter()\n        {\n            _httpClient = new HttpClient();\n        }\n\n        public async Task<decimal> GetMarketPriceAsync(string contractSymbol)\n        {\n            // Call external market data API - production logic\n            string url = $\"https://api.marketdata.com/price?symbol={contractSymbol}\";\n            var response = await _httpClient.GetAsync(url);\n            response.EnsureSuccessStatusCode();\n            var json = await response.Content.ReadAsStringAsync();\n            var result = JsonSerializer.Deserialize<MarketPriceResult>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n            if (result == null)\n                throw new Exception(\"Failed to retrieve market price.\");\n            return result.MarketPrice;\n        }\n\n        private class MarketPriceResult\n        {\n            public decimal MarketPrice { get; set; }\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "3eebb538-0a7e-47bc-b8b0-743e99cec8f1",
            "Name": "ITradingLogger.cs",
            "ParentId": "9f50862c-633d-4785-bd1e-7467c9a4d24c",
            "Type": 1,
            "Text": "using System;\n\nnamespace FuturesTradingPlatform.Infrastructure\n{\n    public interface ITradingLogger\n    {\n        void LogInfo(string message);\n        void LogError(string message, Exception ex);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "3d90b158-9b90-47ee-a472-564bbec39eed",
            "Name": "TradingLogger.cs",
            "ParentId": "9f50862c-633d-4785-bd1e-7467c9a4d24c",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace FuturesTradingPlatform.Infrastructure\n{\n    public class TradingLogger : ITradingLogger\n    {\n        private readonly ILogger<TradingLogger> _logger;\n\n        public TradingLogger(ILogger<TradingLogger> logger)\n        {\n            _logger = logger;\n        }\n\n        public void LogInfo(string message)\n        {\n            _logger.LogInformation(message);\n        }\n\n        public void LogError(string message, Exception ex)\n        {\n            _logger.LogError(ex, message);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "54e87428-f814-4a15-a1a1-38d037bb0329",
    "Name": "OptionsTradingService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "5fd987a8-072d-412b-a7d8-6e8aafe9bf1b",
        "Name": "Program.cs",
        "ParentId": "54e87428-f814-4a15-a1a1-38d037bb0329",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace OptionsTradingService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "8cbca6e5-3269-4de0-8815-670f6ef6eeee",
        "Name": "Startup.cs",
        "ParentId": "54e87428-f814-4a15-a1a1-38d037bb0329",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing OptionsTradingService.Services;\nusing OptionsTradingService.Data;\nusing OptionsTradingService.Infrastructure;\n\nnamespace OptionsTradingService\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient();\n            services.AddSingleton<IOptionsService, OptionsService>();\n            services.AddSingleton<IOptionRepository, OptionRepository>();\n            services.AddSingleton<IRiskManagementService, RiskManagementService>();\n            services.AddSingleton<IIntegrationAdapter, IntegrationAdapter>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "67746458-7885-49ec-b6b9-46cf118aab27",
        "Name": "Controllers",
        "ParentId": "54e87428-f814-4a15-a1a1-38d037bb0329",
        "Type": 0,
        "Items": [
          {
            "Id": "e515fffc-905a-4f2f-a379-4ac5e02fddcc",
            "Name": "OptionsController.cs",
            "ParentId": "67746458-7885-49ec-b6b9-46cf118aab27",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing OptionsTradingService.Models;\nusing OptionsTradingService.Services;\n\nnamespace OptionsTradingService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class OptionsController : ControllerBase\n    {\n        private readonly IOptionsService _optionsService;\n\n        public OptionsController(IOptionsService optionsService)\n        {\n            _optionsService = optionsService;\n        }\n\n        [HttpPost(\"trade\")]\n        public async Task<ActionResult<TradeResponse>> TradeOption([FromBody] TradeRequest request)\n        {\n            var response = await _optionsService.ProcessTradeAsync(request);\n            if (response.Success)\n            {\n                return Ok(response);\n            }\n            return BadRequest(response);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "ffcf9d38-b9de-43b8-b247-07ace2777d89",
        "Name": "Services",
        "ParentId": "54e87428-f814-4a15-a1a1-38d037bb0329",
        "Type": 0,
        "Items": [
          {
            "Id": "24f47915-8e1e-445f-8f4a-f72fc5ed1a48",
            "Name": "IOptionsService.cs",
            "ParentId": "ffcf9d38-b9de-43b8-b247-07ace2777d89",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing OptionsTradingService.Models;\n\nnamespace OptionsTradingService.Services\n{\n    public interface IOptionsService\n    {\n        Task<TradeResponse> ProcessTradeAsync(TradeRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "25ed327a-5b49-48c0-bffc-fc2d1028d825",
            "Name": "OptionsService.cs",
            "ParentId": "ffcf9d38-b9de-43b8-b247-07ace2777d89",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing OptionsTradingService.Models;\nusing OptionsTradingService.Data;\nusing OptionsTradingService.Infrastructure;\n\nnamespace OptionsTradingService.Services\n{\n    public class OptionsService : IOptionsService\n    {\n        private readonly IOptionRepository _repository;\n        private readonly IRiskManagementService _riskService;\n        private readonly IIntegrationAdapter _integrationAdapter;\n\n        public OptionsService(IOptionRepository repository, IRiskManagementService riskService, IIntegrationAdapter integrationAdapter)\n        {\n            _repository = repository;\n            _riskService = riskService;\n            _integrationAdapter = integrationAdapter;\n        }\n\n        public async Task<TradeResponse> ProcessTradeAsync(TradeRequest request)\n        {\n            if (!request.IsValid())\n            {\n                return new TradeResponse { Success = false, ErrorMessage = \"Invalid trade request.\" };\n            }\n\n            double riskScore = _riskService.EvaluateRisk(request);\n            if (riskScore > 0.8)\n            {\n                return new TradeResponse { Success = false, ErrorMessage = \"Trade rejected due to high risk.\" };\n            }\n\n            var order = new OptionOrder\n            {\n                OrderId = Guid.NewGuid().ToString(),\n                Symbol = request.Symbol,\n                Quantity = request.Quantity,\n                OptionType = request.OptionType,\n                StrikePrice = request.StrikePrice,\n                Premium = request.Premium,\n                TradeTime = DateTime.UtcNow\n            };\n\n            _repository.SaveOrder(order);\n\n            bool executionResult = await _integrationAdapter.ExecuteTradeAsync(order);\n            if (!executionResult)\n            {\n                return new TradeResponse { Success = false, ErrorMessage = \"Trade execution failed.\" };\n            }\n\n            return new TradeResponse { Success = true, OrderId = order.OrderId };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "ad2f9aee-c99c-4aed-8daa-7feb3f978d2f",
        "Name": "Models",
        "ParentId": "54e87428-f814-4a15-a1a1-38d037bb0329",
        "Type": 0,
        "Items": [
          {
            "Id": "b2fb84f8-c46f-45fd-86a2-f7b4fa3d52ea",
            "Name": "OptionOrder.cs",
            "ParentId": "ad2f9aee-c99c-4aed-8daa-7feb3f978d2f",
            "Type": 1,
            "Text": "using System;\n\nnamespace OptionsTradingService.Models\n{\n    public class OptionOrder\n    {\n        public string OrderId { get; set; }\n        public string Symbol { get; set; }\n        public int Quantity { get; set; }\n        public string OptionType { get; set; }  // Call or Put\n        public decimal StrikePrice { get; set; }\n        public decimal Premium { get; set; }\n        public DateTime TradeTime { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "509b6fa5-7520-4b15-bebc-2f78e5770752",
            "Name": "TradeRequest.cs",
            "ParentId": "ad2f9aee-c99c-4aed-8daa-7feb3f978d2f",
            "Type": 1,
            "Text": "namespace OptionsTradingService.Models\n{\n    public class TradeRequest\n    {\n        public string Symbol { get; set; }\n        public int Quantity { get; set; }\n        public string OptionType { get; set; }  // \"Call\" or \"Put\"\n        public decimal StrikePrice { get; set; }\n        public decimal Premium { get; set; }\n\n        public bool IsValid()\n        {\n            return !string.IsNullOrWhiteSpace(Symbol) && Quantity > 0 &&\n                   (OptionType == \"Call\" || OptionType == \"Put\") &&\n                   StrikePrice > 0 && Premium > 0;\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "b546443e-5b80-459d-ac91-0965a3e400e5",
            "Name": "TradeResponse.cs",
            "ParentId": "ad2f9aee-c99c-4aed-8daa-7feb3f978d2f",
            "Type": 1,
            "Text": "namespace OptionsTradingService.Models\n{\n    public class TradeResponse\n    {\n        public bool Success { get; set; }\n        public string OrderId { get; set; }\n        public string ErrorMessage { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "c1d67c3d-c33c-4b3b-a45f-fc9102a88e26",
        "Name": "Data",
        "ParentId": "54e87428-f814-4a15-a1a1-38d037bb0329",
        "Type": 0,
        "Items": [
          {
            "Id": "1b61bffb-7433-4426-8397-cb16c88d19ca",
            "Name": "IOptionRepository.cs",
            "ParentId": "c1d67c3d-c33c-4b3b-a45f-fc9102a88e26",
            "Type": 1,
            "Text": "using OptionsTradingService.Models;\n\nnamespace OptionsTradingService.Data\n{\n    public interface IOptionRepository\n    {\n        void SaveOrder(OptionOrder order);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "97e23e4f-564c-44a0-9830-b19c21d02f7c",
            "Name": "OptionRepository.cs",
            "ParentId": "c1d67c3d-c33c-4b3b-a45f-fc9102a88e26",
            "Type": 1,
            "Text": "using System.Collections.Concurrent;\nusing OptionsTradingService.Models;\n\nnamespace OptionsTradingService.Data\n{\n    public class OptionRepository : IOptionRepository\n    {\n        private readonly ConcurrentDictionary<string, OptionOrder> _orders = new ConcurrentDictionary<string, OptionOrder>();\n\n        public void SaveOrder(OptionOrder order)\n        {\n            _orders[order.OrderId] = order;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "05ca37a4-c8d5-4dfe-8551-508c22571605",
        "Name": "Infrastructure",
        "ParentId": "54e87428-f814-4a15-a1a1-38d037bb0329",
        "Type": 0,
        "Items": [
          {
            "Id": "049c0887-ec2e-4a2b-ac3a-a8492f8b66fa",
            "Name": "IRiskManagementService.cs",
            "ParentId": "05ca37a4-c8d5-4dfe-8551-508c22571605",
            "Type": 1,
            "Text": "using OptionsTradingService.Models;\n\nnamespace OptionsTradingService.Infrastructure\n{\n    public interface IRiskManagementService\n    {\n        double EvaluateRisk(TradeRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "739a781c-bf42-44a8-a49b-310922a8337a",
            "Name": "RiskManagementService.cs",
            "ParentId": "05ca37a4-c8d5-4dfe-8551-508c22571605",
            "Type": 1,
            "Text": "using OptionsTradingService.Models;\n\nnamespace OptionsTradingService.Infrastructure\n{\n    public class RiskManagementService : IRiskManagementService\n    {\n        public double EvaluateRisk(TradeRequest request)\n        {\n            double exposure = (double)(request.Premium * request.Quantity);\n            double risk = exposure / 100000;\n            return risk > 1 ? 1 : risk;\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "af570530-978e-4744-ab1e-12621eeb8e58",
            "Name": "IIntegrationAdapter.cs",
            "ParentId": "05ca37a4-c8d5-4dfe-8551-508c22571605",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing OptionsTradingService.Models;\n\nnamespace OptionsTradingService.Infrastructure\n{\n    public interface IIntegrationAdapter\n    {\n        Task<bool> ExecuteTradeAsync(OptionOrder order);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "e12d3ca4-b63e-4897-88f8-be41b70b5984",
            "Name": "IntegrationAdapter.cs",
            "ParentId": "05ca37a4-c8d5-4dfe-8551-508c22571605",
            "Type": 1,
            "Text": "using System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing OptionsTradingService.Models;\n\nnamespace OptionsTradingService.Infrastructure\n{\n    public class IntegrationAdapter : IIntegrationAdapter\n    {\n        private readonly HttpClient _httpClient;\n\n        public IntegrationAdapter(IHttpClientFactory httpClientFactory)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n        }\n\n        public async Task<bool> ExecuteTradeAsync(OptionOrder order)\n        {\n            string endpoint = \"https://api.brokerage.com/executeTrade\";\n            var json = JsonSerializer.Serialize(order);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n            var response = await _httpClient.PostAsync(endpoint, content);\n            return response.IsSuccessStatusCode;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "7dad7e81-9e21-430d-bd50-1768d4540266",
        "Name": "Utils",
        "ParentId": "54e87428-f814-4a15-a1a1-38d037bb0329",
        "Type": 0,
        "Items": [
          {
            "Id": "1ff3a334-6797-4c04-98af-ea85c444ad47",
            "Name": "RiskCalculator.cs",
            "ParentId": "7dad7e81-9e21-430d-bd50-1768d4540266",
            "Type": 1,
            "Text": "namespace OptionsTradingService.Utils\n{\n    public static class RiskCalculator\n    {\n        public static double CalculateRisk(decimal premium, int quantity)\n        {\n            double exposure = (double)(premium * quantity);\n            double risk = exposure / 100000;\n            return risk > 1 ? 1 : risk;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "af19350d-188d-4860-bd7b-39acd89a6478",
    "Name": "ClearingHouseInterface",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "23f44ed2-e681-41db-b86d-5aaddc7cc93b",
        "Name": "Program.cs",
        "ParentId": "af19350d-188d-4860-bd7b-39acd89a6478",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing ClearingHouseInterface.Services;\nusing ClearingHouseInterface.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Configure services\nbuilder.Services.AddControllers();\nbuilder.Services.AddHttpClient();\nbuilder.Services.AddScoped<IClearingHouseService, ClearingHouseService>();\nbuilder.Services.AddScoped<IClearingHouseAdapter, ClearingHouseAdapter>();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "a914697a-5e62-4d74-bb33-cbf22df535ec",
        "Name": "Controllers",
        "ParentId": "af19350d-188d-4860-bd7b-39acd89a6478",
        "Type": 0,
        "Items": [
          {
            "Id": "e9fe6623-312f-40d5-a4c4-6c2e668ad5e3",
            "Name": "ClearingHouseController.cs",
            "ParentId": "a914697a-5e62-4d74-bb33-cbf22df535ec",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing ClearingHouseInterface.Models;\nusing ClearingHouseInterface.Services;\n\nnamespace ClearingHouseInterface.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ClearingHouseController : ControllerBase\n    {\n        private readonly IClearingHouseService _clearingHouseService;\n\n        public ClearingHouseController(IClearingHouseService clearingHouseService)\n        {\n            _clearingHouseService = clearingHouseService;\n        }\n\n        [HttpPost(\"settle\")]\n        public async Task<IActionResult> SettleAsync([FromBody] SettlementRequest request)\n        {\n            var response = await _clearingHouseService.ProcessSettlementAsync(request);\n            if (response.IsSuccess)\n            {\n                return Ok(response);\n            }\n            return BadRequest(response);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "dfdf50b0-fe05-4dec-babb-1a1879853c0a",
        "Name": "Services",
        "ParentId": "af19350d-188d-4860-bd7b-39acd89a6478",
        "Type": 0,
        "Items": [
          {
            "Id": "4986c76a-82a4-42b5-afad-af8cc2f8e4fb",
            "Name": "IClearingHouseService.cs",
            "ParentId": "dfdf50b0-fe05-4dec-babb-1a1879853c0a",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing ClearingHouseInterface.Models;\n\nnamespace ClearingHouseInterface.Services\n{\n    public interface IClearingHouseService\n    {\n        Task<SettlementResponse> ProcessSettlementAsync(SettlementRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "387af5fa-fca0-452e-bc84-c2e70fe71fd0",
            "Name": "ClearingHouseService.cs",
            "ParentId": "dfdf50b0-fe05-4dec-babb-1a1879853c0a",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing ClearingHouseInterface.Models;\nusing ClearingHouseInterface.Infrastructure;\n\nnamespace ClearingHouseInterface.Services\n{\n    public class ClearingHouseService : IClearingHouseService\n    {\n        private readonly IClearingHouseAdapter _adapter;\n\n        public ClearingHouseService(IClearingHouseAdapter adapter)\n        {\n            _adapter = adapter;\n        }\n\n        public async Task<SettlementResponse> ProcessSettlementAsync(SettlementRequest request)\n        {\n            if (request == null)\n                throw new ArgumentNullException(nameof(request));\n            return await _adapter.SendSettlementRequestAsync(request);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "a471b325-6aa9-48f8-890e-5b4f7420e35e",
        "Name": "Models",
        "ParentId": "af19350d-188d-4860-bd7b-39acd89a6478",
        "Type": 0,
        "Items": [
          {
            "Id": "cd06a653-0325-4438-a246-e3acb26bddcd",
            "Name": "SettlementRequest.cs",
            "ParentId": "a471b325-6aa9-48f8-890e-5b4f7420e35e",
            "Type": 1,
            "Text": "using System;\n\nnamespace ClearingHouseInterface.Models\n{\n    public class SettlementRequest\n    {\n        public string TransactionId { get; set; }\n        public decimal Amount { get; set; }\n        public DateTime TransactionDate { get; set; }\n        public string ClearingHouseId { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "889ffe4b-c888-4c27-96e8-dc57b9cb7d2b",
            "Name": "SettlementResponse.cs",
            "ParentId": "a471b325-6aa9-48f8-890e-5b4f7420e35e",
            "Type": 1,
            "Text": "using System;\n\nnamespace ClearingHouseInterface.Models\n{\n    public class SettlementResponse\n    {\n        public bool IsSuccess { get; set; }\n        public string Message { get; set; }\n        public DateTime ProcessedDate { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "1d476b40-8111-4da4-9901-03bdf5f2660d",
            "Name": "ClearingHouseConfig.cs",
            "ParentId": "a471b325-6aa9-48f8-890e-5b4f7420e35e",
            "Type": 1,
            "Text": "namespace ClearingHouseInterface.Models\n{\n    public class ClearingHouseConfig\n    {\n        public string EndpointUrl { get; set; }\n        public string ApiKey { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "68ba46aa-46a7-47b2-80c2-f3e451af9d89",
        "Name": "Infrastructure",
        "ParentId": "af19350d-188d-4860-bd7b-39acd89a6478",
        "Type": 0,
        "Items": [
          {
            "Id": "8df0db7a-3c02-44ed-9663-68ba1198e1dd",
            "Name": "ClearingHouseAdapter.cs",
            "ParentId": "68ba46aa-46a7-47b2-80c2-f3e451af9d89",
            "Type": 1,
            "Text": "using System;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\nusing ClearingHouseInterface.Models;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\n\nnamespace ClearingHouseInterface.Infrastructure\n{\n    public interface IClearingHouseAdapter\n    {\n        Task<SettlementResponse> SendSettlementRequestAsync(SettlementRequest request);\n    }\n\n    public class ClearingHouseAdapter : IClearingHouseAdapter\n    {\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<ClearingHouseAdapter> _logger;\n        private readonly ClearingHouseConfig _config;\n\n        public ClearingHouseAdapter(IHttpClientFactory httpClientFactory, IConfiguration configuration, ILogger<ClearingHouseAdapter> logger)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n            _logger = logger;\n            _config = new ClearingHouseConfig\n            {\n                EndpointUrl = configuration[\"ClearingHouse:EndpointUrl\"],\n                ApiKey = configuration[\"ClearingHouse:ApiKey\"]\n            };\n        }\n\n        public async Task<SettlementResponse> SendSettlementRequestAsync(SettlementRequest request)\n        {\n            try\n            {\n                _httpClient.DefaultRequestHeaders.Remove(\"ApiKey\");\n                _httpClient.DefaultRequestHeaders.Add(\"ApiKey\", _config.ApiKey);\n\n                var response = await _httpClient.PostAsJsonAsync(_config.EndpointUrl, request);\n                if (response.IsSuccessStatusCode)\n                {\n                    var settlementResponse = await response.Content.ReadFromJsonAsync<SettlementResponse>();\n                    settlementResponse.ProcessedDate = System.DateTime.UtcNow;\n                    return settlementResponse;\n                }\n                else\n                {\n                    _logger.LogError(\"Failed to send settlement request. Status Code: {StatusCode}\", response.StatusCode);\n                    return new SettlementResponse\n                    {\n                        IsSuccess = false,\n                        Message = $\"Error: {response.StatusCode}\",\n                        ProcessedDate = System.DateTime.UtcNow\n                    };\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Exception occurred while sending settlement request\");\n                return new SettlementResponse\n                {\n                    IsSuccess = false,\n                    Message = ex.Message,\n                    ProcessedDate = System.DateTime.UtcNow\n                };\n            }\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "aac06764-dcbf-4f59-89f8-da19b230fcc9",
    "Name": "SettlementReconciliationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "ce20e8a9-b19a-47f3-87e2-9027c35f3f3d",
        "Name": "Program.cs",
        "ParentId": "aac06764-dcbf-4f59-89f8-da19b230fcc9",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing SettlementReconciliationService.Services;\nusing SettlementReconciliationService.Data;\nusing SettlementReconciliationService.Infrastructure;\n\nnamespace SettlementReconciliationService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = WebApplication.CreateBuilder(args);\n            \n            // Register services\n            builder.Services.AddControllers();\n            builder.Services.AddHttpClient();\n            builder.Services.AddScoped<IReconciliationService, ReconciliationService>();\n            builder.Services.AddScoped<ISettlementRepository, SettlementRepository>();\n            builder.Services.AddScoped<ISettlementAdapter, SettlementAdapter>();\n            builder.Services.AddLogging();\n            \n            var app = builder.Build();\n            \n            app.UseRouting();\n            \n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n            \n            app.Run();\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "568655a8-43e8-4fd3-a303-260074a25af5",
        "Name": "Controllers",
        "ParentId": "aac06764-dcbf-4f59-89f8-da19b230fcc9",
        "Type": 0,
        "Items": [
          {
            "Id": "89104f95-1446-40f1-98e4-b543df5f942f",
            "Name": "SettlementsController.cs",
            "ParentId": "568655a8-43e8-4fd3-a303-260074a25af5",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing SettlementReconciliationService.Services;\nusing SettlementReconciliationService.Models;\n\nnamespace SettlementReconciliationService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class SettlementsController : ControllerBase\n    {\n        private readonly IReconciliationService _reconciliationService;\n\n        public SettlementsController(IReconciliationService reconciliationService)\n        {\n            _reconciliationService = reconciliationService;\n        }\n\n        [HttpPost(\"reconcile\")]\n        public async Task<IActionResult> Reconcile([FromBody] ReconciliationRequest request)\n        {\n            var result = await _reconciliationService.ReconcileAsync(request);\n            if (result == null)\n            {\n                return BadRequest(\"Reconciliation failed.\");\n            }\n            return Ok(result);\n        }\n    }\n}",
            "Language": 0
          }
        ]
      },
      {
        "Id": "df2945f8-698c-48a0-8069-cc7788919c82",
        "Name": "Services",
        "ParentId": "aac06764-dcbf-4f59-89f8-da19b230fcc9",
        "Type": 0,
        "Items": [
          {
            "Id": "a60ff34d-4e49-422a-b4ee-118f2a1fe1f2",
            "Name": "IReconciliationService.cs",
            "ParentId": "df2945f8-698c-48a0-8069-cc7788919c82",
            "Type": 1,
            "Text": "using System.Threading.Tasks;\nusing SettlementReconciliationService.Models;\n\nnamespace SettlementReconciliationService.Services\n{\n    public interface IReconciliationService\n    {\n        Task<ReconciliationResult> ReconcileAsync(ReconciliationRequest request);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "5a719651-bfc4-4b72-a6f8-38aa520bcf01",
            "Name": "ReconciliationService.cs",
            "ParentId": "df2945f8-698c-48a0-8069-cc7788919c82",
            "Type": 1,
            "Text": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing SettlementReconciliationService.Models;\nusing SettlementReconciliationService.Data;\nusing SettlementReconciliationService.Infrastructure;\nusing Microsoft.Extensions.Logging;\n\nnamespace SettlementReconciliationService.Services\n{\n    public class ReconciliationService : IReconciliationService\n    {\n        private readonly ISettlementRepository _repository;\n        private readonly ISettlementAdapter _adapter;\n        private readonly ILogger<ReconciliationService> _logger;\n\n        public ReconciliationService(ISettlementRepository repository, ISettlementAdapter adapter, ILogger<ReconciliationService> logger)\n        {\n            _repository = repository;\n            _adapter = adapter;\n            _logger = logger;\n        }\n\n        public async Task<ReconciliationResult> ReconcileAsync(ReconciliationRequest request)\n        {\n            // Retrieve internal settlement records\n            var internalSettlements = await _repository.GetSettlementsAsync(request.FromDate, request.ToDate);\n\n            // Retrieve external settlement records\n            var externalSettlements = await _adapter.GetExternalSettlementsAsync(request.FromDate, request.ToDate);\n            \n            // Compare sets based on unique identifier\n            var internalIds = internalSettlements.Select(s => s.Id).ToHashSet();\n            var externalIds = externalSettlements.Select(s => s.Id).ToHashSet();\n            \n            var missingInExternal = internalSettlements.Where(s => !externalIds.Contains(s.Id)).ToList();\n            var extraInExternal = externalSettlements.Where(s => !internalIds.Contains(s.Id)).ToList();\n            \n            bool isBalanced = !missingInExternal.Any() && !extraInExternal.Any();\n            \n            return new ReconciliationResult\n            {\n                IsBalanced = isBalanced,\n                MissingInExternal = missingInExternal,\n                ExtraInExternal = extraInExternal\n            };\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "f374939a-4ca6-423a-b301-f1fab22a49a8",
        "Name": "Models",
        "ParentId": "aac06764-dcbf-4f59-89f8-da19b230fcc9",
        "Type": 0,
        "Items": [
          {
            "Id": "8cd0f9ef-d767-45ac-9c10-90c703cbb891",
            "Name": "ReconciliationRequest.cs",
            "ParentId": "f374939a-4ca6-423a-b301-f1fab22a49a8",
            "Type": 1,
            "Text": "using System;\n\nnamespace SettlementReconciliationService.Models\n{\n    public class ReconciliationRequest\n    {\n        public DateTime FromDate { get; set; }\n        public DateTime ToDate { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "0c7eb28e-c8c4-4078-b9a6-7abd92de6ea1",
            "Name": "ReconciliationResult.cs",
            "ParentId": "f374939a-4ca6-423a-b301-f1fab22a49a8",
            "Type": 1,
            "Text": "using System.Collections.Generic;\n\nnamespace SettlementReconciliationService.Models\n{\n    public class ReconciliationResult\n    {\n        public bool IsBalanced { get; set; }\n        public List<SettlementRecord> MissingInExternal { get; set; }\n        public List<SettlementRecord> ExtraInExternal { get; set; }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "bb42c906-8707-47bc-a965-885dcd4cc7d1",
            "Name": "SettlementRecord.cs",
            "ParentId": "f374939a-4ca6-423a-b301-f1fab22a49a8",
            "Type": 1,
            "Text": "using System;\n\nnamespace SettlementReconciliationService.Models\n{\n    public class SettlementRecord\n    {\n        public string Id { get; set; }\n        public decimal Amount { get; set; }\n        public DateTime Date { get; set; }\n        public string Status { get; set; }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "080b8f6d-2ba4-45dd-b02e-ba1b8b8d071f",
        "Name": "Data",
        "ParentId": "aac06764-dcbf-4f59-89f8-da19b230fcc9",
        "Type": 0,
        "Items": [
          {
            "Id": "4b7036b9-b85d-4844-b8de-ab374abfded8",
            "Name": "ISettlementRepository.cs",
            "ParentId": "080b8f6d-2ba4-45dd-b02e-ba1b8b8d071f",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing SettlementReconciliationService.Models;\n\nnamespace SettlementReconciliationService.Data\n{\n    public interface ISettlementRepository\n    {\n        Task<IEnumerable<SettlementRecord>> GetSettlementsAsync(DateTime from, DateTime to);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "4b2f8750-c67d-46c1-84a9-aa12da4d91e7",
            "Name": "SettlementRepository.cs",
            "ParentId": "080b8f6d-2ba4-45dd-b02e-ba1b8b8d071f",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing SettlementReconciliationService.Models;\n\nnamespace SettlementReconciliationService.Data\n{\n    public class SettlementRepository : ISettlementRepository\n    {\n        public async Task<IEnumerable<SettlementRecord>> GetSettlementsAsync(DateTime from, DateTime to)\n        {\n            // In a production environment, this method would include robust data access logic\n            // such as querying a database with proper error handling and connection management.\n            var settlements = new List<SettlementRecord>\n            {\n                new SettlementRecord { Id = \"S1\", Amount = 1000.00m, Date = from.AddDays(1), Status = \"Cleared\" },\n                new SettlementRecord { Id = \"S2\", Amount = 2000.00m, Date = from.AddDays(2), Status = \"Cleared\" },\n                new SettlementRecord { Id = \"S3\", Amount = 1500.00m, Date = from.AddDays(3), Status = \"Pending\" }\n            };\n            \n            var result = settlements.FindAll(s => s.Date >= from && s.Date <= to);\n            return await Task.FromResult(result);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "69de71be-d778-4e0e-afa7-c122adbed585",
        "Name": "Infrastructure",
        "ParentId": "aac06764-dcbf-4f59-89f8-da19b230fcc9",
        "Type": 0,
        "Items": [
          {
            "Id": "e589e1c0-07da-4969-a326-1dc655fb2992",
            "Name": "ISettlementAdapter.cs",
            "ParentId": "69de71be-d778-4e0e-afa7-c122adbed585",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing SettlementReconciliationService.Models;\n\nnamespace SettlementReconciliationService.Infrastructure\n{\n    public interface ISettlementAdapter\n    {\n        Task<IEnumerable<SettlementRecord>> GetExternalSettlementsAsync(DateTime from, DateTime to);\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "87001e4f-ea70-43e8-a65b-9a904eb1bec5",
            "Name": "SettlementAdapter.cs",
            "ParentId": "69de71be-d778-4e0e-afa7-c122adbed585",
            "Type": 1,
            "Text": "using System;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing SettlementReconciliationService.Models;\nusing Microsoft.Extensions.Logging;\n\nnamespace SettlementReconciliationService.Infrastructure\n{\n    public class SettlementAdapter : ISettlementAdapter\n    {\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<SettlementAdapter> _logger;\n\n        public SettlementAdapter(IHttpClientFactory httpClientFactory, ILogger<SettlementAdapter> logger)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n            _logger = logger;\n        }\n\n        public async Task<IEnumerable<SettlementRecord>> GetExternalSettlementsAsync(DateTime from, DateTime to)\n        {\n            // Construct the external API URL with ISO 8601 date formats\n            string url = $\"https://external-settlement-service/api/settlements?fromDate={from:O}&toDate={to:O}\";\n\n            var response = await _httpClient.GetAsync(url);\n            response.EnsureSuccessStatusCode();\n            var jsonString = await response.Content.ReadAsStringAsync();\n            \n            var options = new JsonSerializerOptions\n            {\n                PropertyNameCaseInsensitive = true\n            };\n            \n            var settlements = JsonSerializer.Deserialize<IEnumerable<SettlementRecord>>(jsonString, options);\n            return settlements;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  }
]